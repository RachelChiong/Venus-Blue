
Test_Uart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000af58  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000974  0800b108  0800b108  0000c108  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ba7c  0800ba7c  0000d088  2**0
                  CONTENTS
  4 .ARM          00000008  0800ba7c  0800ba7c  0000ca7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ba84  0800ba84  0000d088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ba84  0800ba84  0000ca84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ba88  0800ba88  0000ca88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000088  20000000  0800ba8c  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d64  20000088  0800bb14  0000d088  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000dec  0800bb14  0000ddec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d088  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a8ed  00000000  00000000  0000d0b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004317  00000000  00000000  000279a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001170  00000000  00000000  0002bcc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d2d  00000000  00000000  0002ce30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002d164  00000000  00000000  0002db5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018af0  00000000  00000000  0005acc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fead7  00000000  00000000  000737b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00172288  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f5c  00000000  00000000  001722cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  00177228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000088 	.word	0x20000088
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800b0f0 	.word	0x0800b0f0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000008c 	.word	0x2000008c
 80001ec:	0800b0f0 	.word	0x0800b0f0

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <USBH_HID_EventCallback>:

char uart_buf[UART_BUF_SIZE];

uint8_t report_data[REPORT_BUF_SIZE];

void USBH_HID_EventCallback(USBH_HandleTypeDef *phost) {
 8000580:	b590      	push	{r4, r7, lr}
 8000582:	b08f      	sub	sp, #60	@ 0x3c
 8000584:	af04      	add	r7, sp, #16
 8000586:	6078      	str	r0, [r7, #4]
	if (USBH_HID_GetDeviceType(phost) == HID_MOUSE) {
 8000588:	6878      	ldr	r0, [r7, #4]
 800058a:	f006 f9c2 	bl	8006912 <USBH_HID_GetDeviceType>
 800058e:	4603      	mov	r3, r0
 8000590:	2b01      	cmp	r3, #1
 8000592:	d123      	bne.n	80005dc <USBH_HID_EventCallback+0x5c>
		HID_MOUSE_Info_TypeDef *mouse_info;
		mouse_info = USBH_HID_GetMouseInfo(phost);
 8000594:	6878      	ldr	r0, [r7, #4]
 8000596:	f006 fb41 	bl	8006c1c <USBH_HID_GetMouseInfo>
 800059a:	6138      	str	r0, [r7, #16]
		int len = sprintf(uart_buf, "X=%d, Y=%d, B=(%d,%d,%d)", mouse_info->x, mouse_info->y,
 800059c:	693b      	ldr	r3, [r7, #16]
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	4618      	mov	r0, r3
 80005a2:	693b      	ldr	r3, [r7, #16]
 80005a4:	785b      	ldrb	r3, [r3, #1]
 80005a6:	461c      	mov	r4, r3
				mouse_info->buttons[0], mouse_info->buttons[1], mouse_info->buttons[2]);
 80005a8:	693b      	ldr	r3, [r7, #16]
 80005aa:	789b      	ldrb	r3, [r3, #2]
		int len = sprintf(uart_buf, "X=%d, Y=%d, B=(%d,%d,%d)", mouse_info->x, mouse_info->y,
 80005ac:	461a      	mov	r2, r3
				mouse_info->buttons[0], mouse_info->buttons[1], mouse_info->buttons[2]);
 80005ae:	693b      	ldr	r3, [r7, #16]
 80005b0:	78db      	ldrb	r3, [r3, #3]
		int len = sprintf(uart_buf, "X=%d, Y=%d, B=(%d,%d,%d)", mouse_info->x, mouse_info->y,
 80005b2:	4619      	mov	r1, r3
				mouse_info->buttons[0], mouse_info->buttons[1], mouse_info->buttons[2]);
 80005b4:	693b      	ldr	r3, [r7, #16]
 80005b6:	791b      	ldrb	r3, [r3, #4]
		int len = sprintf(uart_buf, "X=%d, Y=%d, B=(%d,%d,%d)", mouse_info->x, mouse_info->y,
 80005b8:	9302      	str	r3, [sp, #8]
 80005ba:	9101      	str	r1, [sp, #4]
 80005bc:	9200      	str	r2, [sp, #0]
 80005be:	4623      	mov	r3, r4
 80005c0:	4602      	mov	r2, r0
 80005c2:	494b      	ldr	r1, [pc, #300]	@ (80006f0 <USBH_HID_EventCallback+0x170>)
 80005c4:	484b      	ldr	r0, [pc, #300]	@ (80006f4 <USBH_HID_EventCallback+0x174>)
 80005c6:	f009 fddb 	bl	800a180 <siprintf>
 80005ca:	60f8      	str	r0, [r7, #12]

		HAL_UART_Transmit(&hlpuart1,(uint8_t *)uart_buf,len,UART_TX_TIMEOUT);// Sending in normal mode
 80005cc:	68fb      	ldr	r3, [r7, #12]
 80005ce:	b29a      	uxth	r2, r3
 80005d0:	2364      	movs	r3, #100	@ 0x64
 80005d2:	4948      	ldr	r1, [pc, #288]	@ (80006f4 <USBH_HID_EventCallback+0x174>)
 80005d4:	4848      	ldr	r0, [pc, #288]	@ (80006f8 <USBH_HID_EventCallback+0x178>)
 80005d6:	f003 ffbb 	bl	8004550 <HAL_UART_Transmit>
 80005da:	e07f      	b.n	80006dc <USBH_HID_EventCallback+0x15c>
	} else if (USBH_HID_GetDeviceType(phost) == HID_PEDAL) {
 80005dc:	6878      	ldr	r0, [r7, #4]
 80005de:	f006 f998 	bl	8006912 <USBH_HID_GetDeviceType>
 80005e2:	4603      	mov	r3, r0
 80005e4:	2b03      	cmp	r3, #3
 80005e6:	d12e      	bne.n	8000646 <USBH_HID_EventCallback+0xc6>
		HID_PEDAL_Info_TypeDef *pedal_info;
		pedal_info = USBH_HID_GetPedalInfo(phost);
 80005e8:	6878      	ldr	r0, [r7, #4]
 80005ea:	f006 fc69 	bl	8006ec0 <USBH_HID_GetPedalInfo>
 80005ee:	61b8      	str	r0, [r7, #24]
		int len = sprintf(uart_buf, "PEDAL: X=%d, Y=%d, Z=%d\r\n", pedal_info->x, pedal_info->y,
 80005f0:	69bb      	ldr	r3, [r7, #24]
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	461a      	mov	r2, r3
 80005f6:	69bb      	ldr	r3, [r7, #24]
 80005f8:	785b      	ldrb	r3, [r3, #1]
 80005fa:	4619      	mov	r1, r3
				pedal_info->z);
 80005fc:	69bb      	ldr	r3, [r7, #24]
 80005fe:	789b      	ldrb	r3, [r3, #2]
		int len = sprintf(uart_buf, "PEDAL: X=%d, Y=%d, Z=%d\r\n", pedal_info->x, pedal_info->y,
 8000600:	9300      	str	r3, [sp, #0]
 8000602:	460b      	mov	r3, r1
 8000604:	493d      	ldr	r1, [pc, #244]	@ (80006fc <USBH_HID_EventCallback+0x17c>)
 8000606:	483b      	ldr	r0, [pc, #236]	@ (80006f4 <USBH_HID_EventCallback+0x174>)
 8000608:	f009 fdba 	bl	800a180 <siprintf>
 800060c:	6178      	str	r0, [r7, #20]
		len += sprintf(uart_buf + len, "{\"x\":%d,\"y\":%d,\"z\":%d}\r\n", pedal_info->x, pedal_info->y,
 800060e:	697b      	ldr	r3, [r7, #20]
 8000610:	4a38      	ldr	r2, [pc, #224]	@ (80006f4 <USBH_HID_EventCallback+0x174>)
 8000612:	1898      	adds	r0, r3, r2
 8000614:	69bb      	ldr	r3, [r7, #24]
 8000616:	781b      	ldrb	r3, [r3, #0]
 8000618:	461a      	mov	r2, r3
 800061a:	69bb      	ldr	r3, [r7, #24]
 800061c:	785b      	ldrb	r3, [r3, #1]
 800061e:	4619      	mov	r1, r3
				pedal_info->z);
 8000620:	69bb      	ldr	r3, [r7, #24]
 8000622:	789b      	ldrb	r3, [r3, #2]
		len += sprintf(uart_buf + len, "{\"x\":%d,\"y\":%d,\"z\":%d}\r\n", pedal_info->x, pedal_info->y,
 8000624:	9300      	str	r3, [sp, #0]
 8000626:	460b      	mov	r3, r1
 8000628:	4935      	ldr	r1, [pc, #212]	@ (8000700 <USBH_HID_EventCallback+0x180>)
 800062a:	f009 fda9 	bl	800a180 <siprintf>
 800062e:	4602      	mov	r2, r0
 8000630:	697b      	ldr	r3, [r7, #20]
 8000632:	4413      	add	r3, r2
 8000634:	617b      	str	r3, [r7, #20]

		HAL_UART_Transmit(&hlpuart1,(uint8_t *)uart_buf,len,UART_TX_TIMEOUT);// Sending in normal mode
 8000636:	697b      	ldr	r3, [r7, #20]
 8000638:	b29a      	uxth	r2, r3
 800063a:	2364      	movs	r3, #100	@ 0x64
 800063c:	492d      	ldr	r1, [pc, #180]	@ (80006f4 <USBH_HID_EventCallback+0x174>)
 800063e:	482e      	ldr	r0, [pc, #184]	@ (80006f8 <USBH_HID_EventCallback+0x178>)
 8000640:	f003 ff86 	bl	8004550 <HAL_UART_Transmit>
 8000644:	e04a      	b.n	80006dc <USBH_HID_EventCallback+0x15c>
	} else {
	  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800064c:	69db      	ldr	r3, [r3, #28]
 800064e:	61fb      	str	r3, [r7, #28]

	  if ((HID_Handle->length == 0U) || (HID_Handle->fifo.buf == NULL))
 8000650:	69fb      	ldr	r3, [r7, #28]
 8000652:	8b1b      	ldrh	r3, [r3, #24]
 8000654:	2b00      	cmp	r3, #0
 8000656:	d047      	beq.n	80006e8 <USBH_HID_EventCallback+0x168>
 8000658:	69fb      	ldr	r3, [r7, #28]
 800065a:	689b      	ldr	r3, [r3, #8]
 800065c:	2b00      	cmp	r3, #0
 800065e:	d043      	beq.n	80006e8 <USBH_HID_EventCallback+0x168>
	  {
	    return;
	  }

	  if (USBH_HID_FifoRead(&HID_Handle->fifo, &report_data, HID_Handle->length) == HID_Handle->length) {
 8000660:	69fb      	ldr	r3, [r7, #28]
 8000662:	f103 0008 	add.w	r0, r3, #8
 8000666:	69fb      	ldr	r3, [r7, #28]
 8000668:	8b1b      	ldrh	r3, [r3, #24]
 800066a:	461a      	mov	r2, r3
 800066c:	4925      	ldr	r1, [pc, #148]	@ (8000704 <USBH_HID_EventCallback+0x184>)
 800066e:	f006 f999 	bl	80069a4 <USBH_HID_FifoRead>
 8000672:	4603      	mov	r3, r0
 8000674:	461a      	mov	r2, r3
 8000676:	69fb      	ldr	r3, [r7, #28]
 8000678:	8b1b      	ldrh	r3, [r3, #24]
 800067a:	429a      	cmp	r2, r3
 800067c:	d12e      	bne.n	80006dc <USBH_HID_EventCallback+0x15c>
		  int len = 0;
 800067e:	2300      	movs	r3, #0
 8000680:	627b      	str	r3, [r7, #36]	@ 0x24
		  for (int i = 0; i < HID_Handle->length; i++) {
 8000682:	2300      	movs	r3, #0
 8000684:	623b      	str	r3, [r7, #32]
 8000686:	e011      	b.n	80006ac <USBH_HID_EventCallback+0x12c>
			  len += sprintf(uart_buf + len, "%02x ", report_data[i]);
 8000688:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800068a:	4a1a      	ldr	r2, [pc, #104]	@ (80006f4 <USBH_HID_EventCallback+0x174>)
 800068c:	1898      	adds	r0, r3, r2
 800068e:	4a1d      	ldr	r2, [pc, #116]	@ (8000704 <USBH_HID_EventCallback+0x184>)
 8000690:	6a3b      	ldr	r3, [r7, #32]
 8000692:	4413      	add	r3, r2
 8000694:	781b      	ldrb	r3, [r3, #0]
 8000696:	461a      	mov	r2, r3
 8000698:	491b      	ldr	r1, [pc, #108]	@ (8000708 <USBH_HID_EventCallback+0x188>)
 800069a:	f009 fd71 	bl	800a180 <siprintf>
 800069e:	4602      	mov	r2, r0
 80006a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006a2:	4413      	add	r3, r2
 80006a4:	627b      	str	r3, [r7, #36]	@ 0x24
		  for (int i = 0; i < HID_Handle->length; i++) {
 80006a6:	6a3b      	ldr	r3, [r7, #32]
 80006a8:	3301      	adds	r3, #1
 80006aa:	623b      	str	r3, [r7, #32]
 80006ac:	69fb      	ldr	r3, [r7, #28]
 80006ae:	8b1b      	ldrh	r3, [r3, #24]
 80006b0:	461a      	mov	r2, r3
 80006b2:	6a3b      	ldr	r3, [r7, #32]
 80006b4:	4293      	cmp	r3, r2
 80006b6:	dbe7      	blt.n	8000688 <USBH_HID_EventCallback+0x108>
		  }
		  len += sprintf(uart_buf + len, "\r\n");
 80006b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006ba:	4a0e      	ldr	r2, [pc, #56]	@ (80006f4 <USBH_HID_EventCallback+0x174>)
 80006bc:	4413      	add	r3, r2
 80006be:	4913      	ldr	r1, [pc, #76]	@ (800070c <USBH_HID_EventCallback+0x18c>)
 80006c0:	4618      	mov	r0, r3
 80006c2:	f009 fd5d 	bl	800a180 <siprintf>
 80006c6:	4602      	mov	r2, r0
 80006c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006ca:	4413      	add	r3, r2
 80006cc:	627b      	str	r3, [r7, #36]	@ 0x24
		  HAL_UART_Transmit(&hlpuart1,(uint8_t *)uart_buf,len,UART_TX_TIMEOUT);// Sending in normal mode
 80006ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006d0:	b29a      	uxth	r2, r3
 80006d2:	2364      	movs	r3, #100	@ 0x64
 80006d4:	4907      	ldr	r1, [pc, #28]	@ (80006f4 <USBH_HID_EventCallback+0x174>)
 80006d6:	4808      	ldr	r0, [pc, #32]	@ (80006f8 <USBH_HID_EventCallback+0x178>)
 80006d8:	f003 ff3a 	bl	8004550 <HAL_UART_Transmit>
	  }
	}

    // led
	HAL_GPIO_TogglePin (GPIOB, LD3_Pin);
 80006dc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80006e0:	480b      	ldr	r0, [pc, #44]	@ (8000710 <USBH_HID_EventCallback+0x190>)
 80006e2:	f000 fe63 	bl	80013ac <HAL_GPIO_TogglePin>
 80006e6:	e000      	b.n	80006ea <USBH_HID_EventCallback+0x16a>
	    return;
 80006e8:	bf00      	nop
}
 80006ea:	372c      	adds	r7, #44	@ 0x2c
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd90      	pop	{r4, r7, pc}
 80006f0:	0800b108 	.word	0x0800b108
 80006f4:	2000012c 	.word	0x2000012c
 80006f8:	200000a4 	.word	0x200000a4
 80006fc:	0800b124 	.word	0x0800b124
 8000700:	0800b140 	.word	0x0800b140
 8000704:	2000052c 	.word	0x2000052c
 8000708:	0800b15c 	.word	0x0800b15c
 800070c:	0800b164 	.word	0x0800b164
 8000710:	48000400 	.word	0x48000400

08000714 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b082      	sub	sp, #8
 8000718:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800071a:	f000 faf2 	bl	8000d02 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800071e:	f000 f823 	bl	8000768 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000722:	f000 f8b1 	bl	8000888 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8000726:	f000 f883 	bl	8000830 <MX_LPUART1_UART_Init>
  MX_USB_HOST_Init();
 800072a:	f009 f855 	bl	80097d8 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 2 */

  int len = 0;
 800072e:	2300      	movs	r3, #0
 8000730:	607b      	str	r3, [r7, #4]
  len += sprintf(uart_buf + len, "Booting up...\r\n");
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	4a09      	ldr	r2, [pc, #36]	@ (800075c <main+0x48>)
 8000736:	4413      	add	r3, r2
 8000738:	4909      	ldr	r1, [pc, #36]	@ (8000760 <main+0x4c>)
 800073a:	4618      	mov	r0, r3
 800073c:	f009 fd20 	bl	800a180 <siprintf>
 8000740:	4602      	mov	r2, r0
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	4413      	add	r3, r2
 8000746:	607b      	str	r3, [r7, #4]
  HAL_UART_Transmit(&hlpuart1,(uint8_t *)uart_buf,len,UART_TX_TIMEOUT);
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	b29a      	uxth	r2, r3
 800074c:	2364      	movs	r3, #100	@ 0x64
 800074e:	4903      	ldr	r1, [pc, #12]	@ (800075c <main+0x48>)
 8000750:	4804      	ldr	r0, [pc, #16]	@ (8000764 <main+0x50>)
 8000752:	f003 fefd 	bl	8004550 <HAL_UART_Transmit>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000756:	f009 f865 	bl	8009824 <MX_USB_HOST_Process>
 800075a:	e7fc      	b.n	8000756 <main+0x42>
 800075c:	2000012c 	.word	0x2000012c
 8000760:	0800b168 	.word	0x0800b168
 8000764:	200000a4 	.word	0x200000a4

08000768 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b096      	sub	sp, #88	@ 0x58
 800076c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800076e:	f107 0314 	add.w	r3, r7, #20
 8000772:	2244      	movs	r2, #68	@ 0x44
 8000774:	2100      	movs	r1, #0
 8000776:	4618      	mov	r0, r3
 8000778:	f009 fd65 	bl	800a246 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800077c:	463b      	mov	r3, r7
 800077e:	2200      	movs	r2, #0
 8000780:	601a      	str	r2, [r3, #0]
 8000782:	605a      	str	r2, [r3, #4]
 8000784:	609a      	str	r2, [r3, #8]
 8000786:	60da      	str	r2, [r3, #12]
 8000788:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800078a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800078e:	f002 fb03 	bl	8002d98 <HAL_PWREx_ControlVoltageScaling>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000798:	f000 f910 	bl	80009bc <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800079c:	f002 fade 	bl	8002d5c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80007a0:	4b22      	ldr	r3, [pc, #136]	@ (800082c <SystemClock_Config+0xc4>)
 80007a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80007a6:	4a21      	ldr	r2, [pc, #132]	@ (800082c <SystemClock_Config+0xc4>)
 80007a8:	f023 0318 	bic.w	r3, r3, #24
 80007ac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80007b0:	2314      	movs	r3, #20
 80007b2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80007b4:	2301      	movs	r3, #1
 80007b6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80007b8:	2301      	movs	r3, #1
 80007ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80007bc:	2300      	movs	r3, #0
 80007be:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_9;
 80007c0:	2390      	movs	r3, #144	@ 0x90
 80007c2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007c4:	2302      	movs	r3, #2
 80007c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80007c8:	2301      	movs	r3, #1
 80007ca:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 5;
 80007cc:	2305      	movs	r3, #5
 80007ce:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 71;
 80007d0:	2347      	movs	r3, #71	@ 0x47
 80007d2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007d4:	2302      	movs	r3, #2
 80007d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80007d8:	2302      	movs	r3, #2
 80007da:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV6;
 80007dc:	2306      	movs	r3, #6
 80007de:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007e0:	f107 0314 	add.w	r3, r7, #20
 80007e4:	4618      	mov	r0, r3
 80007e6:	f002 fb4d 	bl	8002e84 <HAL_RCC_OscConfig>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d001      	beq.n	80007f4 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80007f0:	f000 f8e4 	bl	80009bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007f4:	230f      	movs	r3, #15
 80007f6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007f8:	2303      	movs	r3, #3
 80007fa:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 80007fc:	2390      	movs	r3, #144	@ 0x90
 80007fe:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000800:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000804:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000806:	2300      	movs	r3, #0
 8000808:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800080a:	463b      	mov	r3, r7
 800080c:	2100      	movs	r1, #0
 800080e:	4618      	mov	r0, r3
 8000810:	f002 ff52 	bl	80036b8 <HAL_RCC_ClockConfig>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800081a:	f000 f8cf 	bl	80009bc <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800081e:	f003 fc6b 	bl	80040f8 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000822:	bf00      	nop
 8000824:	3758      	adds	r7, #88	@ 0x58
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	40021000 	.word	0x40021000

08000830 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000834:	4b12      	ldr	r3, [pc, #72]	@ (8000880 <MX_LPUART1_UART_Init+0x50>)
 8000836:	4a13      	ldr	r2, [pc, #76]	@ (8000884 <MX_LPUART1_UART_Init+0x54>)
 8000838:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800083a:	4b11      	ldr	r3, [pc, #68]	@ (8000880 <MX_LPUART1_UART_Init+0x50>)
 800083c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000840:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000842:	4b0f      	ldr	r3, [pc, #60]	@ (8000880 <MX_LPUART1_UART_Init+0x50>)
 8000844:	2200      	movs	r2, #0
 8000846:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000848:	4b0d      	ldr	r3, [pc, #52]	@ (8000880 <MX_LPUART1_UART_Init+0x50>)
 800084a:	2200      	movs	r2, #0
 800084c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800084e:	4b0c      	ldr	r3, [pc, #48]	@ (8000880 <MX_LPUART1_UART_Init+0x50>)
 8000850:	2200      	movs	r2, #0
 8000852:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000854:	4b0a      	ldr	r3, [pc, #40]	@ (8000880 <MX_LPUART1_UART_Init+0x50>)
 8000856:	220c      	movs	r2, #12
 8000858:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800085a:	4b09      	ldr	r3, [pc, #36]	@ (8000880 <MX_LPUART1_UART_Init+0x50>)
 800085c:	2200      	movs	r2, #0
 800085e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000860:	4b07      	ldr	r3, [pc, #28]	@ (8000880 <MX_LPUART1_UART_Init+0x50>)
 8000862:	2200      	movs	r2, #0
 8000864:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000866:	4b06      	ldr	r3, [pc, #24]	@ (8000880 <MX_LPUART1_UART_Init+0x50>)
 8000868:	2200      	movs	r2, #0
 800086a:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800086c:	4804      	ldr	r0, [pc, #16]	@ (8000880 <MX_LPUART1_UART_Init+0x50>)
 800086e:	f003 fe21 	bl	80044b4 <HAL_UART_Init>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8000878:	f000 f8a0 	bl	80009bc <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800087c:	bf00      	nop
 800087e:	bd80      	pop	{r7, pc}
 8000880:	200000a4 	.word	0x200000a4
 8000884:	40008000 	.word	0x40008000

08000888 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b08a      	sub	sp, #40	@ 0x28
 800088c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800088e:	f107 0314 	add.w	r3, r7, #20
 8000892:	2200      	movs	r2, #0
 8000894:	601a      	str	r2, [r3, #0]
 8000896:	605a      	str	r2, [r3, #4]
 8000898:	609a      	str	r2, [r3, #8]
 800089a:	60da      	str	r2, [r3, #12]
 800089c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800089e:	4b43      	ldr	r3, [pc, #268]	@ (80009ac <MX_GPIO_Init+0x124>)
 80008a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008a2:	4a42      	ldr	r2, [pc, #264]	@ (80009ac <MX_GPIO_Init+0x124>)
 80008a4:	f043 0304 	orr.w	r3, r3, #4
 80008a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008aa:	4b40      	ldr	r3, [pc, #256]	@ (80009ac <MX_GPIO_Init+0x124>)
 80008ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008ae:	f003 0304 	and.w	r3, r3, #4
 80008b2:	613b      	str	r3, [r7, #16]
 80008b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008b6:	4b3d      	ldr	r3, [pc, #244]	@ (80009ac <MX_GPIO_Init+0x124>)
 80008b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008ba:	4a3c      	ldr	r2, [pc, #240]	@ (80009ac <MX_GPIO_Init+0x124>)
 80008bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008c2:	4b3a      	ldr	r3, [pc, #232]	@ (80009ac <MX_GPIO_Init+0x124>)
 80008c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008ca:	60fb      	str	r3, [r7, #12]
 80008cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ce:	4b37      	ldr	r3, [pc, #220]	@ (80009ac <MX_GPIO_Init+0x124>)
 80008d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008d2:	4a36      	ldr	r2, [pc, #216]	@ (80009ac <MX_GPIO_Init+0x124>)
 80008d4:	f043 0302 	orr.w	r3, r3, #2
 80008d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008da:	4b34      	ldr	r3, [pc, #208]	@ (80009ac <MX_GPIO_Init+0x124>)
 80008dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008de:	f003 0302 	and.w	r3, r3, #2
 80008e2:	60bb      	str	r3, [r7, #8]
 80008e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008e6:	4b31      	ldr	r3, [pc, #196]	@ (80009ac <MX_GPIO_Init+0x124>)
 80008e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008ea:	4a30      	ldr	r2, [pc, #192]	@ (80009ac <MX_GPIO_Init+0x124>)
 80008ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80008f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008f2:	4b2e      	ldr	r3, [pc, #184]	@ (80009ac <MX_GPIO_Init+0x124>)
 80008f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80008fa:	607b      	str	r3, [r7, #4]
 80008fc:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 80008fe:	f002 fab1 	bl	8002e64 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000902:	4b2a      	ldr	r3, [pc, #168]	@ (80009ac <MX_GPIO_Init+0x124>)
 8000904:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000906:	4a29      	ldr	r2, [pc, #164]	@ (80009ac <MX_GPIO_Init+0x124>)
 8000908:	f043 0301 	orr.w	r3, r3, #1
 800090c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800090e:	4b27      	ldr	r3, [pc, #156]	@ (80009ac <MX_GPIO_Init+0x124>)
 8000910:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000912:	f003 0301 	and.w	r3, r3, #1
 8000916:	603b      	str	r3, [r7, #0]
 8000918:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800091a:	2200      	movs	r2, #0
 800091c:	f44f 4181 	mov.w	r1, #16512	@ 0x4080
 8000920:	4823      	ldr	r0, [pc, #140]	@ (80009b0 <MX_GPIO_Init+0x128>)
 8000922:	f000 fd2b 	bl	800137c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, USB_PowerSwitchOn_Pin|SMPS_V1_Pin|SMPS_EN_Pin|SMPS_SW_Pin, GPIO_PIN_RESET);
 8000926:	2200      	movs	r2, #0
 8000928:	f44f 5131 	mov.w	r1, #11328	@ 0x2c40
 800092c:	4821      	ldr	r0, [pc, #132]	@ (80009b4 <MX_GPIO_Init+0x12c>)
 800092e:	f000 fd25 	bl	800137c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000932:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000936:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000938:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800093c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093e:	2300      	movs	r3, #0
 8000940:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000942:	f107 0314 	add.w	r3, r7, #20
 8000946:	4619      	mov	r1, r3
 8000948:	481b      	ldr	r0, [pc, #108]	@ (80009b8 <MX_GPIO_Init+0x130>)
 800094a:	f000 fb85 	bl	8001058 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 800094e:	f44f 4381 	mov.w	r3, #16512	@ 0x4080
 8000952:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000954:	2301      	movs	r3, #1
 8000956:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000958:	2300      	movs	r3, #0
 800095a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800095c:	2300      	movs	r3, #0
 800095e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000960:	f107 0314 	add.w	r3, r7, #20
 8000964:	4619      	mov	r1, r3
 8000966:	4812      	ldr	r0, [pc, #72]	@ (80009b0 <MX_GPIO_Init+0x128>)
 8000968:	f000 fb76 	bl	8001058 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OverCurrent_Pin SMPS_PG_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin|SMPS_PG_Pin;
 800096c:	f44f 5381 	mov.w	r3, #4128	@ 0x1020
 8000970:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000972:	2300      	movs	r3, #0
 8000974:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000976:	2300      	movs	r3, #0
 8000978:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800097a:	f107 0314 	add.w	r3, r7, #20
 800097e:	4619      	mov	r1, r3
 8000980:	480c      	ldr	r0, [pc, #48]	@ (80009b4 <MX_GPIO_Init+0x12c>)
 8000982:	f000 fb69 	bl	8001058 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_PowerSwitchOn_Pin SMPS_V1_Pin SMPS_EN_Pin SMPS_SW_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin|SMPS_V1_Pin|SMPS_EN_Pin|SMPS_SW_Pin;
 8000986:	f44f 5331 	mov.w	r3, #11328	@ 0x2c40
 800098a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800098c:	2301      	movs	r3, #1
 800098e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000990:	2300      	movs	r3, #0
 8000992:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000994:	2300      	movs	r3, #0
 8000996:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000998:	f107 0314 	add.w	r3, r7, #20
 800099c:	4619      	mov	r1, r3
 800099e:	4805      	ldr	r0, [pc, #20]	@ (80009b4 <MX_GPIO_Init+0x12c>)
 80009a0:	f000 fb5a 	bl	8001058 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009a4:	bf00      	nop
 80009a6:	3728      	adds	r7, #40	@ 0x28
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	40021000 	.word	0x40021000
 80009b0:	48000400 	.word	0x48000400
 80009b4:	48001800 	.word	0x48001800
 80009b8:	48000800 	.word	0x48000800

080009bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009c0:	b672      	cpsid	i
}
 80009c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009c4:	bf00      	nop
 80009c6:	e7fd      	b.n	80009c4 <Error_Handler+0x8>

080009c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	b083      	sub	sp, #12
 80009cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ce:	4b0f      	ldr	r3, [pc, #60]	@ (8000a0c <HAL_MspInit+0x44>)
 80009d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80009d2:	4a0e      	ldr	r2, [pc, #56]	@ (8000a0c <HAL_MspInit+0x44>)
 80009d4:	f043 0301 	orr.w	r3, r3, #1
 80009d8:	6613      	str	r3, [r2, #96]	@ 0x60
 80009da:	4b0c      	ldr	r3, [pc, #48]	@ (8000a0c <HAL_MspInit+0x44>)
 80009dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80009de:	f003 0301 	and.w	r3, r3, #1
 80009e2:	607b      	str	r3, [r7, #4]
 80009e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009e6:	4b09      	ldr	r3, [pc, #36]	@ (8000a0c <HAL_MspInit+0x44>)
 80009e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009ea:	4a08      	ldr	r2, [pc, #32]	@ (8000a0c <HAL_MspInit+0x44>)
 80009ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009f0:	6593      	str	r3, [r2, #88]	@ 0x58
 80009f2:	4b06      	ldr	r3, [pc, #24]	@ (8000a0c <HAL_MspInit+0x44>)
 80009f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009fa:	603b      	str	r3, [r7, #0]
 80009fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009fe:	bf00      	nop
 8000a00:	370c      	adds	r7, #12
 8000a02:	46bd      	mov	sp, r7
 8000a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop
 8000a0c:	40021000 	.word	0x40021000

08000a10 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b0ac      	sub	sp, #176	@ 0xb0
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a18:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	601a      	str	r2, [r3, #0]
 8000a20:	605a      	str	r2, [r3, #4]
 8000a22:	609a      	str	r2, [r3, #8]
 8000a24:	60da      	str	r2, [r3, #12]
 8000a26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a28:	f107 0310 	add.w	r3, r7, #16
 8000a2c:	228c      	movs	r2, #140	@ 0x8c
 8000a2e:	2100      	movs	r1, #0
 8000a30:	4618      	mov	r0, r3
 8000a32:	f009 fc08 	bl	800a246 <memset>
  if(huart->Instance==LPUART1)
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	4a22      	ldr	r2, [pc, #136]	@ (8000ac4 <HAL_UART_MspInit+0xb4>)
 8000a3c:	4293      	cmp	r3, r2
 8000a3e:	d13d      	bne.n	8000abc <HAL_UART_MspInit+0xac>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000a40:	2320      	movs	r3, #32
 8000a42:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000a44:	2300      	movs	r3, #0
 8000a46:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a48:	f107 0310 	add.w	r3, r7, #16
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f003 f857 	bl	8003b00 <HAL_RCCEx_PeriphCLKConfig>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d001      	beq.n	8000a5c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000a58:	f7ff ffb0 	bl	80009bc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000a5c:	4b1a      	ldr	r3, [pc, #104]	@ (8000ac8 <HAL_UART_MspInit+0xb8>)
 8000a5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000a60:	4a19      	ldr	r2, [pc, #100]	@ (8000ac8 <HAL_UART_MspInit+0xb8>)
 8000a62:	f043 0301 	orr.w	r3, r3, #1
 8000a66:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8000a68:	4b17      	ldr	r3, [pc, #92]	@ (8000ac8 <HAL_UART_MspInit+0xb8>)
 8000a6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000a6c:	f003 0301 	and.w	r3, r3, #1
 8000a70:	60fb      	str	r3, [r7, #12]
 8000a72:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a74:	4b14      	ldr	r3, [pc, #80]	@ (8000ac8 <HAL_UART_MspInit+0xb8>)
 8000a76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a78:	4a13      	ldr	r2, [pc, #76]	@ (8000ac8 <HAL_UART_MspInit+0xb8>)
 8000a7a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000a7e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a80:	4b11      	ldr	r3, [pc, #68]	@ (8000ac8 <HAL_UART_MspInit+0xb8>)
 8000a82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000a88:	60bb      	str	r3, [r7, #8]
 8000a8a:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 8000a8c:	f002 f9ea 	bl	8002e64 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000a90:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000a94:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a98:	2302      	movs	r3, #2
 8000a9a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aa4:	2303      	movs	r3, #3
 8000aa6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000aaa:	2308      	movs	r3, #8
 8000aac:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ab0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	4805      	ldr	r0, [pc, #20]	@ (8000acc <HAL_UART_MspInit+0xbc>)
 8000ab8:	f000 face 	bl	8001058 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000abc:	bf00      	nop
 8000abe:	37b0      	adds	r7, #176	@ 0xb0
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	40008000 	.word	0x40008000
 8000ac8:	40021000 	.word	0x40021000
 8000acc:	48001800 	.word	0x48001800

08000ad0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ad4:	bf00      	nop
 8000ad6:	e7fd      	b.n	8000ad4 <NMI_Handler+0x4>

08000ad8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000adc:	bf00      	nop
 8000ade:	e7fd      	b.n	8000adc <HardFault_Handler+0x4>

08000ae0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ae4:	bf00      	nop
 8000ae6:	e7fd      	b.n	8000ae4 <MemManage_Handler+0x4>

08000ae8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aec:	bf00      	nop
 8000aee:	e7fd      	b.n	8000aec <BusFault_Handler+0x4>

08000af0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000af4:	bf00      	nop
 8000af6:	e7fd      	b.n	8000af4 <UsageFault_Handler+0x4>

08000af8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000afc:	bf00      	nop
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr

08000b06 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b06:	b480      	push	{r7}
 8000b08:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b0a:	bf00      	nop
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b12:	4770      	bx	lr

08000b14 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b18:	bf00      	nop
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr

08000b22 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b22:	b580      	push	{r7, lr}
 8000b24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b26:	f000 f941 	bl	8000dac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b2a:	bf00      	nop
 8000b2c:	bd80      	pop	{r7, pc}
	...

08000b30 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000b34:	4802      	ldr	r0, [pc, #8]	@ (8000b40 <OTG_FS_IRQHandler+0x10>)
 8000b36:	f000 fee9 	bl	800190c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000b3a:	bf00      	nop
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	2000095c 	.word	0x2000095c

08000b44 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b086      	sub	sp, #24
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	60f8      	str	r0, [r7, #12]
 8000b4c:	60b9      	str	r1, [r7, #8]
 8000b4e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b50:	2300      	movs	r3, #0
 8000b52:	617b      	str	r3, [r7, #20]
 8000b54:	e00a      	b.n	8000b6c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000b56:	f3af 8000 	nop.w
 8000b5a:	4601      	mov	r1, r0
 8000b5c:	68bb      	ldr	r3, [r7, #8]
 8000b5e:	1c5a      	adds	r2, r3, #1
 8000b60:	60ba      	str	r2, [r7, #8]
 8000b62:	b2ca      	uxtb	r2, r1
 8000b64:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b66:	697b      	ldr	r3, [r7, #20]
 8000b68:	3301      	adds	r3, #1
 8000b6a:	617b      	str	r3, [r7, #20]
 8000b6c:	697a      	ldr	r2, [r7, #20]
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	429a      	cmp	r2, r3
 8000b72:	dbf0      	blt.n	8000b56 <_read+0x12>
  }

  return len;
 8000b74:	687b      	ldr	r3, [r7, #4]
}
 8000b76:	4618      	mov	r0, r3
 8000b78:	3718      	adds	r7, #24
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}

08000b7e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b7e:	b580      	push	{r7, lr}
 8000b80:	b086      	sub	sp, #24
 8000b82:	af00      	add	r7, sp, #0
 8000b84:	60f8      	str	r0, [r7, #12]
 8000b86:	60b9      	str	r1, [r7, #8]
 8000b88:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	617b      	str	r3, [r7, #20]
 8000b8e:	e009      	b.n	8000ba4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000b90:	68bb      	ldr	r3, [r7, #8]
 8000b92:	1c5a      	adds	r2, r3, #1
 8000b94:	60ba      	str	r2, [r7, #8]
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b9e:	697b      	ldr	r3, [r7, #20]
 8000ba0:	3301      	adds	r3, #1
 8000ba2:	617b      	str	r3, [r7, #20]
 8000ba4:	697a      	ldr	r2, [r7, #20]
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	429a      	cmp	r2, r3
 8000baa:	dbf1      	blt.n	8000b90 <_write+0x12>
  }
  return len;
 8000bac:	687b      	ldr	r3, [r7, #4]
}
 8000bae:	4618      	mov	r0, r3
 8000bb0:	3718      	adds	r7, #24
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}

08000bb6 <_close>:

int _close(int file)
{
 8000bb6:	b480      	push	{r7}
 8000bb8:	b083      	sub	sp, #12
 8000bba:	af00      	add	r7, sp, #0
 8000bbc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000bbe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	370c      	adds	r7, #12
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr

08000bce <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000bce:	b480      	push	{r7}
 8000bd0:	b083      	sub	sp, #12
 8000bd2:	af00      	add	r7, sp, #0
 8000bd4:	6078      	str	r0, [r7, #4]
 8000bd6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000bde:	605a      	str	r2, [r3, #4]
  return 0;
 8000be0:	2300      	movs	r3, #0
}
 8000be2:	4618      	mov	r0, r3
 8000be4:	370c      	adds	r7, #12
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr

08000bee <_isatty>:

int _isatty(int file)
{
 8000bee:	b480      	push	{r7}
 8000bf0:	b083      	sub	sp, #12
 8000bf2:	af00      	add	r7, sp, #0
 8000bf4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000bf6:	2301      	movs	r3, #1
}
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	370c      	adds	r7, #12
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c02:	4770      	bx	lr

08000c04 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c04:	b480      	push	{r7}
 8000c06:	b085      	sub	sp, #20
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	60f8      	str	r0, [r7, #12]
 8000c0c:	60b9      	str	r1, [r7, #8]
 8000c0e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000c10:	2300      	movs	r3, #0
}
 8000c12:	4618      	mov	r0, r3
 8000c14:	3714      	adds	r7, #20
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr
	...

08000c20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b086      	sub	sp, #24
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c28:	4a14      	ldr	r2, [pc, #80]	@ (8000c7c <_sbrk+0x5c>)
 8000c2a:	4b15      	ldr	r3, [pc, #84]	@ (8000c80 <_sbrk+0x60>)
 8000c2c:	1ad3      	subs	r3, r2, r3
 8000c2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c30:	697b      	ldr	r3, [r7, #20]
 8000c32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c34:	4b13      	ldr	r3, [pc, #76]	@ (8000c84 <_sbrk+0x64>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d102      	bne.n	8000c42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c3c:	4b11      	ldr	r3, [pc, #68]	@ (8000c84 <_sbrk+0x64>)
 8000c3e:	4a12      	ldr	r2, [pc, #72]	@ (8000c88 <_sbrk+0x68>)
 8000c40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c42:	4b10      	ldr	r3, [pc, #64]	@ (8000c84 <_sbrk+0x64>)
 8000c44:	681a      	ldr	r2, [r3, #0]
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	4413      	add	r3, r2
 8000c4a:	693a      	ldr	r2, [r7, #16]
 8000c4c:	429a      	cmp	r2, r3
 8000c4e:	d207      	bcs.n	8000c60 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c50:	f009 fb58 	bl	800a304 <__errno>
 8000c54:	4603      	mov	r3, r0
 8000c56:	220c      	movs	r2, #12
 8000c58:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c5a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c5e:	e009      	b.n	8000c74 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c60:	4b08      	ldr	r3, [pc, #32]	@ (8000c84 <_sbrk+0x64>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c66:	4b07      	ldr	r3, [pc, #28]	@ (8000c84 <_sbrk+0x64>)
 8000c68:	681a      	ldr	r2, [r3, #0]
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	4413      	add	r3, r2
 8000c6e:	4a05      	ldr	r2, [pc, #20]	@ (8000c84 <_sbrk+0x64>)
 8000c70:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c72:	68fb      	ldr	r3, [r7, #12]
}
 8000c74:	4618      	mov	r0, r3
 8000c76:	3718      	adds	r7, #24
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	20050000 	.word	0x20050000
 8000c80:	00000400 	.word	0x00000400
 8000c84:	20000534 	.word	0x20000534
 8000c88:	20000df0 	.word	0x20000df0

08000c8c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000c90:	4b06      	ldr	r3, [pc, #24]	@ (8000cac <SystemInit+0x20>)
 8000c92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c96:	4a05      	ldr	r2, [pc, #20]	@ (8000cac <SystemInit+0x20>)
 8000c98:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c9c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000ca0:	bf00      	nop
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop
 8000cac:	e000ed00 	.word	0xe000ed00

08000cb0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000cb0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ce8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000cb4:	f7ff ffea 	bl	8000c8c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cb8:	480c      	ldr	r0, [pc, #48]	@ (8000cec <LoopForever+0x6>)
  ldr r1, =_edata
 8000cba:	490d      	ldr	r1, [pc, #52]	@ (8000cf0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000cbc:	4a0d      	ldr	r2, [pc, #52]	@ (8000cf4 <LoopForever+0xe>)
  movs r3, #0
 8000cbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cc0:	e002      	b.n	8000cc8 <LoopCopyDataInit>

08000cc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cc6:	3304      	adds	r3, #4

08000cc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ccc:	d3f9      	bcc.n	8000cc2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cce:	4a0a      	ldr	r2, [pc, #40]	@ (8000cf8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000cd0:	4c0a      	ldr	r4, [pc, #40]	@ (8000cfc <LoopForever+0x16>)
  movs r3, #0
 8000cd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cd4:	e001      	b.n	8000cda <LoopFillZerobss>

08000cd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cd8:	3204      	adds	r2, #4

08000cda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cdc:	d3fb      	bcc.n	8000cd6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cde:	f009 fb17 	bl	800a310 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ce2:	f7ff fd17 	bl	8000714 <main>

08000ce6 <LoopForever>:

LoopForever:
    b LoopForever
 8000ce6:	e7fe      	b.n	8000ce6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000ce8:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000cec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cf0:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8000cf4:	0800ba8c 	.word	0x0800ba8c
  ldr r2, =_sbss
 8000cf8:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8000cfc:	20000dec 	.word	0x20000dec

08000d00 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d00:	e7fe      	b.n	8000d00 <ADC1_2_IRQHandler>

08000d02 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d02:	b580      	push	{r7, lr}
 8000d04:	b082      	sub	sp, #8
 8000d06:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d0c:	2003      	movs	r0, #3
 8000d0e:	f000 f961 	bl	8000fd4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d12:	2000      	movs	r0, #0
 8000d14:	f000 f80e 	bl	8000d34 <HAL_InitTick>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d002      	beq.n	8000d24 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000d1e:	2301      	movs	r3, #1
 8000d20:	71fb      	strb	r3, [r7, #7]
 8000d22:	e001      	b.n	8000d28 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d24:	f7ff fe50 	bl	80009c8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d28:	79fb      	ldrb	r3, [r7, #7]
}
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	3708      	adds	r7, #8
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
	...

08000d34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b084      	sub	sp, #16
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000d40:	4b17      	ldr	r3, [pc, #92]	@ (8000da0 <HAL_InitTick+0x6c>)
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d023      	beq.n	8000d90 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000d48:	4b16      	ldr	r3, [pc, #88]	@ (8000da4 <HAL_InitTick+0x70>)
 8000d4a:	681a      	ldr	r2, [r3, #0]
 8000d4c:	4b14      	ldr	r3, [pc, #80]	@ (8000da0 <HAL_InitTick+0x6c>)
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	4619      	mov	r1, r3
 8000d52:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d56:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f000 f96d 	bl	800103e <HAL_SYSTICK_Config>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d10f      	bne.n	8000d8a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	2b0f      	cmp	r3, #15
 8000d6e:	d809      	bhi.n	8000d84 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d70:	2200      	movs	r2, #0
 8000d72:	6879      	ldr	r1, [r7, #4]
 8000d74:	f04f 30ff 	mov.w	r0, #4294967295
 8000d78:	f000 f937 	bl	8000fea <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d7c:	4a0a      	ldr	r2, [pc, #40]	@ (8000da8 <HAL_InitTick+0x74>)
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	6013      	str	r3, [r2, #0]
 8000d82:	e007      	b.n	8000d94 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000d84:	2301      	movs	r3, #1
 8000d86:	73fb      	strb	r3, [r7, #15]
 8000d88:	e004      	b.n	8000d94 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	73fb      	strb	r3, [r7, #15]
 8000d8e:	e001      	b.n	8000d94 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d90:	2301      	movs	r3, #1
 8000d92:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000d94:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	3710      	adds	r7, #16
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	20000008 	.word	0x20000008
 8000da4:	20000000 	.word	0x20000000
 8000da8:	20000004 	.word	0x20000004

08000dac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000db0:	4b06      	ldr	r3, [pc, #24]	@ (8000dcc <HAL_IncTick+0x20>)
 8000db2:	781b      	ldrb	r3, [r3, #0]
 8000db4:	461a      	mov	r2, r3
 8000db6:	4b06      	ldr	r3, [pc, #24]	@ (8000dd0 <HAL_IncTick+0x24>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	4413      	add	r3, r2
 8000dbc:	4a04      	ldr	r2, [pc, #16]	@ (8000dd0 <HAL_IncTick+0x24>)
 8000dbe:	6013      	str	r3, [r2, #0]
}
 8000dc0:	bf00      	nop
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr
 8000dca:	bf00      	nop
 8000dcc:	20000008 	.word	0x20000008
 8000dd0:	20000538 	.word	0x20000538

08000dd4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  return uwTick;
 8000dd8:	4b03      	ldr	r3, [pc, #12]	@ (8000de8 <HAL_GetTick+0x14>)
 8000dda:	681b      	ldr	r3, [r3, #0]
}
 8000ddc:	4618      	mov	r0, r3
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr
 8000de6:	bf00      	nop
 8000de8:	20000538 	.word	0x20000538

08000dec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b084      	sub	sp, #16
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000df4:	f7ff ffee 	bl	8000dd4 <HAL_GetTick>
 8000df8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e04:	d005      	beq.n	8000e12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000e06:	4b0a      	ldr	r3, [pc, #40]	@ (8000e30 <HAL_Delay+0x44>)
 8000e08:	781b      	ldrb	r3, [r3, #0]
 8000e0a:	461a      	mov	r2, r3
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	4413      	add	r3, r2
 8000e10:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e12:	bf00      	nop
 8000e14:	f7ff ffde 	bl	8000dd4 <HAL_GetTick>
 8000e18:	4602      	mov	r2, r0
 8000e1a:	68bb      	ldr	r3, [r7, #8]
 8000e1c:	1ad3      	subs	r3, r2, r3
 8000e1e:	68fa      	ldr	r2, [r7, #12]
 8000e20:	429a      	cmp	r2, r3
 8000e22:	d8f7      	bhi.n	8000e14 <HAL_Delay+0x28>
  {
  }
}
 8000e24:	bf00      	nop
 8000e26:	bf00      	nop
 8000e28:	3710      	adds	r7, #16
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	20000008 	.word	0x20000008

08000e34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b085      	sub	sp, #20
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	f003 0307 	and.w	r3, r3, #7
 8000e42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e44:	4b0c      	ldr	r3, [pc, #48]	@ (8000e78 <__NVIC_SetPriorityGrouping+0x44>)
 8000e46:	68db      	ldr	r3, [r3, #12]
 8000e48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e4a:	68ba      	ldr	r2, [r7, #8]
 8000e4c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e50:	4013      	ands	r3, r2
 8000e52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e58:	68bb      	ldr	r3, [r7, #8]
 8000e5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e5c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e60:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e66:	4a04      	ldr	r2, [pc, #16]	@ (8000e78 <__NVIC_SetPriorityGrouping+0x44>)
 8000e68:	68bb      	ldr	r3, [r7, #8]
 8000e6a:	60d3      	str	r3, [r2, #12]
}
 8000e6c:	bf00      	nop
 8000e6e:	3714      	adds	r7, #20
 8000e70:	46bd      	mov	sp, r7
 8000e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e76:	4770      	bx	lr
 8000e78:	e000ed00 	.word	0xe000ed00

08000e7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e80:	4b04      	ldr	r3, [pc, #16]	@ (8000e94 <__NVIC_GetPriorityGrouping+0x18>)
 8000e82:	68db      	ldr	r3, [r3, #12]
 8000e84:	0a1b      	lsrs	r3, r3, #8
 8000e86:	f003 0307 	and.w	r3, r3, #7
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e92:	4770      	bx	lr
 8000e94:	e000ed00 	.word	0xe000ed00

08000e98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b083      	sub	sp, #12
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ea2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	db0b      	blt.n	8000ec2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000eaa:	79fb      	ldrb	r3, [r7, #7]
 8000eac:	f003 021f 	and.w	r2, r3, #31
 8000eb0:	4907      	ldr	r1, [pc, #28]	@ (8000ed0 <__NVIC_EnableIRQ+0x38>)
 8000eb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb6:	095b      	lsrs	r3, r3, #5
 8000eb8:	2001      	movs	r0, #1
 8000eba:	fa00 f202 	lsl.w	r2, r0, r2
 8000ebe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000ec2:	bf00      	nop
 8000ec4:	370c      	adds	r7, #12
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop
 8000ed0:	e000e100 	.word	0xe000e100

08000ed4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b083      	sub	sp, #12
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	4603      	mov	r3, r0
 8000edc:	6039      	str	r1, [r7, #0]
 8000ede:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ee0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	db0a      	blt.n	8000efe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	b2da      	uxtb	r2, r3
 8000eec:	490c      	ldr	r1, [pc, #48]	@ (8000f20 <__NVIC_SetPriority+0x4c>)
 8000eee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef2:	0112      	lsls	r2, r2, #4
 8000ef4:	b2d2      	uxtb	r2, r2
 8000ef6:	440b      	add	r3, r1
 8000ef8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000efc:	e00a      	b.n	8000f14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	b2da      	uxtb	r2, r3
 8000f02:	4908      	ldr	r1, [pc, #32]	@ (8000f24 <__NVIC_SetPriority+0x50>)
 8000f04:	79fb      	ldrb	r3, [r7, #7]
 8000f06:	f003 030f 	and.w	r3, r3, #15
 8000f0a:	3b04      	subs	r3, #4
 8000f0c:	0112      	lsls	r2, r2, #4
 8000f0e:	b2d2      	uxtb	r2, r2
 8000f10:	440b      	add	r3, r1
 8000f12:	761a      	strb	r2, [r3, #24]
}
 8000f14:	bf00      	nop
 8000f16:	370c      	adds	r7, #12
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr
 8000f20:	e000e100 	.word	0xe000e100
 8000f24:	e000ed00 	.word	0xe000ed00

08000f28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b089      	sub	sp, #36	@ 0x24
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	60f8      	str	r0, [r7, #12]
 8000f30:	60b9      	str	r1, [r7, #8]
 8000f32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	f003 0307 	and.w	r3, r3, #7
 8000f3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f3c:	69fb      	ldr	r3, [r7, #28]
 8000f3e:	f1c3 0307 	rsb	r3, r3, #7
 8000f42:	2b04      	cmp	r3, #4
 8000f44:	bf28      	it	cs
 8000f46:	2304      	movcs	r3, #4
 8000f48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f4a:	69fb      	ldr	r3, [r7, #28]
 8000f4c:	3304      	adds	r3, #4
 8000f4e:	2b06      	cmp	r3, #6
 8000f50:	d902      	bls.n	8000f58 <NVIC_EncodePriority+0x30>
 8000f52:	69fb      	ldr	r3, [r7, #28]
 8000f54:	3b03      	subs	r3, #3
 8000f56:	e000      	b.n	8000f5a <NVIC_EncodePriority+0x32>
 8000f58:	2300      	movs	r3, #0
 8000f5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f5c:	f04f 32ff 	mov.w	r2, #4294967295
 8000f60:	69bb      	ldr	r3, [r7, #24]
 8000f62:	fa02 f303 	lsl.w	r3, r2, r3
 8000f66:	43da      	mvns	r2, r3
 8000f68:	68bb      	ldr	r3, [r7, #8]
 8000f6a:	401a      	ands	r2, r3
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f70:	f04f 31ff 	mov.w	r1, #4294967295
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	fa01 f303 	lsl.w	r3, r1, r3
 8000f7a:	43d9      	mvns	r1, r3
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f80:	4313      	orrs	r3, r2
         );
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	3724      	adds	r7, #36	@ 0x24
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr
	...

08000f90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	3b01      	subs	r3, #1
 8000f9c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000fa0:	d301      	bcc.n	8000fa6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	e00f      	b.n	8000fc6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fa6:	4a0a      	ldr	r2, [pc, #40]	@ (8000fd0 <SysTick_Config+0x40>)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	3b01      	subs	r3, #1
 8000fac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fae:	210f      	movs	r1, #15
 8000fb0:	f04f 30ff 	mov.w	r0, #4294967295
 8000fb4:	f7ff ff8e 	bl	8000ed4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fb8:	4b05      	ldr	r3, [pc, #20]	@ (8000fd0 <SysTick_Config+0x40>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fbe:	4b04      	ldr	r3, [pc, #16]	@ (8000fd0 <SysTick_Config+0x40>)
 8000fc0:	2207      	movs	r2, #7
 8000fc2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fc4:	2300      	movs	r3, #0
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	3708      	adds	r7, #8
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	e000e010 	.word	0xe000e010

08000fd4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fdc:	6878      	ldr	r0, [r7, #4]
 8000fde:	f7ff ff29 	bl	8000e34 <__NVIC_SetPriorityGrouping>
}
 8000fe2:	bf00      	nop
 8000fe4:	3708      	adds	r7, #8
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}

08000fea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fea:	b580      	push	{r7, lr}
 8000fec:	b086      	sub	sp, #24
 8000fee:	af00      	add	r7, sp, #0
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	60b9      	str	r1, [r7, #8]
 8000ff4:	607a      	str	r2, [r7, #4]
 8000ff6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ffc:	f7ff ff3e 	bl	8000e7c <__NVIC_GetPriorityGrouping>
 8001000:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001002:	687a      	ldr	r2, [r7, #4]
 8001004:	68b9      	ldr	r1, [r7, #8]
 8001006:	6978      	ldr	r0, [r7, #20]
 8001008:	f7ff ff8e 	bl	8000f28 <NVIC_EncodePriority>
 800100c:	4602      	mov	r2, r0
 800100e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001012:	4611      	mov	r1, r2
 8001014:	4618      	mov	r0, r3
 8001016:	f7ff ff5d 	bl	8000ed4 <__NVIC_SetPriority>
}
 800101a:	bf00      	nop
 800101c:	3718      	adds	r7, #24
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}

08001022 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001022:	b580      	push	{r7, lr}
 8001024:	b082      	sub	sp, #8
 8001026:	af00      	add	r7, sp, #0
 8001028:	4603      	mov	r3, r0
 800102a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800102c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001030:	4618      	mov	r0, r3
 8001032:	f7ff ff31 	bl	8000e98 <__NVIC_EnableIRQ>
}
 8001036:	bf00      	nop
 8001038:	3708      	adds	r7, #8
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}

0800103e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800103e:	b580      	push	{r7, lr}
 8001040:	b082      	sub	sp, #8
 8001042:	af00      	add	r7, sp, #0
 8001044:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001046:	6878      	ldr	r0, [r7, #4]
 8001048:	f7ff ffa2 	bl	8000f90 <SysTick_Config>
 800104c:	4603      	mov	r3, r0
}
 800104e:	4618      	mov	r0, r3
 8001050:	3708      	adds	r7, #8
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
	...

08001058 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001058:	b480      	push	{r7}
 800105a:	b087      	sub	sp, #28
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
 8001060:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001062:	2300      	movs	r3, #0
 8001064:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001066:	e166      	b.n	8001336 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	681a      	ldr	r2, [r3, #0]
 800106c:	2101      	movs	r1, #1
 800106e:	697b      	ldr	r3, [r7, #20]
 8001070:	fa01 f303 	lsl.w	r3, r1, r3
 8001074:	4013      	ands	r3, r2
 8001076:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	2b00      	cmp	r3, #0
 800107c:	f000 8158 	beq.w	8001330 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	f003 0303 	and.w	r3, r3, #3
 8001088:	2b01      	cmp	r3, #1
 800108a:	d005      	beq.n	8001098 <HAL_GPIO_Init+0x40>
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	f003 0303 	and.w	r3, r3, #3
 8001094:	2b02      	cmp	r3, #2
 8001096:	d130      	bne.n	80010fa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	689b      	ldr	r3, [r3, #8]
 800109c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800109e:	697b      	ldr	r3, [r7, #20]
 80010a0:	005b      	lsls	r3, r3, #1
 80010a2:	2203      	movs	r2, #3
 80010a4:	fa02 f303 	lsl.w	r3, r2, r3
 80010a8:	43db      	mvns	r3, r3
 80010aa:	693a      	ldr	r2, [r7, #16]
 80010ac:	4013      	ands	r3, r2
 80010ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	68da      	ldr	r2, [r3, #12]
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	005b      	lsls	r3, r3, #1
 80010b8:	fa02 f303 	lsl.w	r3, r2, r3
 80010bc:	693a      	ldr	r2, [r7, #16]
 80010be:	4313      	orrs	r3, r2
 80010c0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	693a      	ldr	r2, [r7, #16]
 80010c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80010ce:	2201      	movs	r2, #1
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	fa02 f303 	lsl.w	r3, r2, r3
 80010d6:	43db      	mvns	r3, r3
 80010d8:	693a      	ldr	r2, [r7, #16]
 80010da:	4013      	ands	r3, r2
 80010dc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	091b      	lsrs	r3, r3, #4
 80010e4:	f003 0201 	and.w	r2, r3, #1
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	fa02 f303 	lsl.w	r3, r2, r3
 80010ee:	693a      	ldr	r2, [r7, #16]
 80010f0:	4313      	orrs	r3, r2
 80010f2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	693a      	ldr	r2, [r7, #16]
 80010f8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	f003 0303 	and.w	r3, r3, #3
 8001102:	2b03      	cmp	r3, #3
 8001104:	d017      	beq.n	8001136 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	68db      	ldr	r3, [r3, #12]
 800110a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	005b      	lsls	r3, r3, #1
 8001110:	2203      	movs	r2, #3
 8001112:	fa02 f303 	lsl.w	r3, r2, r3
 8001116:	43db      	mvns	r3, r3
 8001118:	693a      	ldr	r2, [r7, #16]
 800111a:	4013      	ands	r3, r2
 800111c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	689a      	ldr	r2, [r3, #8]
 8001122:	697b      	ldr	r3, [r7, #20]
 8001124:	005b      	lsls	r3, r3, #1
 8001126:	fa02 f303 	lsl.w	r3, r2, r3
 800112a:	693a      	ldr	r2, [r7, #16]
 800112c:	4313      	orrs	r3, r2
 800112e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	693a      	ldr	r2, [r7, #16]
 8001134:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	f003 0303 	and.w	r3, r3, #3
 800113e:	2b02      	cmp	r3, #2
 8001140:	d123      	bne.n	800118a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001142:	697b      	ldr	r3, [r7, #20]
 8001144:	08da      	lsrs	r2, r3, #3
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	3208      	adds	r2, #8
 800114a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800114e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	f003 0307 	and.w	r3, r3, #7
 8001156:	009b      	lsls	r3, r3, #2
 8001158:	220f      	movs	r2, #15
 800115a:	fa02 f303 	lsl.w	r3, r2, r3
 800115e:	43db      	mvns	r3, r3
 8001160:	693a      	ldr	r2, [r7, #16]
 8001162:	4013      	ands	r3, r2
 8001164:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	691a      	ldr	r2, [r3, #16]
 800116a:	697b      	ldr	r3, [r7, #20]
 800116c:	f003 0307 	and.w	r3, r3, #7
 8001170:	009b      	lsls	r3, r3, #2
 8001172:	fa02 f303 	lsl.w	r3, r2, r3
 8001176:	693a      	ldr	r2, [r7, #16]
 8001178:	4313      	orrs	r3, r2
 800117a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800117c:	697b      	ldr	r3, [r7, #20]
 800117e:	08da      	lsrs	r2, r3, #3
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	3208      	adds	r2, #8
 8001184:	6939      	ldr	r1, [r7, #16]
 8001186:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001190:	697b      	ldr	r3, [r7, #20]
 8001192:	005b      	lsls	r3, r3, #1
 8001194:	2203      	movs	r2, #3
 8001196:	fa02 f303 	lsl.w	r3, r2, r3
 800119a:	43db      	mvns	r3, r3
 800119c:	693a      	ldr	r2, [r7, #16]
 800119e:	4013      	ands	r3, r2
 80011a0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	f003 0203 	and.w	r2, r3, #3
 80011aa:	697b      	ldr	r3, [r7, #20]
 80011ac:	005b      	lsls	r3, r3, #1
 80011ae:	fa02 f303 	lsl.w	r3, r2, r3
 80011b2:	693a      	ldr	r2, [r7, #16]
 80011b4:	4313      	orrs	r3, r2
 80011b6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	693a      	ldr	r2, [r7, #16]
 80011bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	f000 80b2 	beq.w	8001330 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011cc:	4b61      	ldr	r3, [pc, #388]	@ (8001354 <HAL_GPIO_Init+0x2fc>)
 80011ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011d0:	4a60      	ldr	r2, [pc, #384]	@ (8001354 <HAL_GPIO_Init+0x2fc>)
 80011d2:	f043 0301 	orr.w	r3, r3, #1
 80011d6:	6613      	str	r3, [r2, #96]	@ 0x60
 80011d8:	4b5e      	ldr	r3, [pc, #376]	@ (8001354 <HAL_GPIO_Init+0x2fc>)
 80011da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011dc:	f003 0301 	and.w	r3, r3, #1
 80011e0:	60bb      	str	r3, [r7, #8]
 80011e2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80011e4:	4a5c      	ldr	r2, [pc, #368]	@ (8001358 <HAL_GPIO_Init+0x300>)
 80011e6:	697b      	ldr	r3, [r7, #20]
 80011e8:	089b      	lsrs	r3, r3, #2
 80011ea:	3302      	adds	r3, #2
 80011ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011f0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80011f2:	697b      	ldr	r3, [r7, #20]
 80011f4:	f003 0303 	and.w	r3, r3, #3
 80011f8:	009b      	lsls	r3, r3, #2
 80011fa:	220f      	movs	r2, #15
 80011fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001200:	43db      	mvns	r3, r3
 8001202:	693a      	ldr	r2, [r7, #16]
 8001204:	4013      	ands	r3, r2
 8001206:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800120e:	d02b      	beq.n	8001268 <HAL_GPIO_Init+0x210>
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	4a52      	ldr	r2, [pc, #328]	@ (800135c <HAL_GPIO_Init+0x304>)
 8001214:	4293      	cmp	r3, r2
 8001216:	d025      	beq.n	8001264 <HAL_GPIO_Init+0x20c>
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	4a51      	ldr	r2, [pc, #324]	@ (8001360 <HAL_GPIO_Init+0x308>)
 800121c:	4293      	cmp	r3, r2
 800121e:	d01f      	beq.n	8001260 <HAL_GPIO_Init+0x208>
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	4a50      	ldr	r2, [pc, #320]	@ (8001364 <HAL_GPIO_Init+0x30c>)
 8001224:	4293      	cmp	r3, r2
 8001226:	d019      	beq.n	800125c <HAL_GPIO_Init+0x204>
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	4a4f      	ldr	r2, [pc, #316]	@ (8001368 <HAL_GPIO_Init+0x310>)
 800122c:	4293      	cmp	r3, r2
 800122e:	d013      	beq.n	8001258 <HAL_GPIO_Init+0x200>
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	4a4e      	ldr	r2, [pc, #312]	@ (800136c <HAL_GPIO_Init+0x314>)
 8001234:	4293      	cmp	r3, r2
 8001236:	d00d      	beq.n	8001254 <HAL_GPIO_Init+0x1fc>
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	4a4d      	ldr	r2, [pc, #308]	@ (8001370 <HAL_GPIO_Init+0x318>)
 800123c:	4293      	cmp	r3, r2
 800123e:	d007      	beq.n	8001250 <HAL_GPIO_Init+0x1f8>
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	4a4c      	ldr	r2, [pc, #304]	@ (8001374 <HAL_GPIO_Init+0x31c>)
 8001244:	4293      	cmp	r3, r2
 8001246:	d101      	bne.n	800124c <HAL_GPIO_Init+0x1f4>
 8001248:	2307      	movs	r3, #7
 800124a:	e00e      	b.n	800126a <HAL_GPIO_Init+0x212>
 800124c:	2308      	movs	r3, #8
 800124e:	e00c      	b.n	800126a <HAL_GPIO_Init+0x212>
 8001250:	2306      	movs	r3, #6
 8001252:	e00a      	b.n	800126a <HAL_GPIO_Init+0x212>
 8001254:	2305      	movs	r3, #5
 8001256:	e008      	b.n	800126a <HAL_GPIO_Init+0x212>
 8001258:	2304      	movs	r3, #4
 800125a:	e006      	b.n	800126a <HAL_GPIO_Init+0x212>
 800125c:	2303      	movs	r3, #3
 800125e:	e004      	b.n	800126a <HAL_GPIO_Init+0x212>
 8001260:	2302      	movs	r3, #2
 8001262:	e002      	b.n	800126a <HAL_GPIO_Init+0x212>
 8001264:	2301      	movs	r3, #1
 8001266:	e000      	b.n	800126a <HAL_GPIO_Init+0x212>
 8001268:	2300      	movs	r3, #0
 800126a:	697a      	ldr	r2, [r7, #20]
 800126c:	f002 0203 	and.w	r2, r2, #3
 8001270:	0092      	lsls	r2, r2, #2
 8001272:	4093      	lsls	r3, r2
 8001274:	693a      	ldr	r2, [r7, #16]
 8001276:	4313      	orrs	r3, r2
 8001278:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800127a:	4937      	ldr	r1, [pc, #220]	@ (8001358 <HAL_GPIO_Init+0x300>)
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	089b      	lsrs	r3, r3, #2
 8001280:	3302      	adds	r3, #2
 8001282:	693a      	ldr	r2, [r7, #16]
 8001284:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001288:	4b3b      	ldr	r3, [pc, #236]	@ (8001378 <HAL_GPIO_Init+0x320>)
 800128a:	689b      	ldr	r3, [r3, #8]
 800128c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	43db      	mvns	r3, r3
 8001292:	693a      	ldr	r2, [r7, #16]
 8001294:	4013      	ands	r3, r2
 8001296:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d003      	beq.n	80012ac <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80012a4:	693a      	ldr	r2, [r7, #16]
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	4313      	orrs	r3, r2
 80012aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80012ac:	4a32      	ldr	r2, [pc, #200]	@ (8001378 <HAL_GPIO_Init+0x320>)
 80012ae:	693b      	ldr	r3, [r7, #16]
 80012b0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80012b2:	4b31      	ldr	r3, [pc, #196]	@ (8001378 <HAL_GPIO_Init+0x320>)
 80012b4:	68db      	ldr	r3, [r3, #12]
 80012b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	43db      	mvns	r3, r3
 80012bc:	693a      	ldr	r2, [r7, #16]
 80012be:	4013      	ands	r3, r2
 80012c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d003      	beq.n	80012d6 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80012ce:	693a      	ldr	r2, [r7, #16]
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	4313      	orrs	r3, r2
 80012d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80012d6:	4a28      	ldr	r2, [pc, #160]	@ (8001378 <HAL_GPIO_Init+0x320>)
 80012d8:	693b      	ldr	r3, [r7, #16]
 80012da:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80012dc:	4b26      	ldr	r3, [pc, #152]	@ (8001378 <HAL_GPIO_Init+0x320>)
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	43db      	mvns	r3, r3
 80012e6:	693a      	ldr	r2, [r7, #16]
 80012e8:	4013      	ands	r3, r2
 80012ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d003      	beq.n	8001300 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80012f8:	693a      	ldr	r2, [r7, #16]
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	4313      	orrs	r3, r2
 80012fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001300:	4a1d      	ldr	r2, [pc, #116]	@ (8001378 <HAL_GPIO_Init+0x320>)
 8001302:	693b      	ldr	r3, [r7, #16]
 8001304:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001306:	4b1c      	ldr	r3, [pc, #112]	@ (8001378 <HAL_GPIO_Init+0x320>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	43db      	mvns	r3, r3
 8001310:	693a      	ldr	r2, [r7, #16]
 8001312:	4013      	ands	r3, r2
 8001314:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800131e:	2b00      	cmp	r3, #0
 8001320:	d003      	beq.n	800132a <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8001322:	693a      	ldr	r2, [r7, #16]
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	4313      	orrs	r3, r2
 8001328:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800132a:	4a13      	ldr	r2, [pc, #76]	@ (8001378 <HAL_GPIO_Init+0x320>)
 800132c:	693b      	ldr	r3, [r7, #16]
 800132e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	3301      	adds	r3, #1
 8001334:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	681a      	ldr	r2, [r3, #0]
 800133a:	697b      	ldr	r3, [r7, #20]
 800133c:	fa22 f303 	lsr.w	r3, r2, r3
 8001340:	2b00      	cmp	r3, #0
 8001342:	f47f ae91 	bne.w	8001068 <HAL_GPIO_Init+0x10>
  }
}
 8001346:	bf00      	nop
 8001348:	bf00      	nop
 800134a:	371c      	adds	r7, #28
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr
 8001354:	40021000 	.word	0x40021000
 8001358:	40010000 	.word	0x40010000
 800135c:	48000400 	.word	0x48000400
 8001360:	48000800 	.word	0x48000800
 8001364:	48000c00 	.word	0x48000c00
 8001368:	48001000 	.word	0x48001000
 800136c:	48001400 	.word	0x48001400
 8001370:	48001800 	.word	0x48001800
 8001374:	48001c00 	.word	0x48001c00
 8001378:	40010400 	.word	0x40010400

0800137c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800137c:	b480      	push	{r7}
 800137e:	b083      	sub	sp, #12
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
 8001384:	460b      	mov	r3, r1
 8001386:	807b      	strh	r3, [r7, #2]
 8001388:	4613      	mov	r3, r2
 800138a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800138c:	787b      	ldrb	r3, [r7, #1]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d003      	beq.n	800139a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001392:	887a      	ldrh	r2, [r7, #2]
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001398:	e002      	b.n	80013a0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800139a:	887a      	ldrh	r2, [r7, #2]
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80013a0:	bf00      	nop
 80013a2:	370c      	adds	r7, #12
 80013a4:	46bd      	mov	sp, r7
 80013a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013aa:	4770      	bx	lr

080013ac <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b085      	sub	sp, #20
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
 80013b4:	460b      	mov	r3, r1
 80013b6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	695b      	ldr	r3, [r3, #20]
 80013bc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80013be:	887a      	ldrh	r2, [r7, #2]
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	4013      	ands	r3, r2
 80013c4:	041a      	lsls	r2, r3, #16
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	43d9      	mvns	r1, r3
 80013ca:	887b      	ldrh	r3, [r7, #2]
 80013cc:	400b      	ands	r3, r1
 80013ce:	431a      	orrs	r2, r3
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	619a      	str	r2, [r3, #24]
}
 80013d4:	bf00      	nop
 80013d6:	3714      	adds	r7, #20
 80013d8:	46bd      	mov	sp, r7
 80013da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013de:	4770      	bx	lr

080013e0 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80013e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013e2:	b08f      	sub	sp, #60	@ 0x3c
 80013e4:	af0a      	add	r7, sp, #40	@ 0x28
 80013e6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d101      	bne.n	80013f2 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80013ee:	2301      	movs	r3, #1
 80013f0:	e054      	b.n	800149c <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	f893 3339 	ldrb.w	r3, [r3, #825]	@ 0x339
 80013fe:	b2db      	uxtb	r3, r3
 8001400:	2b00      	cmp	r3, #0
 8001402:	d106      	bne.n	8001412 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2200      	movs	r2, #0
 8001408:	f883 2338 	strb.w	r2, [r3, #824]	@ 0x338

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800140c:	6878      	ldr	r0, [r7, #4]
 800140e:	f008 fa41 	bl	8009894 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	2203      	movs	r2, #3
 8001416:	f883 2339 	strb.w	r2, [r3, #825]	@ 0x339

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800141e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001422:	2b00      	cmp	r3, #0
 8001424:	d102      	bne.n	800142c <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2200      	movs	r2, #0
 800142a:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4618      	mov	r0, r3
 8001432:	f003 fe21 	bl	8005078 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	603b      	str	r3, [r7, #0]
 800143c:	687e      	ldr	r6, [r7, #4]
 800143e:	466d      	mov	r5, sp
 8001440:	f106 0410 	add.w	r4, r6, #16
 8001444:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001446:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001448:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800144a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800144c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001450:	e885 0003 	stmia.w	r5, {r0, r1}
 8001454:	1d33      	adds	r3, r6, #4
 8001456:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001458:	6838      	ldr	r0, [r7, #0]
 800145a:	f003 fdd0 	bl	8004ffe <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	2101      	movs	r1, #1
 8001464:	4618      	mov	r0, r3
 8001466:	f003 fe18 	bl	800509a <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	603b      	str	r3, [r7, #0]
 8001470:	687e      	ldr	r6, [r7, #4]
 8001472:	466d      	mov	r5, sp
 8001474:	f106 0410 	add.w	r4, r6, #16
 8001478:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800147a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800147c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800147e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001480:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001484:	e885 0003 	stmia.w	r5, {r0, r1}
 8001488:	1d33      	adds	r3, r6, #4
 800148a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800148c:	6838      	ldr	r0, [r7, #0]
 800148e:	f003 ffbd 	bl	800540c <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	2201      	movs	r2, #1
 8001496:	f883 2339 	strb.w	r2, [r3, #825]	@ 0x339

  return HAL_OK;
 800149a:	2300      	movs	r3, #0
}
 800149c:	4618      	mov	r0, r3
 800149e:	3714      	adds	r7, #20
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080014a4 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80014a4:	b590      	push	{r4, r7, lr}
 80014a6:	b089      	sub	sp, #36	@ 0x24
 80014a8:	af04      	add	r7, sp, #16
 80014aa:	6078      	str	r0, [r7, #4]
 80014ac:	4608      	mov	r0, r1
 80014ae:	4611      	mov	r1, r2
 80014b0:	461a      	mov	r2, r3
 80014b2:	4603      	mov	r3, r0
 80014b4:	70fb      	strb	r3, [r7, #3]
 80014b6:	460b      	mov	r3, r1
 80014b8:	70bb      	strb	r3, [r7, #2]
 80014ba:	4613      	mov	r3, r2
 80014bc:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HCcharMps = mps;
 80014be:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80014c0:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hhcd);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	f893 3338 	ldrb.w	r3, [r3, #824]	@ 0x338
 80014c8:	2b01      	cmp	r3, #1
 80014ca:	d101      	bne.n	80014d0 <HAL_HCD_HC_Init+0x2c>
 80014cc:	2302      	movs	r3, #2
 80014ce:	e087      	b.n	80015e0 <HAL_HCD_HC_Init+0x13c>
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2201      	movs	r2, #1
 80014d4:	f883 2338 	strb.w	r2, [r3, #824]	@ 0x338
  hhcd->hc[ch_num].do_ping = 0U;
 80014d8:	78fa      	ldrb	r2, [r7, #3]
 80014da:	6879      	ldr	r1, [r7, #4]
 80014dc:	4613      	mov	r3, r2
 80014de:	005b      	lsls	r3, r3, #1
 80014e0:	4413      	add	r3, r2
 80014e2:	011b      	lsls	r3, r3, #4
 80014e4:	440b      	add	r3, r1
 80014e6:	333d      	adds	r3, #61	@ 0x3d
 80014e8:	2200      	movs	r2, #0
 80014ea:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80014ec:	78fa      	ldrb	r2, [r7, #3]
 80014ee:	6879      	ldr	r1, [r7, #4]
 80014f0:	4613      	mov	r3, r2
 80014f2:	005b      	lsls	r3, r3, #1
 80014f4:	4413      	add	r3, r2
 80014f6:	011b      	lsls	r3, r3, #4
 80014f8:	440b      	add	r3, r1
 80014fa:	3338      	adds	r3, #56	@ 0x38
 80014fc:	787a      	ldrb	r2, [r7, #1]
 80014fe:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001500:	78fa      	ldrb	r2, [r7, #3]
 8001502:	6879      	ldr	r1, [r7, #4]
 8001504:	4613      	mov	r3, r2
 8001506:	005b      	lsls	r3, r3, #1
 8001508:	4413      	add	r3, r2
 800150a:	011b      	lsls	r3, r3, #4
 800150c:	440b      	add	r3, r1
 800150e:	3339      	adds	r3, #57	@ 0x39
 8001510:	78fa      	ldrb	r2, [r7, #3]
 8001512:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001514:	78fa      	ldrb	r2, [r7, #3]
 8001516:	6879      	ldr	r1, [r7, #4]
 8001518:	4613      	mov	r3, r2
 800151a:	005b      	lsls	r3, r3, #1
 800151c:	4413      	add	r3, r2
 800151e:	011b      	lsls	r3, r3, #4
 8001520:	440b      	add	r3, r1
 8001522:	3340      	adds	r3, #64	@ 0x40
 8001524:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8001528:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800152a:	78fa      	ldrb	r2, [r7, #3]
 800152c:	78bb      	ldrb	r3, [r7, #2]
 800152e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001532:	b2d8      	uxtb	r0, r3
 8001534:	6879      	ldr	r1, [r7, #4]
 8001536:	4613      	mov	r3, r2
 8001538:	005b      	lsls	r3, r3, #1
 800153a:	4413      	add	r3, r2
 800153c:	011b      	lsls	r3, r3, #4
 800153e:	440b      	add	r3, r1
 8001540:	333a      	adds	r3, #58	@ 0x3a
 8001542:	4602      	mov	r2, r0
 8001544:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 8001546:	78fb      	ldrb	r3, [r7, #3]
 8001548:	4619      	mov	r1, r3
 800154a:	6878      	ldr	r0, [r7, #4]
 800154c:	f000 fb81 	bl	8001c52 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8001550:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001554:	2b00      	cmp	r3, #0
 8001556:	da0a      	bge.n	800156e <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001558:	78fa      	ldrb	r2, [r7, #3]
 800155a:	6879      	ldr	r1, [r7, #4]
 800155c:	4613      	mov	r3, r2
 800155e:	005b      	lsls	r3, r3, #1
 8001560:	4413      	add	r3, r2
 8001562:	011b      	lsls	r3, r3, #4
 8001564:	440b      	add	r3, r1
 8001566:	333b      	adds	r3, #59	@ 0x3b
 8001568:	2201      	movs	r2, #1
 800156a:	701a      	strb	r2, [r3, #0]
 800156c:	e009      	b.n	8001582 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800156e:	78fa      	ldrb	r2, [r7, #3]
 8001570:	6879      	ldr	r1, [r7, #4]
 8001572:	4613      	mov	r3, r2
 8001574:	005b      	lsls	r3, r3, #1
 8001576:	4413      	add	r3, r2
 8001578:	011b      	lsls	r3, r3, #4
 800157a:	440b      	add	r3, r1
 800157c:	333b      	adds	r3, #59	@ 0x3b
 800157e:	2200      	movs	r2, #0
 8001580:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001582:	78fa      	ldrb	r2, [r7, #3]
 8001584:	6879      	ldr	r1, [r7, #4]
 8001586:	4613      	mov	r3, r2
 8001588:	005b      	lsls	r3, r3, #1
 800158a:	4413      	add	r3, r2
 800158c:	011b      	lsls	r3, r3, #4
 800158e:	440b      	add	r3, r1
 8001590:	333c      	adds	r3, #60	@ 0x3c
 8001592:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001596:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8001598:	78fa      	ldrb	r2, [r7, #3]
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	b298      	uxth	r0, r3
 800159e:	6879      	ldr	r1, [r7, #4]
 80015a0:	4613      	mov	r3, r2
 80015a2:	005b      	lsls	r3, r3, #1
 80015a4:	4413      	add	r3, r2
 80015a6:	011b      	lsls	r3, r3, #4
 80015a8:	440b      	add	r3, r1
 80015aa:	3342      	adds	r3, #66	@ 0x42
 80015ac:	4602      	mov	r2, r0
 80015ae:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6818      	ldr	r0, [r3, #0]
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	b29b      	uxth	r3, r3
 80015b8:	787c      	ldrb	r4, [r7, #1]
 80015ba:	78ba      	ldrb	r2, [r7, #2]
 80015bc:	78f9      	ldrb	r1, [r7, #3]
 80015be:	9302      	str	r3, [sp, #8]
 80015c0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80015c4:	9301      	str	r3, [sp, #4]
 80015c6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80015ca:	9300      	str	r3, [sp, #0]
 80015cc:	4623      	mov	r3, r4
 80015ce:	f004 f867 	bl	80056a0 <USB_HC_Init>
 80015d2:	4603      	mov	r3, r0
 80015d4:	72fb      	strb	r3, [r7, #11]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	2200      	movs	r2, #0
 80015da:	f883 2338 	strb.w	r2, [r3, #824]	@ 0x338

  return status;
 80015de:	7afb      	ldrb	r3, [r7, #11]
}
 80015e0:	4618      	mov	r0, r3
 80015e2:	3714      	adds	r7, #20
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd90      	pop	{r4, r7, pc}

080015e8 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b084      	sub	sp, #16
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
 80015f0:	460b      	mov	r3, r1
 80015f2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80015f4:	2300      	movs	r3, #0
 80015f6:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	f893 3338 	ldrb.w	r3, [r3, #824]	@ 0x338
 80015fe:	2b01      	cmp	r3, #1
 8001600:	d101      	bne.n	8001606 <HAL_HCD_HC_Halt+0x1e>
 8001602:	2302      	movs	r3, #2
 8001604:	e00f      	b.n	8001626 <HAL_HCD_HC_Halt+0x3e>
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2201      	movs	r2, #1
 800160a:	f883 2338 	strb.w	r2, [r3, #824]	@ 0x338
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	78fa      	ldrb	r2, [r7, #3]
 8001614:	4611      	mov	r1, r2
 8001616:	4618      	mov	r0, r3
 8001618:	f004 fa57 	bl	8005aca <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2200      	movs	r2, #0
 8001620:	f883 2338 	strb.w	r2, [r3, #824]	@ 0x338

  return status;
 8001624:	7bfb      	ldrb	r3, [r7, #15]
}
 8001626:	4618      	mov	r0, r3
 8001628:	3710      	adds	r7, #16
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
	...

08001630 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b082      	sub	sp, #8
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
 8001638:	4608      	mov	r0, r1
 800163a:	4611      	mov	r1, r2
 800163c:	461a      	mov	r2, r3
 800163e:	4603      	mov	r3, r0
 8001640:	70fb      	strb	r3, [r7, #3]
 8001642:	460b      	mov	r3, r1
 8001644:	70bb      	strb	r3, [r7, #2]
 8001646:	4613      	mov	r3, r2
 8001648:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800164a:	78fa      	ldrb	r2, [r7, #3]
 800164c:	6879      	ldr	r1, [r7, #4]
 800164e:	4613      	mov	r3, r2
 8001650:	005b      	lsls	r3, r3, #1
 8001652:	4413      	add	r3, r2
 8001654:	011b      	lsls	r3, r3, #4
 8001656:	440b      	add	r3, r1
 8001658:	333b      	adds	r3, #59	@ 0x3b
 800165a:	78ba      	ldrb	r2, [r7, #2]
 800165c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800165e:	78fa      	ldrb	r2, [r7, #3]
 8001660:	6879      	ldr	r1, [r7, #4]
 8001662:	4613      	mov	r3, r2
 8001664:	005b      	lsls	r3, r3, #1
 8001666:	4413      	add	r3, r2
 8001668:	011b      	lsls	r3, r3, #4
 800166a:	440b      	add	r3, r1
 800166c:	3340      	adds	r3, #64	@ 0x40
 800166e:	787a      	ldrb	r2, [r7, #1]
 8001670:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001672:	7c3b      	ldrb	r3, [r7, #16]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d114      	bne.n	80016a2 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001678:	78fa      	ldrb	r2, [r7, #3]
 800167a:	6879      	ldr	r1, [r7, #4]
 800167c:	4613      	mov	r3, r2
 800167e:	005b      	lsls	r3, r3, #1
 8001680:	4413      	add	r3, r2
 8001682:	011b      	lsls	r3, r3, #4
 8001684:	440b      	add	r3, r1
 8001686:	3344      	adds	r3, #68	@ 0x44
 8001688:	2203      	movs	r2, #3
 800168a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800168c:	78fa      	ldrb	r2, [r7, #3]
 800168e:	6879      	ldr	r1, [r7, #4]
 8001690:	4613      	mov	r3, r2
 8001692:	005b      	lsls	r3, r3, #1
 8001694:	4413      	add	r3, r2
 8001696:	011b      	lsls	r3, r3, #4
 8001698:	440b      	add	r3, r1
 800169a:	333d      	adds	r3, #61	@ 0x3d
 800169c:	7f3a      	ldrb	r2, [r7, #28]
 800169e:	701a      	strb	r2, [r3, #0]
 80016a0:	e009      	b.n	80016b6 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80016a2:	78fa      	ldrb	r2, [r7, #3]
 80016a4:	6879      	ldr	r1, [r7, #4]
 80016a6:	4613      	mov	r3, r2
 80016a8:	005b      	lsls	r3, r3, #1
 80016aa:	4413      	add	r3, r2
 80016ac:	011b      	lsls	r3, r3, #4
 80016ae:	440b      	add	r3, r1
 80016b0:	3344      	adds	r3, #68	@ 0x44
 80016b2:	2202      	movs	r2, #2
 80016b4:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80016b6:	787b      	ldrb	r3, [r7, #1]
 80016b8:	2b03      	cmp	r3, #3
 80016ba:	f200 80d6 	bhi.w	800186a <HAL_HCD_HC_SubmitRequest+0x23a>
 80016be:	a201      	add	r2, pc, #4	@ (adr r2, 80016c4 <HAL_HCD_HC_SubmitRequest+0x94>)
 80016c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016c4:	080016d5 	.word	0x080016d5
 80016c8:	08001855 	.word	0x08001855
 80016cc:	08001741 	.word	0x08001741
 80016d0:	080017cb 	.word	0x080017cb
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 80016d4:	7c3b      	ldrb	r3, [r7, #16]
 80016d6:	2b01      	cmp	r3, #1
 80016d8:	f040 80c9 	bne.w	800186e <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (direction == 0U)
 80016dc:	78bb      	ldrb	r3, [r7, #2]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	f040 80c5 	bne.w	800186e <HAL_HCD_HC_SubmitRequest+0x23e>
        {
          if (length == 0U)
 80016e4:	8b3b      	ldrh	r3, [r7, #24]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d109      	bne.n	80016fe <HAL_HCD_HC_SubmitRequest+0xce>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 80016ea:	78fa      	ldrb	r2, [r7, #3]
 80016ec:	6879      	ldr	r1, [r7, #4]
 80016ee:	4613      	mov	r3, r2
 80016f0:	005b      	lsls	r3, r3, #1
 80016f2:	4413      	add	r3, r2
 80016f4:	011b      	lsls	r3, r3, #4
 80016f6:	440b      	add	r3, r1
 80016f8:	3359      	adds	r3, #89	@ 0x59
 80016fa:	2201      	movs	r2, #1
 80016fc:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 80016fe:	78fa      	ldrb	r2, [r7, #3]
 8001700:	6879      	ldr	r1, [r7, #4]
 8001702:	4613      	mov	r3, r2
 8001704:	005b      	lsls	r3, r3, #1
 8001706:	4413      	add	r3, r2
 8001708:	011b      	lsls	r3, r3, #4
 800170a:	440b      	add	r3, r1
 800170c:	3359      	adds	r3, #89	@ 0x59
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d10a      	bne.n	800172a <HAL_HCD_HC_SubmitRequest+0xfa>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001714:	78fa      	ldrb	r2, [r7, #3]
 8001716:	6879      	ldr	r1, [r7, #4]
 8001718:	4613      	mov	r3, r2
 800171a:	005b      	lsls	r3, r3, #1
 800171c:	4413      	add	r3, r2
 800171e:	011b      	lsls	r3, r3, #4
 8001720:	440b      	add	r3, r1
 8001722:	3344      	adds	r3, #68	@ 0x44
 8001724:	2200      	movs	r2, #0
 8001726:	701a      	strb	r2, [r3, #0]
            /* Put the PID 1 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
          }
        }
      }
      break;
 8001728:	e0a1      	b.n	800186e <HAL_HCD_HC_SubmitRequest+0x23e>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800172a:	78fa      	ldrb	r2, [r7, #3]
 800172c:	6879      	ldr	r1, [r7, #4]
 800172e:	4613      	mov	r3, r2
 8001730:	005b      	lsls	r3, r3, #1
 8001732:	4413      	add	r3, r2
 8001734:	011b      	lsls	r3, r3, #4
 8001736:	440b      	add	r3, r1
 8001738:	3344      	adds	r3, #68	@ 0x44
 800173a:	2202      	movs	r2, #2
 800173c:	701a      	strb	r2, [r3, #0]
      break;
 800173e:	e096      	b.n	800186e <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001740:	78bb      	ldrb	r3, [r7, #2]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d120      	bne.n	8001788 <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001746:	78fa      	ldrb	r2, [r7, #3]
 8001748:	6879      	ldr	r1, [r7, #4]
 800174a:	4613      	mov	r3, r2
 800174c:	005b      	lsls	r3, r3, #1
 800174e:	4413      	add	r3, r2
 8001750:	011b      	lsls	r3, r3, #4
 8001752:	440b      	add	r3, r1
 8001754:	3359      	adds	r3, #89	@ 0x59
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d10a      	bne.n	8001772 <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800175c:	78fa      	ldrb	r2, [r7, #3]
 800175e:	6879      	ldr	r1, [r7, #4]
 8001760:	4613      	mov	r3, r2
 8001762:	005b      	lsls	r3, r3, #1
 8001764:	4413      	add	r3, r2
 8001766:	011b      	lsls	r3, r3, #4
 8001768:	440b      	add	r3, r1
 800176a:	3344      	adds	r3, #68	@ 0x44
 800176c:	2200      	movs	r2, #0
 800176e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001770:	e07e      	b.n	8001870 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001772:	78fa      	ldrb	r2, [r7, #3]
 8001774:	6879      	ldr	r1, [r7, #4]
 8001776:	4613      	mov	r3, r2
 8001778:	005b      	lsls	r3, r3, #1
 800177a:	4413      	add	r3, r2
 800177c:	011b      	lsls	r3, r3, #4
 800177e:	440b      	add	r3, r1
 8001780:	3344      	adds	r3, #68	@ 0x44
 8001782:	2202      	movs	r2, #2
 8001784:	701a      	strb	r2, [r3, #0]
      break;
 8001786:	e073      	b.n	8001870 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001788:	78fa      	ldrb	r2, [r7, #3]
 800178a:	6879      	ldr	r1, [r7, #4]
 800178c:	4613      	mov	r3, r2
 800178e:	005b      	lsls	r3, r3, #1
 8001790:	4413      	add	r3, r2
 8001792:	011b      	lsls	r3, r3, #4
 8001794:	440b      	add	r3, r1
 8001796:	3358      	adds	r3, #88	@ 0x58
 8001798:	781b      	ldrb	r3, [r3, #0]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d10a      	bne.n	80017b4 <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800179e:	78fa      	ldrb	r2, [r7, #3]
 80017a0:	6879      	ldr	r1, [r7, #4]
 80017a2:	4613      	mov	r3, r2
 80017a4:	005b      	lsls	r3, r3, #1
 80017a6:	4413      	add	r3, r2
 80017a8:	011b      	lsls	r3, r3, #4
 80017aa:	440b      	add	r3, r1
 80017ac:	3344      	adds	r3, #68	@ 0x44
 80017ae:	2200      	movs	r2, #0
 80017b0:	701a      	strb	r2, [r3, #0]
      break;
 80017b2:	e05d      	b.n	8001870 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80017b4:	78fa      	ldrb	r2, [r7, #3]
 80017b6:	6879      	ldr	r1, [r7, #4]
 80017b8:	4613      	mov	r3, r2
 80017ba:	005b      	lsls	r3, r3, #1
 80017bc:	4413      	add	r3, r2
 80017be:	011b      	lsls	r3, r3, #4
 80017c0:	440b      	add	r3, r1
 80017c2:	3344      	adds	r3, #68	@ 0x44
 80017c4:	2202      	movs	r2, #2
 80017c6:	701a      	strb	r2, [r3, #0]
      break;
 80017c8:	e052      	b.n	8001870 <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80017ca:	78bb      	ldrb	r3, [r7, #2]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d120      	bne.n	8001812 <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80017d0:	78fa      	ldrb	r2, [r7, #3]
 80017d2:	6879      	ldr	r1, [r7, #4]
 80017d4:	4613      	mov	r3, r2
 80017d6:	005b      	lsls	r3, r3, #1
 80017d8:	4413      	add	r3, r2
 80017da:	011b      	lsls	r3, r3, #4
 80017dc:	440b      	add	r3, r1
 80017de:	3359      	adds	r3, #89	@ 0x59
 80017e0:	781b      	ldrb	r3, [r3, #0]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d10a      	bne.n	80017fc <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80017e6:	78fa      	ldrb	r2, [r7, #3]
 80017e8:	6879      	ldr	r1, [r7, #4]
 80017ea:	4613      	mov	r3, r2
 80017ec:	005b      	lsls	r3, r3, #1
 80017ee:	4413      	add	r3, r2
 80017f0:	011b      	lsls	r3, r3, #4
 80017f2:	440b      	add	r3, r1
 80017f4:	3344      	adds	r3, #68	@ 0x44
 80017f6:	2200      	movs	r2, #0
 80017f8:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80017fa:	e039      	b.n	8001870 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80017fc:	78fa      	ldrb	r2, [r7, #3]
 80017fe:	6879      	ldr	r1, [r7, #4]
 8001800:	4613      	mov	r3, r2
 8001802:	005b      	lsls	r3, r3, #1
 8001804:	4413      	add	r3, r2
 8001806:	011b      	lsls	r3, r3, #4
 8001808:	440b      	add	r3, r1
 800180a:	3344      	adds	r3, #68	@ 0x44
 800180c:	2202      	movs	r2, #2
 800180e:	701a      	strb	r2, [r3, #0]
      break;
 8001810:	e02e      	b.n	8001870 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001812:	78fa      	ldrb	r2, [r7, #3]
 8001814:	6879      	ldr	r1, [r7, #4]
 8001816:	4613      	mov	r3, r2
 8001818:	005b      	lsls	r3, r3, #1
 800181a:	4413      	add	r3, r2
 800181c:	011b      	lsls	r3, r3, #4
 800181e:	440b      	add	r3, r1
 8001820:	3358      	adds	r3, #88	@ 0x58
 8001822:	781b      	ldrb	r3, [r3, #0]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d10a      	bne.n	800183e <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001828:	78fa      	ldrb	r2, [r7, #3]
 800182a:	6879      	ldr	r1, [r7, #4]
 800182c:	4613      	mov	r3, r2
 800182e:	005b      	lsls	r3, r3, #1
 8001830:	4413      	add	r3, r2
 8001832:	011b      	lsls	r3, r3, #4
 8001834:	440b      	add	r3, r1
 8001836:	3344      	adds	r3, #68	@ 0x44
 8001838:	2200      	movs	r2, #0
 800183a:	701a      	strb	r2, [r3, #0]
      break;
 800183c:	e018      	b.n	8001870 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800183e:	78fa      	ldrb	r2, [r7, #3]
 8001840:	6879      	ldr	r1, [r7, #4]
 8001842:	4613      	mov	r3, r2
 8001844:	005b      	lsls	r3, r3, #1
 8001846:	4413      	add	r3, r2
 8001848:	011b      	lsls	r3, r3, #4
 800184a:	440b      	add	r3, r1
 800184c:	3344      	adds	r3, #68	@ 0x44
 800184e:	2202      	movs	r2, #2
 8001850:	701a      	strb	r2, [r3, #0]
      break;
 8001852:	e00d      	b.n	8001870 <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001854:	78fa      	ldrb	r2, [r7, #3]
 8001856:	6879      	ldr	r1, [r7, #4]
 8001858:	4613      	mov	r3, r2
 800185a:	005b      	lsls	r3, r3, #1
 800185c:	4413      	add	r3, r2
 800185e:	011b      	lsls	r3, r3, #4
 8001860:	440b      	add	r3, r1
 8001862:	3344      	adds	r3, #68	@ 0x44
 8001864:	2200      	movs	r2, #0
 8001866:	701a      	strb	r2, [r3, #0]
      break;
 8001868:	e002      	b.n	8001870 <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 800186a:	bf00      	nop
 800186c:	e000      	b.n	8001870 <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 800186e:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001870:	78fa      	ldrb	r2, [r7, #3]
 8001872:	6879      	ldr	r1, [r7, #4]
 8001874:	4613      	mov	r3, r2
 8001876:	005b      	lsls	r3, r3, #1
 8001878:	4413      	add	r3, r2
 800187a:	011b      	lsls	r3, r3, #4
 800187c:	440b      	add	r3, r1
 800187e:	3348      	adds	r3, #72	@ 0x48
 8001880:	697a      	ldr	r2, [r7, #20]
 8001882:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001884:	78fa      	ldrb	r2, [r7, #3]
 8001886:	8b39      	ldrh	r1, [r7, #24]
 8001888:	6878      	ldr	r0, [r7, #4]
 800188a:	4613      	mov	r3, r2
 800188c:	005b      	lsls	r3, r3, #1
 800188e:	4413      	add	r3, r2
 8001890:	011b      	lsls	r3, r3, #4
 8001892:	4403      	add	r3, r0
 8001894:	3350      	adds	r3, #80	@ 0x50
 8001896:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001898:	78fa      	ldrb	r2, [r7, #3]
 800189a:	6879      	ldr	r1, [r7, #4]
 800189c:	4613      	mov	r3, r2
 800189e:	005b      	lsls	r3, r3, #1
 80018a0:	4413      	add	r3, r2
 80018a2:	011b      	lsls	r3, r3, #4
 80018a4:	440b      	add	r3, r1
 80018a6:	3364      	adds	r3, #100	@ 0x64
 80018a8:	2200      	movs	r2, #0
 80018aa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80018ac:	78fa      	ldrb	r2, [r7, #3]
 80018ae:	6879      	ldr	r1, [r7, #4]
 80018b0:	4613      	mov	r3, r2
 80018b2:	005b      	lsls	r3, r3, #1
 80018b4:	4413      	add	r3, r2
 80018b6:	011b      	lsls	r3, r3, #4
 80018b8:	440b      	add	r3, r1
 80018ba:	3354      	adds	r3, #84	@ 0x54
 80018bc:	2200      	movs	r2, #0
 80018be:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80018c0:	78fa      	ldrb	r2, [r7, #3]
 80018c2:	6879      	ldr	r1, [r7, #4]
 80018c4:	4613      	mov	r3, r2
 80018c6:	005b      	lsls	r3, r3, #1
 80018c8:	4413      	add	r3, r2
 80018ca:	011b      	lsls	r3, r3, #4
 80018cc:	440b      	add	r3, r1
 80018ce:	3339      	adds	r3, #57	@ 0x39
 80018d0:	78fa      	ldrb	r2, [r7, #3]
 80018d2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80018d4:	78fa      	ldrb	r2, [r7, #3]
 80018d6:	6879      	ldr	r1, [r7, #4]
 80018d8:	4613      	mov	r3, r2
 80018da:	005b      	lsls	r3, r3, #1
 80018dc:	4413      	add	r3, r2
 80018de:	011b      	lsls	r3, r3, #4
 80018e0:	440b      	add	r3, r1
 80018e2:	3365      	adds	r3, #101	@ 0x65
 80018e4:	2200      	movs	r2, #0
 80018e6:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num]);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6818      	ldr	r0, [r3, #0]
 80018ec:	78fa      	ldrb	r2, [r7, #3]
 80018ee:	4613      	mov	r3, r2
 80018f0:	005b      	lsls	r3, r3, #1
 80018f2:	4413      	add	r3, r2
 80018f4:	011b      	lsls	r3, r3, #4
 80018f6:	3338      	adds	r3, #56	@ 0x38
 80018f8:	687a      	ldr	r2, [r7, #4]
 80018fa:	4413      	add	r3, r2
 80018fc:	4619      	mov	r1, r3
 80018fe:	f003 ffdb 	bl	80058b8 <USB_HC_StartXfer>
 8001902:	4603      	mov	r3, r0
}
 8001904:	4618      	mov	r0, r3
 8001906:	3708      	adds	r7, #8
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}

0800190c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b086      	sub	sp, #24
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800191a:	693b      	ldr	r3, [r7, #16]
 800191c:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4618      	mov	r0, r3
 8001924:	f003 fd30 	bl	8005388 <USB_GetMode>
 8001928:	4603      	mov	r3, r0
 800192a:	2b01      	cmp	r3, #1
 800192c:	f040 80fa 	bne.w	8001b24 <HAL_HCD_IRQHandler+0x218>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4618      	mov	r0, r3
 8001936:	f003 fcf3 	bl	8005320 <USB_ReadInterrupts>
 800193a:	4603      	mov	r3, r0
 800193c:	2b00      	cmp	r3, #0
 800193e:	f000 80f0 	beq.w	8001b22 <HAL_HCD_IRQHandler+0x216>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4618      	mov	r0, r3
 8001948:	f003 fcea 	bl	8005320 <USB_ReadInterrupts>
 800194c:	4603      	mov	r3, r0
 800194e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001952:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001956:	d104      	bne.n	8001962 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8001960:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4618      	mov	r0, r3
 8001968:	f003 fcda 	bl	8005320 <USB_ReadInterrupts>
 800196c:	4603      	mov	r3, r0
 800196e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001972:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001976:	d104      	bne.n	8001982 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001980:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4618      	mov	r0, r3
 8001988:	f003 fcca 	bl	8005320 <USB_ReadInterrupts>
 800198c:	4603      	mov	r3, r0
 800198e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001992:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8001996:	d104      	bne.n	80019a2 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80019a0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4618      	mov	r0, r3
 80019a8:	f003 fcba 	bl	8005320 <USB_ReadInterrupts>
 80019ac:	4603      	mov	r3, r0
 80019ae:	f003 0302 	and.w	r3, r3, #2
 80019b2:	2b02      	cmp	r3, #2
 80019b4:	d103      	bne.n	80019be <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	2202      	movs	r2, #2
 80019bc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4618      	mov	r0, r3
 80019c4:	f003 fcac 	bl	8005320 <USB_ReadInterrupts>
 80019c8:	4603      	mov	r3, r0
 80019ca:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80019ce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80019d2:	d120      	bne.n	8001a16 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80019dc:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f003 0301 	and.w	r3, r3, #1
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d113      	bne.n	8001a16 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80019ee:	2110      	movs	r1, #16
 80019f0:	6938      	ldr	r0, [r7, #16]
 80019f2:	f003 fb9f 	bl	8005134 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80019f6:	6938      	ldr	r0, [r7, #16]
 80019f8:	f003 fbd0 	bl	800519c <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	699b      	ldr	r3, [r3, #24]
 8001a00:	2b02      	cmp	r3, #2
 8001a02:	d105      	bne.n	8001a10 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	2101      	movs	r1, #1
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f003 fd80 	bl	8005510 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001a10:	6878      	ldr	r0, [r7, #4]
 8001a12:	f007 ffed 	bl	80099f0 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f003 fc80 	bl	8005320 <USB_ReadInterrupts>
 8001a20:	4603      	mov	r3, r0
 8001a22:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001a26:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001a2a:	d102      	bne.n	8001a32 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8001a2c:	6878      	ldr	r0, [r7, #4]
 8001a2e:	f001 f921 	bl	8002c74 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4618      	mov	r0, r3
 8001a38:	f003 fc72 	bl	8005320 <USB_ReadInterrupts>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	f003 0308 	and.w	r3, r3, #8
 8001a42:	2b08      	cmp	r3, #8
 8001a44:	d106      	bne.n	8001a54 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001a46:	6878      	ldr	r0, [r7, #4]
 8001a48:	f007 ffb6 	bl	80099b8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	2208      	movs	r2, #8
 8001a52:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f003 fc61 	bl	8005320 <USB_ReadInterrupts>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a64:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001a68:	d138      	bne.n	8001adc <HAL_HCD_IRQHandler+0x1d0>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f004 f81a 	bl	8005aa8 <USB_HC_ReadInterrupt>
 8001a74:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001a76:	2300      	movs	r3, #0
 8001a78:	617b      	str	r3, [r7, #20]
 8001a7a:	e025      	b.n	8001ac8 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	f003 030f 	and.w	r3, r3, #15
 8001a82:	68ba      	ldr	r2, [r7, #8]
 8001a84:	fa22 f303 	lsr.w	r3, r2, r3
 8001a88:	f003 0301 	and.w	r3, r3, #1
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d018      	beq.n	8001ac2 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	015a      	lsls	r2, r3, #5
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	4413      	add	r3, r2
 8001a98:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001aa2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001aa6:	d106      	bne.n	8001ab6 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	b2db      	uxtb	r3, r3
 8001aac:	4619      	mov	r1, r3
 8001aae:	6878      	ldr	r0, [r7, #4]
 8001ab0:	f000 f8f0 	bl	8001c94 <HCD_HC_IN_IRQHandler>
 8001ab4:	e005      	b.n	8001ac2 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	b2db      	uxtb	r3, r3
 8001aba:	4619      	mov	r1, r3
 8001abc:	6878      	ldr	r0, [r7, #4]
 8001abe:	f000 fd24 	bl	800250a <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	3301      	adds	r3, #1
 8001ac6:	617b      	str	r3, [r7, #20]
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	689b      	ldr	r3, [r3, #8]
 8001acc:	697a      	ldr	r2, [r7, #20]
 8001ace:	429a      	cmp	r2, r3
 8001ad0:	d3d4      	bcc.n	8001a7c <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001ada:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f003 fc1d 	bl	8005320 <USB_ReadInterrupts>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	f003 0310 	and.w	r3, r3, #16
 8001aec:	2b10      	cmp	r3, #16
 8001aee:	d101      	bne.n	8001af4 <HAL_HCD_IRQHandler+0x1e8>
 8001af0:	2301      	movs	r3, #1
 8001af2:	e000      	b.n	8001af6 <HAL_HCD_IRQHandler+0x1ea>
 8001af4:	2300      	movs	r3, #0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d014      	beq.n	8001b24 <HAL_HCD_IRQHandler+0x218>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	699a      	ldr	r2, [r3, #24]
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f022 0210 	bic.w	r2, r2, #16
 8001b08:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001b0a:	6878      	ldr	r0, [r7, #4]
 8001b0c:	f000 ffd3 	bl	8002ab6 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	699a      	ldr	r2, [r3, #24]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f042 0210 	orr.w	r2, r2, #16
 8001b1e:	619a      	str	r2, [r3, #24]
 8001b20:	e000      	b.n	8001b24 <HAL_HCD_IRQHandler+0x218>
      return;
 8001b22:	bf00      	nop
    }
  }
}
 8001b24:	3718      	adds	r7, #24
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}

08001b2a <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001b2a:	b580      	push	{r7, lr}
 8001b2c:	b082      	sub	sp, #8
 8001b2e:	af00      	add	r7, sp, #0
 8001b30:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	f893 3338 	ldrb.w	r3, [r3, #824]	@ 0x338
 8001b38:	2b01      	cmp	r3, #1
 8001b3a:	d101      	bne.n	8001b40 <HAL_HCD_Start+0x16>
 8001b3c:	2302      	movs	r3, #2
 8001b3e:	e013      	b.n	8001b68 <HAL_HCD_Start+0x3e>
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2201      	movs	r2, #1
 8001b44:	f883 2338 	strb.w	r2, [r3, #824]	@ 0x338
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	2101      	movs	r1, #1
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f003 fd45 	bl	80055de <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f003 fa7c 	bl	8005056 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2200      	movs	r2, #0
 8001b62:	f883 2338 	strb.w	r2, [r3, #824]	@ 0x338

  return HAL_OK;
 8001b66:	2300      	movs	r3, #0
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	3708      	adds	r7, #8
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}

08001b70 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b082      	sub	sp, #8
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	f893 3338 	ldrb.w	r3, [r3, #824]	@ 0x338
 8001b7e:	2b01      	cmp	r3, #1
 8001b80:	d101      	bne.n	8001b86 <HAL_HCD_Stop+0x16>
 8001b82:	2302      	movs	r3, #2
 8001b84:	e00d      	b.n	8001ba2 <HAL_HCD_Stop+0x32>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2201      	movs	r2, #1
 8001b8a:	f883 2338 	strb.w	r2, [r3, #824]	@ 0x338
  (void)USB_StopHost(hhcd->Instance);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4618      	mov	r0, r3
 8001b94:	f004 f8b9 	bl	8005d0a <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	f883 2338 	strb.w	r2, [r3, #824]	@ 0x338

  return HAL_OK;
 8001ba0:	2300      	movs	r3, #0
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	3708      	adds	r7, #8
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}

08001baa <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001baa:	b580      	push	{r7, lr}
 8001bac:	b082      	sub	sp, #8
 8001bae:	af00      	add	r7, sp, #0
 8001bb0:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f003 fce7 	bl	800558a <USB_ResetPort>
 8001bbc:	4603      	mov	r3, r0
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	3708      	adds	r7, #8
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}

08001bc6 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8001bc6:	b480      	push	{r7}
 8001bc8:	b083      	sub	sp, #12
 8001bca:	af00      	add	r7, sp, #0
 8001bcc:	6078      	str	r0, [r7, #4]
 8001bce:	460b      	mov	r3, r1
 8001bd0:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001bd2:	78fa      	ldrb	r2, [r7, #3]
 8001bd4:	6879      	ldr	r1, [r7, #4]
 8001bd6:	4613      	mov	r3, r2
 8001bd8:	005b      	lsls	r3, r3, #1
 8001bda:	4413      	add	r3, r2
 8001bdc:	011b      	lsls	r3, r3, #4
 8001bde:	440b      	add	r3, r1
 8001be0:	3364      	adds	r3, #100	@ 0x64
 8001be2:	781b      	ldrb	r3, [r3, #0]
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	370c      	adds	r7, #12
 8001be8:	46bd      	mov	sp, r7
 8001bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bee:	4770      	bx	lr

08001bf0 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b083      	sub	sp, #12
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
 8001bf8:	460b      	mov	r3, r1
 8001bfa:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001bfc:	78fa      	ldrb	r2, [r7, #3]
 8001bfe:	6879      	ldr	r1, [r7, #4]
 8001c00:	4613      	mov	r3, r2
 8001c02:	005b      	lsls	r3, r3, #1
 8001c04:	4413      	add	r3, r2
 8001c06:	011b      	lsls	r3, r3, #4
 8001c08:	440b      	add	r3, r1
 8001c0a:	3354      	adds	r3, #84	@ 0x54
 8001c0c:	681b      	ldr	r3, [r3, #0]
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	370c      	adds	r7, #12
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr

08001c1a <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001c1a:	b580      	push	{r7, lr}
 8001c1c:	b082      	sub	sp, #8
 8001c1e:	af00      	add	r7, sp, #0
 8001c20:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4618      	mov	r0, r3
 8001c28:	f003 fd29 	bl	800567e <USB_GetCurrentFrame>
 8001c2c:	4603      	mov	r3, r0
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	3708      	adds	r7, #8
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}

08001c36 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001c36:	b580      	push	{r7, lr}
 8001c38:	b082      	sub	sp, #8
 8001c3a:	af00      	add	r7, sp, #0
 8001c3c:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4618      	mov	r0, r3
 8001c44:	f003 fd04 	bl	8005650 <USB_GetHostSpeed>
 8001c48:	4603      	mov	r3, r0
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3708      	adds	r7, #8
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}

08001c52 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001c52:	b480      	push	{r7}
 8001c54:	b083      	sub	sp, #12
 8001c56:	af00      	add	r7, sp, #0
 8001c58:	6078      	str	r0, [r7, #4]
 8001c5a:	460b      	mov	r3, r1
 8001c5c:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].hub_addr = 0U;
 8001c5e:	78fa      	ldrb	r2, [r7, #3]
 8001c60:	6879      	ldr	r1, [r7, #4]
 8001c62:	4613      	mov	r3, r2
 8001c64:	005b      	lsls	r3, r3, #1
 8001c66:	4413      	add	r3, r2
 8001c68:	011b      	lsls	r3, r3, #4
 8001c6a:	440b      	add	r3, r1
 8001c6c:	333f      	adds	r3, #63	@ 0x3f
 8001c6e:	2200      	movs	r2, #0
 8001c70:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8001c72:	78fa      	ldrb	r2, [r7, #3]
 8001c74:	6879      	ldr	r1, [r7, #4]
 8001c76:	4613      	mov	r3, r2
 8001c78:	005b      	lsls	r3, r3, #1
 8001c7a:	4413      	add	r3, r2
 8001c7c:	011b      	lsls	r3, r3, #4
 8001c7e:	440b      	add	r3, r1
 8001c80:	333e      	adds	r3, #62	@ 0x3e
 8001c82:	2200      	movs	r2, #0
 8001c84:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8001c86:	2300      	movs	r3, #0
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	370c      	adds	r7, #12
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c92:	4770      	bx	lr

08001c94 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b086      	sub	sp, #24
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
 8001c9c:	460b      	mov	r3, r1
 8001c9e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	78fa      	ldrb	r2, [r7, #3]
 8001cb0:	4611      	mov	r1, r2
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f003 fb47 	bl	8005346 <USB_ReadChInterrupts>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	f003 0304 	and.w	r3, r3, #4
 8001cbe:	2b04      	cmp	r3, #4
 8001cc0:	d11a      	bne.n	8001cf8 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8001cc2:	78fb      	ldrb	r3, [r7, #3]
 8001cc4:	015a      	lsls	r2, r3, #5
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	4413      	add	r3, r2
 8001cca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001cce:	461a      	mov	r2, r3
 8001cd0:	2304      	movs	r3, #4
 8001cd2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8001cd4:	78fa      	ldrb	r2, [r7, #3]
 8001cd6:	6879      	ldr	r1, [r7, #4]
 8001cd8:	4613      	mov	r3, r2
 8001cda:	005b      	lsls	r3, r3, #1
 8001cdc:	4413      	add	r3, r2
 8001cde:	011b      	lsls	r3, r3, #4
 8001ce0:	440b      	add	r3, r1
 8001ce2:	3365      	adds	r3, #101	@ 0x65
 8001ce4:	2207      	movs	r2, #7
 8001ce6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	78fa      	ldrb	r2, [r7, #3]
 8001cee:	4611      	mov	r1, r2
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f003 feea 	bl	8005aca <USB_HC_Halt>
 8001cf6:	e09e      	b.n	8001e36 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	78fa      	ldrb	r2, [r7, #3]
 8001cfe:	4611      	mov	r1, r2
 8001d00:	4618      	mov	r0, r3
 8001d02:	f003 fb20 	bl	8005346 <USB_ReadChInterrupts>
 8001d06:	4603      	mov	r3, r0
 8001d08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d0c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001d10:	d11b      	bne.n	8001d4a <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8001d12:	78fb      	ldrb	r3, [r7, #3]
 8001d14:	015a      	lsls	r2, r3, #5
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	4413      	add	r3, r2
 8001d1a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001d1e:	461a      	mov	r2, r3
 8001d20:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001d24:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8001d26:	78fa      	ldrb	r2, [r7, #3]
 8001d28:	6879      	ldr	r1, [r7, #4]
 8001d2a:	4613      	mov	r3, r2
 8001d2c:	005b      	lsls	r3, r3, #1
 8001d2e:	4413      	add	r3, r2
 8001d30:	011b      	lsls	r3, r3, #4
 8001d32:	440b      	add	r3, r1
 8001d34:	3365      	adds	r3, #101	@ 0x65
 8001d36:	2208      	movs	r2, #8
 8001d38:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	78fa      	ldrb	r2, [r7, #3]
 8001d40:	4611      	mov	r1, r2
 8001d42:	4618      	mov	r0, r3
 8001d44:	f003 fec1 	bl	8005aca <USB_HC_Halt>
 8001d48:	e075      	b.n	8001e36 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	78fa      	ldrb	r2, [r7, #3]
 8001d50:	4611      	mov	r1, r2
 8001d52:	4618      	mov	r0, r3
 8001d54:	f003 faf7 	bl	8005346 <USB_ReadChInterrupts>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	f003 0308 	and.w	r3, r3, #8
 8001d5e:	2b08      	cmp	r3, #8
 8001d60:	d11a      	bne.n	8001d98 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8001d62:	78fb      	ldrb	r3, [r7, #3]
 8001d64:	015a      	lsls	r2, r3, #5
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	4413      	add	r3, r2
 8001d6a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001d6e:	461a      	mov	r2, r3
 8001d70:	2308      	movs	r3, #8
 8001d72:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8001d74:	78fa      	ldrb	r2, [r7, #3]
 8001d76:	6879      	ldr	r1, [r7, #4]
 8001d78:	4613      	mov	r3, r2
 8001d7a:	005b      	lsls	r3, r3, #1
 8001d7c:	4413      	add	r3, r2
 8001d7e:	011b      	lsls	r3, r3, #4
 8001d80:	440b      	add	r3, r1
 8001d82:	3365      	adds	r3, #101	@ 0x65
 8001d84:	2206      	movs	r2, #6
 8001d86:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	78fa      	ldrb	r2, [r7, #3]
 8001d8e:	4611      	mov	r1, r2
 8001d90:	4618      	mov	r0, r3
 8001d92:	f003 fe9a 	bl	8005aca <USB_HC_Halt>
 8001d96:	e04e      	b.n	8001e36 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	78fa      	ldrb	r2, [r7, #3]
 8001d9e:	4611      	mov	r1, r2
 8001da0:	4618      	mov	r0, r3
 8001da2:	f003 fad0 	bl	8005346 <USB_ReadChInterrupts>
 8001da6:	4603      	mov	r3, r0
 8001da8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001dac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001db0:	d11b      	bne.n	8001dea <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8001db2:	78fb      	ldrb	r3, [r7, #3]
 8001db4:	015a      	lsls	r2, r3, #5
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	4413      	add	r3, r2
 8001dba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001dbe:	461a      	mov	r2, r3
 8001dc0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001dc4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8001dc6:	78fa      	ldrb	r2, [r7, #3]
 8001dc8:	6879      	ldr	r1, [r7, #4]
 8001dca:	4613      	mov	r3, r2
 8001dcc:	005b      	lsls	r3, r3, #1
 8001dce:	4413      	add	r3, r2
 8001dd0:	011b      	lsls	r3, r3, #4
 8001dd2:	440b      	add	r3, r1
 8001dd4:	3365      	adds	r3, #101	@ 0x65
 8001dd6:	2209      	movs	r2, #9
 8001dd8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	78fa      	ldrb	r2, [r7, #3]
 8001de0:	4611      	mov	r1, r2
 8001de2:	4618      	mov	r0, r3
 8001de4:	f003 fe71 	bl	8005aca <USB_HC_Halt>
 8001de8:	e025      	b.n	8001e36 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	78fa      	ldrb	r2, [r7, #3]
 8001df0:	4611      	mov	r1, r2
 8001df2:	4618      	mov	r0, r3
 8001df4:	f003 faa7 	bl	8005346 <USB_ReadChInterrupts>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001dfe:	2b80      	cmp	r3, #128	@ 0x80
 8001e00:	d119      	bne.n	8001e36 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8001e02:	78fb      	ldrb	r3, [r7, #3]
 8001e04:	015a      	lsls	r2, r3, #5
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	4413      	add	r3, r2
 8001e0a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001e0e:	461a      	mov	r2, r3
 8001e10:	2380      	movs	r3, #128	@ 0x80
 8001e12:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8001e14:	78fa      	ldrb	r2, [r7, #3]
 8001e16:	6879      	ldr	r1, [r7, #4]
 8001e18:	4613      	mov	r3, r2
 8001e1a:	005b      	lsls	r3, r3, #1
 8001e1c:	4413      	add	r3, r2
 8001e1e:	011b      	lsls	r3, r3, #4
 8001e20:	440b      	add	r3, r1
 8001e22:	3365      	adds	r3, #101	@ 0x65
 8001e24:	2207      	movs	r2, #7
 8001e26:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	78fa      	ldrb	r2, [r7, #3]
 8001e2e:	4611      	mov	r1, r2
 8001e30:	4618      	mov	r0, r3
 8001e32:	f003 fe4a 	bl	8005aca <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	78fa      	ldrb	r2, [r7, #3]
 8001e3c:	4611      	mov	r1, r2
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f003 fa81 	bl	8005346 <USB_ReadChInterrupts>
 8001e44:	4603      	mov	r3, r0
 8001e46:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001e4a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001e4e:	d111      	bne.n	8001e74 <HCD_HC_IN_IRQHandler+0x1e0>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	78fa      	ldrb	r2, [r7, #3]
 8001e56:	4611      	mov	r1, r2
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f003 fe36 	bl	8005aca <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8001e5e:	78fb      	ldrb	r3, [r7, #3]
 8001e60:	015a      	lsls	r2, r3, #5
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	4413      	add	r3, r2
 8001e66:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001e6a:	461a      	mov	r2, r3
 8001e6c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001e70:	6093      	str	r3, [r2, #8]
 8001e72:	e347      	b.n	8002504 <HCD_HC_IN_IRQHandler+0x870>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	78fa      	ldrb	r2, [r7, #3]
 8001e7a:	4611      	mov	r1, r2
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f003 fa62 	bl	8005346 <USB_ReadChInterrupts>
 8001e82:	4603      	mov	r3, r0
 8001e84:	f003 0301 	and.w	r3, r3, #1
 8001e88:	2b01      	cmp	r3, #1
 8001e8a:	f040 80d8 	bne.w	800203e <HCD_HC_IN_IRQHandler+0x3aa>
  {
    hhcd->hc[chnum].state = HC_XFRC;
 8001e8e:	78fa      	ldrb	r2, [r7, #3]
 8001e90:	6879      	ldr	r1, [r7, #4]
 8001e92:	4613      	mov	r3, r2
 8001e94:	005b      	lsls	r3, r3, #1
 8001e96:	4413      	add	r3, r2
 8001e98:	011b      	lsls	r3, r3, #4
 8001e9a:	440b      	add	r3, r1
 8001e9c:	3365      	adds	r3, #101	@ 0x65
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8001ea2:	78fa      	ldrb	r2, [r7, #3]
 8001ea4:	6879      	ldr	r1, [r7, #4]
 8001ea6:	4613      	mov	r3, r2
 8001ea8:	005b      	lsls	r3, r3, #1
 8001eaa:	4413      	add	r3, r2
 8001eac:	011b      	lsls	r3, r3, #4
 8001eae:	440b      	add	r3, r1
 8001eb0:	3360      	adds	r3, #96	@ 0x60
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8001eb6:	78fb      	ldrb	r3, [r7, #3]
 8001eb8:	015a      	lsls	r2, r3, #5
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	4413      	add	r3, r2
 8001ebe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001ec2:	461a      	mov	r2, r3
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001ec8:	78fa      	ldrb	r2, [r7, #3]
 8001eca:	6879      	ldr	r1, [r7, #4]
 8001ecc:	4613      	mov	r3, r2
 8001ece:	005b      	lsls	r3, r3, #1
 8001ed0:	4413      	add	r3, r2
 8001ed2:	011b      	lsls	r3, r3, #4
 8001ed4:	440b      	add	r3, r1
 8001ed6:	3340      	adds	r3, #64	@ 0x40
 8001ed8:	781b      	ldrb	r3, [r3, #0]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d00a      	beq.n	8001ef4 <HCD_HC_IN_IRQHandler+0x260>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8001ede:	78fa      	ldrb	r2, [r7, #3]
 8001ee0:	6879      	ldr	r1, [r7, #4]
 8001ee2:	4613      	mov	r3, r2
 8001ee4:	005b      	lsls	r3, r3, #1
 8001ee6:	4413      	add	r3, r2
 8001ee8:	011b      	lsls	r3, r3, #4
 8001eea:	440b      	add	r3, r1
 8001eec:	3340      	adds	r3, #64	@ 0x40
 8001eee:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001ef0:	2b02      	cmp	r3, #2
 8001ef2:	d110      	bne.n	8001f16 <HCD_HC_IN_IRQHandler+0x282>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	78fa      	ldrb	r2, [r7, #3]
 8001efa:	4611      	mov	r1, r2
 8001efc:	4618      	mov	r0, r3
 8001efe:	f003 fde4 	bl	8005aca <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8001f02:	78fb      	ldrb	r3, [r7, #3]
 8001f04:	015a      	lsls	r2, r3, #5
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	4413      	add	r3, r2
 8001f0a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001f0e:	461a      	mov	r2, r3
 8001f10:	2310      	movs	r3, #16
 8001f12:	6093      	str	r3, [r2, #8]
 8001f14:	e03d      	b.n	8001f92 <HCD_HC_IN_IRQHandler+0x2fe>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8001f16:	78fa      	ldrb	r2, [r7, #3]
 8001f18:	6879      	ldr	r1, [r7, #4]
 8001f1a:	4613      	mov	r3, r2
 8001f1c:	005b      	lsls	r3, r3, #1
 8001f1e:	4413      	add	r3, r2
 8001f20:	011b      	lsls	r3, r3, #4
 8001f22:	440b      	add	r3, r1
 8001f24:	3340      	adds	r3, #64	@ 0x40
 8001f26:	781b      	ldrb	r3, [r3, #0]
 8001f28:	2b03      	cmp	r3, #3
 8001f2a:	d00a      	beq.n	8001f42 <HCD_HC_IN_IRQHandler+0x2ae>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8001f2c:	78fa      	ldrb	r2, [r7, #3]
 8001f2e:	6879      	ldr	r1, [r7, #4]
 8001f30:	4613      	mov	r3, r2
 8001f32:	005b      	lsls	r3, r3, #1
 8001f34:	4413      	add	r3, r2
 8001f36:	011b      	lsls	r3, r3, #4
 8001f38:	440b      	add	r3, r1
 8001f3a:	3340      	adds	r3, #64	@ 0x40
 8001f3c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8001f3e:	2b01      	cmp	r3, #1
 8001f40:	d127      	bne.n	8001f92 <HCD_HC_IN_IRQHandler+0x2fe>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8001f42:	78fb      	ldrb	r3, [r7, #3]
 8001f44:	015a      	lsls	r2, r3, #5
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	4413      	add	r3, r2
 8001f4a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	78fa      	ldrb	r2, [r7, #3]
 8001f52:	0151      	lsls	r1, r2, #5
 8001f54:	693a      	ldr	r2, [r7, #16]
 8001f56:	440a      	add	r2, r1
 8001f58:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8001f5c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001f60:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8001f62:	78fa      	ldrb	r2, [r7, #3]
 8001f64:	6879      	ldr	r1, [r7, #4]
 8001f66:	4613      	mov	r3, r2
 8001f68:	005b      	lsls	r3, r3, #1
 8001f6a:	4413      	add	r3, r2
 8001f6c:	011b      	lsls	r3, r3, #4
 8001f6e:	440b      	add	r3, r1
 8001f70:	3364      	adds	r3, #100	@ 0x64
 8001f72:	2201      	movs	r2, #1
 8001f74:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8001f76:	78fa      	ldrb	r2, [r7, #3]
 8001f78:	6879      	ldr	r1, [r7, #4]
 8001f7a:	4613      	mov	r3, r2
 8001f7c:	005b      	lsls	r3, r3, #1
 8001f7e:	4413      	add	r3, r2
 8001f80:	011b      	lsls	r3, r3, #4
 8001f82:	440b      	add	r3, r1
 8001f84:	3364      	adds	r3, #100	@ 0x64
 8001f86:	781a      	ldrb	r2, [r3, #0]
 8001f88:	78fb      	ldrb	r3, [r7, #3]
 8001f8a:	4619      	mov	r1, r3
 8001f8c:	6878      	ldr	r0, [r7, #4]
 8001f8e:	f007 fd3d 	bl	8009a0c <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	68db      	ldr	r3, [r3, #12]
 8001f96:	2b01      	cmp	r3, #1
 8001f98:	d13a      	bne.n	8002010 <HCD_HC_IN_IRQHandler+0x37c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8001f9a:	78fa      	ldrb	r2, [r7, #3]
 8001f9c:	6879      	ldr	r1, [r7, #4]
 8001f9e:	4613      	mov	r3, r2
 8001fa0:	005b      	lsls	r3, r3, #1
 8001fa2:	4413      	add	r3, r2
 8001fa4:	011b      	lsls	r3, r3, #4
 8001fa6:	440b      	add	r3, r1
 8001fa8:	3354      	adds	r3, #84	@ 0x54
 8001faa:	6819      	ldr	r1, [r3, #0]
 8001fac:	78fa      	ldrb	r2, [r7, #3]
 8001fae:	6878      	ldr	r0, [r7, #4]
 8001fb0:	4613      	mov	r3, r2
 8001fb2:	005b      	lsls	r3, r3, #1
 8001fb4:	4413      	add	r3, r2
 8001fb6:	011b      	lsls	r3, r3, #4
 8001fb8:	4403      	add	r3, r0
 8001fba:	3342      	adds	r3, #66	@ 0x42
 8001fbc:	881b      	ldrh	r3, [r3, #0]
 8001fbe:	440b      	add	r3, r1
 8001fc0:	1e59      	subs	r1, r3, #1
 8001fc2:	78fa      	ldrb	r2, [r7, #3]
 8001fc4:	6878      	ldr	r0, [r7, #4]
 8001fc6:	4613      	mov	r3, r2
 8001fc8:	005b      	lsls	r3, r3, #1
 8001fca:	4413      	add	r3, r2
 8001fcc:	011b      	lsls	r3, r3, #4
 8001fce:	4403      	add	r3, r0
 8001fd0:	3342      	adds	r3, #66	@ 0x42
 8001fd2:	881b      	ldrh	r3, [r3, #0]
 8001fd4:	fbb1 f3f3 	udiv	r3, r1, r3
 8001fd8:	f003 0301 	and.w	r3, r3, #1
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	f000 8291 	beq.w	8002504 <HCD_HC_IN_IRQHandler+0x870>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8001fe2:	78fa      	ldrb	r2, [r7, #3]
 8001fe4:	6879      	ldr	r1, [r7, #4]
 8001fe6:	4613      	mov	r3, r2
 8001fe8:	005b      	lsls	r3, r3, #1
 8001fea:	4413      	add	r3, r2
 8001fec:	011b      	lsls	r3, r3, #4
 8001fee:	440b      	add	r3, r1
 8001ff0:	3358      	adds	r3, #88	@ 0x58
 8001ff2:	781b      	ldrb	r3, [r3, #0]
 8001ff4:	78fa      	ldrb	r2, [r7, #3]
 8001ff6:	f083 0301 	eor.w	r3, r3, #1
 8001ffa:	b2d8      	uxtb	r0, r3
 8001ffc:	6879      	ldr	r1, [r7, #4]
 8001ffe:	4613      	mov	r3, r2
 8002000:	005b      	lsls	r3, r3, #1
 8002002:	4413      	add	r3, r2
 8002004:	011b      	lsls	r3, r3, #4
 8002006:	440b      	add	r3, r1
 8002008:	3358      	adds	r3, #88	@ 0x58
 800200a:	4602      	mov	r2, r0
 800200c:	701a      	strb	r2, [r3, #0]
 800200e:	e279      	b.n	8002504 <HCD_HC_IN_IRQHandler+0x870>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8002010:	78fa      	ldrb	r2, [r7, #3]
 8002012:	6879      	ldr	r1, [r7, #4]
 8002014:	4613      	mov	r3, r2
 8002016:	005b      	lsls	r3, r3, #1
 8002018:	4413      	add	r3, r2
 800201a:	011b      	lsls	r3, r3, #4
 800201c:	440b      	add	r3, r1
 800201e:	3358      	adds	r3, #88	@ 0x58
 8002020:	781b      	ldrb	r3, [r3, #0]
 8002022:	78fa      	ldrb	r2, [r7, #3]
 8002024:	f083 0301 	eor.w	r3, r3, #1
 8002028:	b2d8      	uxtb	r0, r3
 800202a:	6879      	ldr	r1, [r7, #4]
 800202c:	4613      	mov	r3, r2
 800202e:	005b      	lsls	r3, r3, #1
 8002030:	4413      	add	r3, r2
 8002032:	011b      	lsls	r3, r3, #4
 8002034:	440b      	add	r3, r1
 8002036:	3358      	adds	r3, #88	@ 0x58
 8002038:	4602      	mov	r2, r0
 800203a:	701a      	strb	r2, [r3, #0]
 800203c:	e262      	b.n	8002504 <HCD_HC_IN_IRQHandler+0x870>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	78fa      	ldrb	r2, [r7, #3]
 8002044:	4611      	mov	r1, r2
 8002046:	4618      	mov	r0, r3
 8002048:	f003 f97d 	bl	8005346 <USB_ReadChInterrupts>
 800204c:	4603      	mov	r3, r0
 800204e:	f003 0320 	and.w	r3, r3, #32
 8002052:	2b20      	cmp	r3, #32
 8002054:	d109      	bne.n	800206a <HCD_HC_IN_IRQHandler+0x3d6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002056:	78fb      	ldrb	r3, [r7, #3]
 8002058:	015a      	lsls	r2, r3, #5
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	4413      	add	r3, r2
 800205e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002062:	461a      	mov	r2, r3
 8002064:	2320      	movs	r3, #32
 8002066:	6093      	str	r3, [r2, #8]
 8002068:	e24c      	b.n	8002504 <HCD_HC_IN_IRQHandler+0x870>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	78fa      	ldrb	r2, [r7, #3]
 8002070:	4611      	mov	r1, r2
 8002072:	4618      	mov	r0, r3
 8002074:	f003 f967 	bl	8005346 <USB_ReadChInterrupts>
 8002078:	4603      	mov	r3, r0
 800207a:	f003 0302 	and.w	r3, r3, #2
 800207e:	2b02      	cmp	r3, #2
 8002080:	f040 81a0 	bne.w	80023c4 <HCD_HC_IN_IRQHandler+0x730>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8002084:	78fb      	ldrb	r3, [r7, #3]
 8002086:	015a      	lsls	r2, r3, #5
 8002088:	693b      	ldr	r3, [r7, #16]
 800208a:	4413      	add	r3, r2
 800208c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002090:	461a      	mov	r2, r3
 8002092:	2302      	movs	r3, #2
 8002094:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8002096:	78fa      	ldrb	r2, [r7, #3]
 8002098:	6879      	ldr	r1, [r7, #4]
 800209a:	4613      	mov	r3, r2
 800209c:	005b      	lsls	r3, r3, #1
 800209e:	4413      	add	r3, r2
 80020a0:	011b      	lsls	r3, r3, #4
 80020a2:	440b      	add	r3, r1
 80020a4:	3365      	adds	r3, #101	@ 0x65
 80020a6:	781b      	ldrb	r3, [r3, #0]
 80020a8:	2b01      	cmp	r3, #1
 80020aa:	d114      	bne.n	80020d6 <HCD_HC_IN_IRQHandler+0x442>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80020ac:	78fa      	ldrb	r2, [r7, #3]
 80020ae:	6879      	ldr	r1, [r7, #4]
 80020b0:	4613      	mov	r3, r2
 80020b2:	005b      	lsls	r3, r3, #1
 80020b4:	4413      	add	r3, r2
 80020b6:	011b      	lsls	r3, r3, #4
 80020b8:	440b      	add	r3, r1
 80020ba:	3365      	adds	r3, #101	@ 0x65
 80020bc:	2202      	movs	r2, #2
 80020be:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80020c0:	78fa      	ldrb	r2, [r7, #3]
 80020c2:	6879      	ldr	r1, [r7, #4]
 80020c4:	4613      	mov	r3, r2
 80020c6:	005b      	lsls	r3, r3, #1
 80020c8:	4413      	add	r3, r2
 80020ca:	011b      	lsls	r3, r3, #4
 80020cc:	440b      	add	r3, r1
 80020ce:	3364      	adds	r3, #100	@ 0x64
 80020d0:	2201      	movs	r2, #1
 80020d2:	701a      	strb	r2, [r3, #0]
 80020d4:	e167      	b.n	80023a6 <HCD_HC_IN_IRQHandler+0x712>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80020d6:	78fa      	ldrb	r2, [r7, #3]
 80020d8:	6879      	ldr	r1, [r7, #4]
 80020da:	4613      	mov	r3, r2
 80020dc:	005b      	lsls	r3, r3, #1
 80020de:	4413      	add	r3, r2
 80020e0:	011b      	lsls	r3, r3, #4
 80020e2:	440b      	add	r3, r1
 80020e4:	3365      	adds	r3, #101	@ 0x65
 80020e6:	781b      	ldrb	r3, [r3, #0]
 80020e8:	2b06      	cmp	r3, #6
 80020ea:	d114      	bne.n	8002116 <HCD_HC_IN_IRQHandler+0x482>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80020ec:	78fa      	ldrb	r2, [r7, #3]
 80020ee:	6879      	ldr	r1, [r7, #4]
 80020f0:	4613      	mov	r3, r2
 80020f2:	005b      	lsls	r3, r3, #1
 80020f4:	4413      	add	r3, r2
 80020f6:	011b      	lsls	r3, r3, #4
 80020f8:	440b      	add	r3, r1
 80020fa:	3365      	adds	r3, #101	@ 0x65
 80020fc:	2202      	movs	r2, #2
 80020fe:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8002100:	78fa      	ldrb	r2, [r7, #3]
 8002102:	6879      	ldr	r1, [r7, #4]
 8002104:	4613      	mov	r3, r2
 8002106:	005b      	lsls	r3, r3, #1
 8002108:	4413      	add	r3, r2
 800210a:	011b      	lsls	r3, r3, #4
 800210c:	440b      	add	r3, r1
 800210e:	3364      	adds	r3, #100	@ 0x64
 8002110:	2205      	movs	r2, #5
 8002112:	701a      	strb	r2, [r3, #0]
 8002114:	e147      	b.n	80023a6 <HCD_HC_IN_IRQHandler+0x712>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002116:	78fa      	ldrb	r2, [r7, #3]
 8002118:	6879      	ldr	r1, [r7, #4]
 800211a:	4613      	mov	r3, r2
 800211c:	005b      	lsls	r3, r3, #1
 800211e:	4413      	add	r3, r2
 8002120:	011b      	lsls	r3, r3, #4
 8002122:	440b      	add	r3, r1
 8002124:	3365      	adds	r3, #101	@ 0x65
 8002126:	781b      	ldrb	r3, [r3, #0]
 8002128:	2b07      	cmp	r3, #7
 800212a:	d00a      	beq.n	8002142 <HCD_HC_IN_IRQHandler+0x4ae>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 800212c:	78fa      	ldrb	r2, [r7, #3]
 800212e:	6879      	ldr	r1, [r7, #4]
 8002130:	4613      	mov	r3, r2
 8002132:	005b      	lsls	r3, r3, #1
 8002134:	4413      	add	r3, r2
 8002136:	011b      	lsls	r3, r3, #4
 8002138:	440b      	add	r3, r1
 800213a:	3365      	adds	r3, #101	@ 0x65
 800213c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800213e:	2b09      	cmp	r3, #9
 8002140:	d176      	bne.n	8002230 <HCD_HC_IN_IRQHandler+0x59c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002142:	78fa      	ldrb	r2, [r7, #3]
 8002144:	6879      	ldr	r1, [r7, #4]
 8002146:	4613      	mov	r3, r2
 8002148:	005b      	lsls	r3, r3, #1
 800214a:	4413      	add	r3, r2
 800214c:	011b      	lsls	r3, r3, #4
 800214e:	440b      	add	r3, r1
 8002150:	3365      	adds	r3, #101	@ 0x65
 8002152:	2202      	movs	r2, #2
 8002154:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002156:	78fa      	ldrb	r2, [r7, #3]
 8002158:	6879      	ldr	r1, [r7, #4]
 800215a:	4613      	mov	r3, r2
 800215c:	005b      	lsls	r3, r3, #1
 800215e:	4413      	add	r3, r2
 8002160:	011b      	lsls	r3, r3, #4
 8002162:	440b      	add	r3, r1
 8002164:	3360      	adds	r3, #96	@ 0x60
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	1c59      	adds	r1, r3, #1
 800216a:	6878      	ldr	r0, [r7, #4]
 800216c:	4613      	mov	r3, r2
 800216e:	005b      	lsls	r3, r3, #1
 8002170:	4413      	add	r3, r2
 8002172:	011b      	lsls	r3, r3, #4
 8002174:	4403      	add	r3, r0
 8002176:	3360      	adds	r3, #96	@ 0x60
 8002178:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800217a:	78fa      	ldrb	r2, [r7, #3]
 800217c:	6879      	ldr	r1, [r7, #4]
 800217e:	4613      	mov	r3, r2
 8002180:	005b      	lsls	r3, r3, #1
 8002182:	4413      	add	r3, r2
 8002184:	011b      	lsls	r3, r3, #4
 8002186:	440b      	add	r3, r1
 8002188:	3360      	adds	r3, #96	@ 0x60
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	2b02      	cmp	r3, #2
 800218e:	d914      	bls.n	80021ba <HCD_HC_IN_IRQHandler+0x526>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8002190:	78fa      	ldrb	r2, [r7, #3]
 8002192:	6879      	ldr	r1, [r7, #4]
 8002194:	4613      	mov	r3, r2
 8002196:	005b      	lsls	r3, r3, #1
 8002198:	4413      	add	r3, r2
 800219a:	011b      	lsls	r3, r3, #4
 800219c:	440b      	add	r3, r1
 800219e:	3360      	adds	r3, #96	@ 0x60
 80021a0:	2200      	movs	r2, #0
 80021a2:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80021a4:	78fa      	ldrb	r2, [r7, #3]
 80021a6:	6879      	ldr	r1, [r7, #4]
 80021a8:	4613      	mov	r3, r2
 80021aa:	005b      	lsls	r3, r3, #1
 80021ac:	4413      	add	r3, r2
 80021ae:	011b      	lsls	r3, r3, #4
 80021b0:	440b      	add	r3, r1
 80021b2:	3364      	adds	r3, #100	@ 0x64
 80021b4:	2204      	movs	r2, #4
 80021b6:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80021b8:	e0f4      	b.n	80023a4 <HCD_HC_IN_IRQHandler+0x710>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80021ba:	78fa      	ldrb	r2, [r7, #3]
 80021bc:	6879      	ldr	r1, [r7, #4]
 80021be:	4613      	mov	r3, r2
 80021c0:	005b      	lsls	r3, r3, #1
 80021c2:	4413      	add	r3, r2
 80021c4:	011b      	lsls	r3, r3, #4
 80021c6:	440b      	add	r3, r1
 80021c8:	3364      	adds	r3, #100	@ 0x64
 80021ca:	2202      	movs	r2, #2
 80021cc:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80021ce:	78fa      	ldrb	r2, [r7, #3]
 80021d0:	6879      	ldr	r1, [r7, #4]
 80021d2:	4613      	mov	r3, r2
 80021d4:	005b      	lsls	r3, r3, #1
 80021d6:	4413      	add	r3, r2
 80021d8:	011b      	lsls	r3, r3, #4
 80021da:	440b      	add	r3, r1
 80021dc:	3340      	adds	r3, #64	@ 0x40
 80021de:	781b      	ldrb	r3, [r3, #0]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d00b      	beq.n	80021fc <HCD_HC_IN_IRQHandler+0x568>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80021e4:	78fa      	ldrb	r2, [r7, #3]
 80021e6:	6879      	ldr	r1, [r7, #4]
 80021e8:	4613      	mov	r3, r2
 80021ea:	005b      	lsls	r3, r3, #1
 80021ec:	4413      	add	r3, r2
 80021ee:	011b      	lsls	r3, r3, #4
 80021f0:	440b      	add	r3, r1
 80021f2:	3340      	adds	r3, #64	@ 0x40
 80021f4:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80021f6:	2b02      	cmp	r3, #2
 80021f8:	f040 80d4 	bne.w	80023a4 <HCD_HC_IN_IRQHandler+0x710>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80021fc:	78fb      	ldrb	r3, [r7, #3]
 80021fe:	015a      	lsls	r2, r3, #5
 8002200:	693b      	ldr	r3, [r7, #16]
 8002202:	4413      	add	r3, r2
 8002204:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002212:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800221a:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800221c:	78fb      	ldrb	r3, [r7, #3]
 800221e:	015a      	lsls	r2, r3, #5
 8002220:	693b      	ldr	r3, [r7, #16]
 8002222:	4413      	add	r3, r2
 8002224:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002228:	461a      	mov	r2, r3
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800222e:	e0b9      	b.n	80023a4 <HCD_HC_IN_IRQHandler+0x710>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8002230:	78fa      	ldrb	r2, [r7, #3]
 8002232:	6879      	ldr	r1, [r7, #4]
 8002234:	4613      	mov	r3, r2
 8002236:	005b      	lsls	r3, r3, #1
 8002238:	4413      	add	r3, r2
 800223a:	011b      	lsls	r3, r3, #4
 800223c:	440b      	add	r3, r1
 800223e:	3365      	adds	r3, #101	@ 0x65
 8002240:	781b      	ldrb	r3, [r3, #0]
 8002242:	2b05      	cmp	r3, #5
 8002244:	d10a      	bne.n	800225c <HCD_HC_IN_IRQHandler+0x5c8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002246:	78fa      	ldrb	r2, [r7, #3]
 8002248:	6879      	ldr	r1, [r7, #4]
 800224a:	4613      	mov	r3, r2
 800224c:	005b      	lsls	r3, r3, #1
 800224e:	4413      	add	r3, r2
 8002250:	011b      	lsls	r3, r3, #4
 8002252:	440b      	add	r3, r1
 8002254:	3365      	adds	r3, #101	@ 0x65
 8002256:	2202      	movs	r2, #2
 8002258:	701a      	strb	r2, [r3, #0]
 800225a:	e0a4      	b.n	80023a6 <HCD_HC_IN_IRQHandler+0x712>
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 800225c:	78fa      	ldrb	r2, [r7, #3]
 800225e:	6879      	ldr	r1, [r7, #4]
 8002260:	4613      	mov	r3, r2
 8002262:	005b      	lsls	r3, r3, #1
 8002264:	4413      	add	r3, r2
 8002266:	011b      	lsls	r3, r3, #4
 8002268:	440b      	add	r3, r1
 800226a:	3365      	adds	r3, #101	@ 0x65
 800226c:	781b      	ldrb	r3, [r3, #0]
 800226e:	2b03      	cmp	r3, #3
 8002270:	d10a      	bne.n	8002288 <HCD_HC_IN_IRQHandler+0x5f4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002272:	78fa      	ldrb	r2, [r7, #3]
 8002274:	6879      	ldr	r1, [r7, #4]
 8002276:	4613      	mov	r3, r2
 8002278:	005b      	lsls	r3, r3, #1
 800227a:	4413      	add	r3, r2
 800227c:	011b      	lsls	r3, r3, #4
 800227e:	440b      	add	r3, r1
 8002280:	3365      	adds	r3, #101	@ 0x65
 8002282:	2202      	movs	r2, #2
 8002284:	701a      	strb	r2, [r3, #0]
 8002286:	e08e      	b.n	80023a6 <HCD_HC_IN_IRQHandler+0x712>
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8002288:	78fa      	ldrb	r2, [r7, #3]
 800228a:	6879      	ldr	r1, [r7, #4]
 800228c:	4613      	mov	r3, r2
 800228e:	005b      	lsls	r3, r3, #1
 8002290:	4413      	add	r3, r2
 8002292:	011b      	lsls	r3, r3, #4
 8002294:	440b      	add	r3, r1
 8002296:	3365      	adds	r3, #101	@ 0x65
 8002298:	781b      	ldrb	r3, [r3, #0]
 800229a:	2b04      	cmp	r3, #4
 800229c:	d143      	bne.n	8002326 <HCD_HC_IN_IRQHandler+0x692>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800229e:	78fa      	ldrb	r2, [r7, #3]
 80022a0:	6879      	ldr	r1, [r7, #4]
 80022a2:	4613      	mov	r3, r2
 80022a4:	005b      	lsls	r3, r3, #1
 80022a6:	4413      	add	r3, r2
 80022a8:	011b      	lsls	r3, r3, #4
 80022aa:	440b      	add	r3, r1
 80022ac:	3365      	adds	r3, #101	@ 0x65
 80022ae:	2202      	movs	r2, #2
 80022b0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80022b2:	78fa      	ldrb	r2, [r7, #3]
 80022b4:	6879      	ldr	r1, [r7, #4]
 80022b6:	4613      	mov	r3, r2
 80022b8:	005b      	lsls	r3, r3, #1
 80022ba:	4413      	add	r3, r2
 80022bc:	011b      	lsls	r3, r3, #4
 80022be:	440b      	add	r3, r1
 80022c0:	3364      	adds	r3, #100	@ 0x64
 80022c2:	2202      	movs	r2, #2
 80022c4:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80022c6:	78fa      	ldrb	r2, [r7, #3]
 80022c8:	6879      	ldr	r1, [r7, #4]
 80022ca:	4613      	mov	r3, r2
 80022cc:	005b      	lsls	r3, r3, #1
 80022ce:	4413      	add	r3, r2
 80022d0:	011b      	lsls	r3, r3, #4
 80022d2:	440b      	add	r3, r1
 80022d4:	3340      	adds	r3, #64	@ 0x40
 80022d6:	781b      	ldrb	r3, [r3, #0]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d00a      	beq.n	80022f2 <HCD_HC_IN_IRQHandler+0x65e>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80022dc:	78fa      	ldrb	r2, [r7, #3]
 80022de:	6879      	ldr	r1, [r7, #4]
 80022e0:	4613      	mov	r3, r2
 80022e2:	005b      	lsls	r3, r3, #1
 80022e4:	4413      	add	r3, r2
 80022e6:	011b      	lsls	r3, r3, #4
 80022e8:	440b      	add	r3, r1
 80022ea:	3340      	adds	r3, #64	@ 0x40
 80022ec:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80022ee:	2b02      	cmp	r3, #2
 80022f0:	d159      	bne.n	80023a6 <HCD_HC_IN_IRQHandler+0x712>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80022f2:	78fb      	ldrb	r3, [r7, #3]
 80022f4:	015a      	lsls	r2, r3, #5
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	4413      	add	r3, r2
 80022fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002308:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002310:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8002312:	78fb      	ldrb	r3, [r7, #3]
 8002314:	015a      	lsls	r2, r3, #5
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	4413      	add	r3, r2
 800231a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800231e:	461a      	mov	r2, r3
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	6013      	str	r3, [r2, #0]
 8002324:	e03f      	b.n	80023a6 <HCD_HC_IN_IRQHandler+0x712>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8002326:	78fa      	ldrb	r2, [r7, #3]
 8002328:	6879      	ldr	r1, [r7, #4]
 800232a:	4613      	mov	r3, r2
 800232c:	005b      	lsls	r3, r3, #1
 800232e:	4413      	add	r3, r2
 8002330:	011b      	lsls	r3, r3, #4
 8002332:	440b      	add	r3, r1
 8002334:	3365      	adds	r3, #101	@ 0x65
 8002336:	781b      	ldrb	r3, [r3, #0]
 8002338:	2b08      	cmp	r3, #8
 800233a:	d126      	bne.n	800238a <HCD_HC_IN_IRQHandler+0x6f6>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800233c:	78fa      	ldrb	r2, [r7, #3]
 800233e:	6879      	ldr	r1, [r7, #4]
 8002340:	4613      	mov	r3, r2
 8002342:	005b      	lsls	r3, r3, #1
 8002344:	4413      	add	r3, r2
 8002346:	011b      	lsls	r3, r3, #4
 8002348:	440b      	add	r3, r1
 800234a:	3365      	adds	r3, #101	@ 0x65
 800234c:	2202      	movs	r2, #2
 800234e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002350:	78fa      	ldrb	r2, [r7, #3]
 8002352:	6879      	ldr	r1, [r7, #4]
 8002354:	4613      	mov	r3, r2
 8002356:	005b      	lsls	r3, r3, #1
 8002358:	4413      	add	r3, r2
 800235a:	011b      	lsls	r3, r3, #4
 800235c:	440b      	add	r3, r1
 800235e:	3360      	adds	r3, #96	@ 0x60
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	1c59      	adds	r1, r3, #1
 8002364:	6878      	ldr	r0, [r7, #4]
 8002366:	4613      	mov	r3, r2
 8002368:	005b      	lsls	r3, r3, #1
 800236a:	4413      	add	r3, r2
 800236c:	011b      	lsls	r3, r3, #4
 800236e:	4403      	add	r3, r0
 8002370:	3360      	adds	r3, #96	@ 0x60
 8002372:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8002374:	78fa      	ldrb	r2, [r7, #3]
 8002376:	6879      	ldr	r1, [r7, #4]
 8002378:	4613      	mov	r3, r2
 800237a:	005b      	lsls	r3, r3, #1
 800237c:	4413      	add	r3, r2
 800237e:	011b      	lsls	r3, r3, #4
 8002380:	440b      	add	r3, r1
 8002382:	3364      	adds	r3, #100	@ 0x64
 8002384:	2204      	movs	r2, #4
 8002386:	701a      	strb	r2, [r3, #0]
 8002388:	e00d      	b.n	80023a6 <HCD_HC_IN_IRQHandler+0x712>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 800238a:	78fa      	ldrb	r2, [r7, #3]
 800238c:	6879      	ldr	r1, [r7, #4]
 800238e:	4613      	mov	r3, r2
 8002390:	005b      	lsls	r3, r3, #1
 8002392:	4413      	add	r3, r2
 8002394:	011b      	lsls	r3, r3, #4
 8002396:	440b      	add	r3, r1
 8002398:	3365      	adds	r3, #101	@ 0x65
 800239a:	781b      	ldrb	r3, [r3, #0]
 800239c:	2b02      	cmp	r3, #2
 800239e:	f000 80b0 	beq.w	8002502 <HCD_HC_IN_IRQHandler+0x86e>
 80023a2:	e000      	b.n	80023a6 <HCD_HC_IN_IRQHandler+0x712>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80023a4:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80023a6:	78fa      	ldrb	r2, [r7, #3]
 80023a8:	6879      	ldr	r1, [r7, #4]
 80023aa:	4613      	mov	r3, r2
 80023ac:	005b      	lsls	r3, r3, #1
 80023ae:	4413      	add	r3, r2
 80023b0:	011b      	lsls	r3, r3, #4
 80023b2:	440b      	add	r3, r1
 80023b4:	3364      	adds	r3, #100	@ 0x64
 80023b6:	781a      	ldrb	r2, [r3, #0]
 80023b8:	78fb      	ldrb	r3, [r7, #3]
 80023ba:	4619      	mov	r1, r3
 80023bc:	6878      	ldr	r0, [r7, #4]
 80023be:	f007 fb25 	bl	8009a0c <HAL_HCD_HC_NotifyURBChange_Callback>
 80023c2:	e09f      	b.n	8002504 <HCD_HC_IN_IRQHandler+0x870>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	78fa      	ldrb	r2, [r7, #3]
 80023ca:	4611      	mov	r1, r2
 80023cc:	4618      	mov	r0, r3
 80023ce:	f002 ffba 	bl	8005346 <USB_ReadChInterrupts>
 80023d2:	4603      	mov	r3, r0
 80023d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023d8:	2b40      	cmp	r3, #64	@ 0x40
 80023da:	d124      	bne.n	8002426 <HCD_HC_IN_IRQHandler+0x792>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80023dc:	78fb      	ldrb	r3, [r7, #3]
 80023de:	015a      	lsls	r2, r3, #5
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	4413      	add	r3, r2
 80023e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80023e8:	461a      	mov	r2, r3
 80023ea:	2340      	movs	r3, #64	@ 0x40
 80023ec:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 80023ee:	78fa      	ldrb	r2, [r7, #3]
 80023f0:	6879      	ldr	r1, [r7, #4]
 80023f2:	4613      	mov	r3, r2
 80023f4:	005b      	lsls	r3, r3, #1
 80023f6:	4413      	add	r3, r2
 80023f8:	011b      	lsls	r3, r3, #4
 80023fa:	440b      	add	r3, r1
 80023fc:	3365      	adds	r3, #101	@ 0x65
 80023fe:	2205      	movs	r2, #5
 8002400:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8002402:	78fa      	ldrb	r2, [r7, #3]
 8002404:	6879      	ldr	r1, [r7, #4]
 8002406:	4613      	mov	r3, r2
 8002408:	005b      	lsls	r3, r3, #1
 800240a:	4413      	add	r3, r2
 800240c:	011b      	lsls	r3, r3, #4
 800240e:	440b      	add	r3, r1
 8002410:	3360      	adds	r3, #96	@ 0x60
 8002412:	2200      	movs	r2, #0
 8002414:	601a      	str	r2, [r3, #0]

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	78fa      	ldrb	r2, [r7, #3]
 800241c:	4611      	mov	r1, r2
 800241e:	4618      	mov	r0, r3
 8002420:	f003 fb53 	bl	8005aca <USB_HC_Halt>
 8002424:	e06e      	b.n	8002504 <HCD_HC_IN_IRQHandler+0x870>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	78fa      	ldrb	r2, [r7, #3]
 800242c:	4611      	mov	r1, r2
 800242e:	4618      	mov	r0, r3
 8002430:	f002 ff89 	bl	8005346 <USB_ReadChInterrupts>
 8002434:	4603      	mov	r3, r0
 8002436:	f003 0310 	and.w	r3, r3, #16
 800243a:	2b10      	cmp	r3, #16
 800243c:	d162      	bne.n	8002504 <HCD_HC_IN_IRQHandler+0x870>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 800243e:	78fa      	ldrb	r2, [r7, #3]
 8002440:	6879      	ldr	r1, [r7, #4]
 8002442:	4613      	mov	r3, r2
 8002444:	005b      	lsls	r3, r3, #1
 8002446:	4413      	add	r3, r2
 8002448:	011b      	lsls	r3, r3, #4
 800244a:	440b      	add	r3, r1
 800244c:	3340      	adds	r3, #64	@ 0x40
 800244e:	781b      	ldrb	r3, [r3, #0]
 8002450:	2b03      	cmp	r3, #3
 8002452:	d11b      	bne.n	800248c <HCD_HC_IN_IRQHandler+0x7f8>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002454:	78fa      	ldrb	r2, [r7, #3]
 8002456:	6879      	ldr	r1, [r7, #4]
 8002458:	4613      	mov	r3, r2
 800245a:	005b      	lsls	r3, r3, #1
 800245c:	4413      	add	r3, r2
 800245e:	011b      	lsls	r3, r3, #4
 8002460:	440b      	add	r3, r1
 8002462:	3360      	adds	r3, #96	@ 0x60
 8002464:	2200      	movs	r2, #0
 8002466:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8002468:	78fa      	ldrb	r2, [r7, #3]
 800246a:	6879      	ldr	r1, [r7, #4]
 800246c:	4613      	mov	r3, r2
 800246e:	005b      	lsls	r3, r3, #1
 8002470:	4413      	add	r3, r2
 8002472:	011b      	lsls	r3, r3, #4
 8002474:	440b      	add	r3, r1
 8002476:	3365      	adds	r3, #101	@ 0x65
 8002478:	2204      	movs	r2, #4
 800247a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	78fa      	ldrb	r2, [r7, #3]
 8002482:	4611      	mov	r1, r2
 8002484:	4618      	mov	r0, r3
 8002486:	f003 fb20 	bl	8005aca <USB_HC_Halt>
 800248a:	e030      	b.n	80024ee <HCD_HC_IN_IRQHandler+0x85a>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800248c:	78fa      	ldrb	r2, [r7, #3]
 800248e:	6879      	ldr	r1, [r7, #4]
 8002490:	4613      	mov	r3, r2
 8002492:	005b      	lsls	r3, r3, #1
 8002494:	4413      	add	r3, r2
 8002496:	011b      	lsls	r3, r3, #4
 8002498:	440b      	add	r3, r1
 800249a:	3340      	adds	r3, #64	@ 0x40
 800249c:	781b      	ldrb	r3, [r3, #0]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d00a      	beq.n	80024b8 <HCD_HC_IN_IRQHandler+0x824>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80024a2:	78fa      	ldrb	r2, [r7, #3]
 80024a4:	6879      	ldr	r1, [r7, #4]
 80024a6:	4613      	mov	r3, r2
 80024a8:	005b      	lsls	r3, r3, #1
 80024aa:	4413      	add	r3, r2
 80024ac:	011b      	lsls	r3, r3, #4
 80024ae:	440b      	add	r3, r1
 80024b0:	3340      	adds	r3, #64	@ 0x40
 80024b2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80024b4:	2b02      	cmp	r3, #2
 80024b6:	d11a      	bne.n	80024ee <HCD_HC_IN_IRQHandler+0x85a>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80024b8:	78fa      	ldrb	r2, [r7, #3]
 80024ba:	6879      	ldr	r1, [r7, #4]
 80024bc:	4613      	mov	r3, r2
 80024be:	005b      	lsls	r3, r3, #1
 80024c0:	4413      	add	r3, r2
 80024c2:	011b      	lsls	r3, r3, #4
 80024c4:	440b      	add	r3, r1
 80024c6:	3360      	adds	r3, #96	@ 0x60
 80024c8:	2200      	movs	r2, #0
 80024ca:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 80024cc:	78fa      	ldrb	r2, [r7, #3]
 80024ce:	6879      	ldr	r1, [r7, #4]
 80024d0:	4613      	mov	r3, r2
 80024d2:	005b      	lsls	r3, r3, #1
 80024d4:	4413      	add	r3, r2
 80024d6:	011b      	lsls	r3, r3, #4
 80024d8:	440b      	add	r3, r1
 80024da:	3365      	adds	r3, #101	@ 0x65
 80024dc:	2204      	movs	r2, #4
 80024de:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	78fa      	ldrb	r2, [r7, #3]
 80024e6:	4611      	mov	r1, r2
 80024e8:	4618      	mov	r0, r3
 80024ea:	f003 faee 	bl	8005aca <USB_HC_Halt>
    else
    {
      /* ... */
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80024ee:	78fb      	ldrb	r3, [r7, #3]
 80024f0:	015a      	lsls	r2, r3, #5
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	4413      	add	r3, r2
 80024f6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80024fa:	461a      	mov	r2, r3
 80024fc:	2310      	movs	r3, #16
 80024fe:	6093      	str	r3, [r2, #8]
 8002500:	e000      	b.n	8002504 <HCD_HC_IN_IRQHandler+0x870>
        return;
 8002502:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8002504:	3718      	adds	r7, #24
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}

0800250a <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800250a:	b580      	push	{r7, lr}
 800250c:	b086      	sub	sp, #24
 800250e:	af00      	add	r7, sp, #0
 8002510:	6078      	str	r0, [r7, #4]
 8002512:	460b      	mov	r3, r1
 8002514:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	78fa      	ldrb	r2, [r7, #3]
 8002526:	4611      	mov	r1, r2
 8002528:	4618      	mov	r0, r3
 800252a:	f002 ff0c 	bl	8005346 <USB_ReadChInterrupts>
 800252e:	4603      	mov	r3, r0
 8002530:	f003 0304 	and.w	r3, r3, #4
 8002534:	2b04      	cmp	r3, #4
 8002536:	d11a      	bne.n	800256e <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002538:	78fb      	ldrb	r3, [r7, #3]
 800253a:	015a      	lsls	r2, r3, #5
 800253c:	693b      	ldr	r3, [r7, #16]
 800253e:	4413      	add	r3, r2
 8002540:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002544:	461a      	mov	r2, r3
 8002546:	2304      	movs	r3, #4
 8002548:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800254a:	78fa      	ldrb	r2, [r7, #3]
 800254c:	6879      	ldr	r1, [r7, #4]
 800254e:	4613      	mov	r3, r2
 8002550:	005b      	lsls	r3, r3, #1
 8002552:	4413      	add	r3, r2
 8002554:	011b      	lsls	r3, r3, #4
 8002556:	440b      	add	r3, r1
 8002558:	3365      	adds	r3, #101	@ 0x65
 800255a:	2207      	movs	r2, #7
 800255c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	78fa      	ldrb	r2, [r7, #3]
 8002564:	4611      	mov	r1, r2
 8002566:	4618      	mov	r0, r3
 8002568:	f003 faaf 	bl	8005aca <USB_HC_Halt>
 800256c:	e2a0      	b.n	8002ab0 <HCD_HC_OUT_IRQHandler+0x5a6>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	78fa      	ldrb	r2, [r7, #3]
 8002574:	4611      	mov	r1, r2
 8002576:	4618      	mov	r0, r3
 8002578:	f002 fee5 	bl	8005346 <USB_ReadChInterrupts>
 800257c:	4603      	mov	r3, r0
 800257e:	f003 0320 	and.w	r3, r3, #32
 8002582:	2b20      	cmp	r3, #32
 8002584:	d109      	bne.n	800259a <HCD_HC_OUT_IRQHandler+0x90>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002586:	78fb      	ldrb	r3, [r7, #3]
 8002588:	015a      	lsls	r2, r3, #5
 800258a:	693b      	ldr	r3, [r7, #16]
 800258c:	4413      	add	r3, r2
 800258e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002592:	461a      	mov	r2, r3
 8002594:	2320      	movs	r3, #32
 8002596:	6093      	str	r3, [r2, #8]
 8002598:	e28a      	b.n	8002ab0 <HCD_HC_OUT_IRQHandler+0x5a6>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	78fa      	ldrb	r2, [r7, #3]
 80025a0:	4611      	mov	r1, r2
 80025a2:	4618      	mov	r0, r3
 80025a4:	f002 fecf 	bl	8005346 <USB_ReadChInterrupts>
 80025a8:	4603      	mov	r3, r0
 80025aa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80025ae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80025b2:	d111      	bne.n	80025d8 <HCD_HC_OUT_IRQHandler+0xce>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80025b4:	78fb      	ldrb	r3, [r7, #3]
 80025b6:	015a      	lsls	r2, r3, #5
 80025b8:	693b      	ldr	r3, [r7, #16]
 80025ba:	4413      	add	r3, r2
 80025bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80025c0:	461a      	mov	r2, r3
 80025c2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80025c6:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	78fa      	ldrb	r2, [r7, #3]
 80025ce:	4611      	mov	r1, r2
 80025d0:	4618      	mov	r0, r3
 80025d2:	f003 fa7a 	bl	8005aca <USB_HC_Halt>
 80025d6:	e26b      	b.n	8002ab0 <HCD_HC_OUT_IRQHandler+0x5a6>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	78fa      	ldrb	r2, [r7, #3]
 80025de:	4611      	mov	r1, r2
 80025e0:	4618      	mov	r0, r3
 80025e2:	f002 feb0 	bl	8005346 <USB_ReadChInterrupts>
 80025e6:	4603      	mov	r3, r0
 80025e8:	f003 0301 	and.w	r3, r3, #1
 80025ec:	2b01      	cmp	r3, #1
 80025ee:	d124      	bne.n	800263a <HCD_HC_OUT_IRQHandler+0x130>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80025f0:	78fa      	ldrb	r2, [r7, #3]
 80025f2:	6879      	ldr	r1, [r7, #4]
 80025f4:	4613      	mov	r3, r2
 80025f6:	005b      	lsls	r3, r3, #1
 80025f8:	4413      	add	r3, r2
 80025fa:	011b      	lsls	r3, r3, #4
 80025fc:	440b      	add	r3, r1
 80025fe:	3360      	adds	r3, #96	@ 0x60
 8002600:	2200      	movs	r2, #0
 8002602:	601a      	str	r2, [r3, #0]

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8002604:	78fb      	ldrb	r3, [r7, #3]
 8002606:	015a      	lsls	r2, r3, #5
 8002608:	693b      	ldr	r3, [r7, #16]
 800260a:	4413      	add	r3, r2
 800260c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002610:	461a      	mov	r2, r3
 8002612:	2301      	movs	r3, #1
 8002614:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8002616:	78fa      	ldrb	r2, [r7, #3]
 8002618:	6879      	ldr	r1, [r7, #4]
 800261a:	4613      	mov	r3, r2
 800261c:	005b      	lsls	r3, r3, #1
 800261e:	4413      	add	r3, r2
 8002620:	011b      	lsls	r3, r3, #4
 8002622:	440b      	add	r3, r1
 8002624:	3365      	adds	r3, #101	@ 0x65
 8002626:	2201      	movs	r2, #1
 8002628:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	78fa      	ldrb	r2, [r7, #3]
 8002630:	4611      	mov	r1, r2
 8002632:	4618      	mov	r0, r3
 8002634:	f003 fa49 	bl	8005aca <USB_HC_Halt>
 8002638:	e23a      	b.n	8002ab0 <HCD_HC_OUT_IRQHandler+0x5a6>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	78fa      	ldrb	r2, [r7, #3]
 8002640:	4611      	mov	r1, r2
 8002642:	4618      	mov	r0, r3
 8002644:	f002 fe7f 	bl	8005346 <USB_ReadChInterrupts>
 8002648:	4603      	mov	r3, r0
 800264a:	f003 0308 	and.w	r3, r3, #8
 800264e:	2b08      	cmp	r3, #8
 8002650:	d11a      	bne.n	8002688 <HCD_HC_OUT_IRQHandler+0x17e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002652:	78fb      	ldrb	r3, [r7, #3]
 8002654:	015a      	lsls	r2, r3, #5
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	4413      	add	r3, r2
 800265a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800265e:	461a      	mov	r2, r3
 8002660:	2308      	movs	r3, #8
 8002662:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8002664:	78fa      	ldrb	r2, [r7, #3]
 8002666:	6879      	ldr	r1, [r7, #4]
 8002668:	4613      	mov	r3, r2
 800266a:	005b      	lsls	r3, r3, #1
 800266c:	4413      	add	r3, r2
 800266e:	011b      	lsls	r3, r3, #4
 8002670:	440b      	add	r3, r1
 8002672:	3365      	adds	r3, #101	@ 0x65
 8002674:	2206      	movs	r2, #6
 8002676:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	78fa      	ldrb	r2, [r7, #3]
 800267e:	4611      	mov	r1, r2
 8002680:	4618      	mov	r0, r3
 8002682:	f003 fa22 	bl	8005aca <USB_HC_Halt>
 8002686:	e213      	b.n	8002ab0 <HCD_HC_OUT_IRQHandler+0x5a6>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	78fa      	ldrb	r2, [r7, #3]
 800268e:	4611      	mov	r1, r2
 8002690:	4618      	mov	r0, r3
 8002692:	f002 fe58 	bl	8005346 <USB_ReadChInterrupts>
 8002696:	4603      	mov	r3, r0
 8002698:	f003 0310 	and.w	r3, r3, #16
 800269c:	2b10      	cmp	r3, #16
 800269e:	d124      	bne.n	80026ea <HCD_HC_OUT_IRQHandler+0x1e0>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80026a0:	78fa      	ldrb	r2, [r7, #3]
 80026a2:	6879      	ldr	r1, [r7, #4]
 80026a4:	4613      	mov	r3, r2
 80026a6:	005b      	lsls	r3, r3, #1
 80026a8:	4413      	add	r3, r2
 80026aa:	011b      	lsls	r3, r3, #4
 80026ac:	440b      	add	r3, r1
 80026ae:	3360      	adds	r3, #96	@ 0x60
 80026b0:	2200      	movs	r2, #0
 80026b2:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 80026b4:	78fa      	ldrb	r2, [r7, #3]
 80026b6:	6879      	ldr	r1, [r7, #4]
 80026b8:	4613      	mov	r3, r2
 80026ba:	005b      	lsls	r3, r3, #1
 80026bc:	4413      	add	r3, r2
 80026be:	011b      	lsls	r3, r3, #4
 80026c0:	440b      	add	r3, r1
 80026c2:	3365      	adds	r3, #101	@ 0x65
 80026c4:	2204      	movs	r2, #4
 80026c6:	701a      	strb	r2, [r3, #0]

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	78fa      	ldrb	r2, [r7, #3]
 80026ce:	4611      	mov	r1, r2
 80026d0:	4618      	mov	r0, r3
 80026d2:	f003 f9fa 	bl	8005aca <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80026d6:	78fb      	ldrb	r3, [r7, #3]
 80026d8:	015a      	lsls	r2, r3, #5
 80026da:	693b      	ldr	r3, [r7, #16]
 80026dc:	4413      	add	r3, r2
 80026de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80026e2:	461a      	mov	r2, r3
 80026e4:	2310      	movs	r3, #16
 80026e6:	6093      	str	r3, [r2, #8]
 80026e8:	e1e2      	b.n	8002ab0 <HCD_HC_OUT_IRQHandler+0x5a6>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	78fa      	ldrb	r2, [r7, #3]
 80026f0:	4611      	mov	r1, r2
 80026f2:	4618      	mov	r0, r3
 80026f4:	f002 fe27 	bl	8005346 <USB_ReadChInterrupts>
 80026f8:	4603      	mov	r3, r0
 80026fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026fe:	2b80      	cmp	r3, #128	@ 0x80
 8002700:	d11a      	bne.n	8002738 <HCD_HC_OUT_IRQHandler+0x22e>
  {
    hhcd->hc[chnum].state = HC_XACTERR;
 8002702:	78fa      	ldrb	r2, [r7, #3]
 8002704:	6879      	ldr	r1, [r7, #4]
 8002706:	4613      	mov	r3, r2
 8002708:	005b      	lsls	r3, r3, #1
 800270a:	4413      	add	r3, r2
 800270c:	011b      	lsls	r3, r3, #4
 800270e:	440b      	add	r3, r1
 8002710:	3365      	adds	r3, #101	@ 0x65
 8002712:	2207      	movs	r2, #7
 8002714:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	78fa      	ldrb	r2, [r7, #3]
 800271c:	4611      	mov	r1, r2
 800271e:	4618      	mov	r0, r3
 8002720:	f003 f9d3 	bl	8005aca <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8002724:	78fb      	ldrb	r3, [r7, #3]
 8002726:	015a      	lsls	r2, r3, #5
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	4413      	add	r3, r2
 800272c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002730:	461a      	mov	r2, r3
 8002732:	2380      	movs	r3, #128	@ 0x80
 8002734:	6093      	str	r3, [r2, #8]
 8002736:	e1bb      	b.n	8002ab0 <HCD_HC_OUT_IRQHandler+0x5a6>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	78fa      	ldrb	r2, [r7, #3]
 800273e:	4611      	mov	r1, r2
 8002740:	4618      	mov	r0, r3
 8002742:	f002 fe00 	bl	8005346 <USB_ReadChInterrupts>
 8002746:	4603      	mov	r3, r0
 8002748:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800274c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002750:	d11b      	bne.n	800278a <HCD_HC_OUT_IRQHandler+0x280>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8002752:	78fa      	ldrb	r2, [r7, #3]
 8002754:	6879      	ldr	r1, [r7, #4]
 8002756:	4613      	mov	r3, r2
 8002758:	005b      	lsls	r3, r3, #1
 800275a:	4413      	add	r3, r2
 800275c:	011b      	lsls	r3, r3, #4
 800275e:	440b      	add	r3, r1
 8002760:	3365      	adds	r3, #101	@ 0x65
 8002762:	2209      	movs	r2, #9
 8002764:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	78fa      	ldrb	r2, [r7, #3]
 800276c:	4611      	mov	r1, r2
 800276e:	4618      	mov	r0, r3
 8002770:	f003 f9ab 	bl	8005aca <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8002774:	78fb      	ldrb	r3, [r7, #3]
 8002776:	015a      	lsls	r2, r3, #5
 8002778:	693b      	ldr	r3, [r7, #16]
 800277a:	4413      	add	r3, r2
 800277c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002780:	461a      	mov	r2, r3
 8002782:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002786:	6093      	str	r3, [r2, #8]
 8002788:	e192      	b.n	8002ab0 <HCD_HC_OUT_IRQHandler+0x5a6>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	78fa      	ldrb	r2, [r7, #3]
 8002790:	4611      	mov	r1, r2
 8002792:	4618      	mov	r0, r3
 8002794:	f002 fdd7 	bl	8005346 <USB_ReadChInterrupts>
 8002798:	4603      	mov	r3, r0
 800279a:	f003 0302 	and.w	r3, r3, #2
 800279e:	2b02      	cmp	r3, #2
 80027a0:	f040 8183 	bne.w	8002aaa <HCD_HC_OUT_IRQHandler+0x5a0>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80027a4:	78fb      	ldrb	r3, [r7, #3]
 80027a6:	015a      	lsls	r2, r3, #5
 80027a8:	693b      	ldr	r3, [r7, #16]
 80027aa:	4413      	add	r3, r2
 80027ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80027b0:	461a      	mov	r2, r3
 80027b2:	2302      	movs	r3, #2
 80027b4:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80027b6:	78fa      	ldrb	r2, [r7, #3]
 80027b8:	6879      	ldr	r1, [r7, #4]
 80027ba:	4613      	mov	r3, r2
 80027bc:	005b      	lsls	r3, r3, #1
 80027be:	4413      	add	r3, r2
 80027c0:	011b      	lsls	r3, r3, #4
 80027c2:	440b      	add	r3, r1
 80027c4:	3365      	adds	r3, #101	@ 0x65
 80027c6:	781b      	ldrb	r3, [r3, #0]
 80027c8:	2b01      	cmp	r3, #1
 80027ca:	f040 8093 	bne.w	80028f4 <HCD_HC_OUT_IRQHandler+0x3ea>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80027ce:	78fa      	ldrb	r2, [r7, #3]
 80027d0:	6879      	ldr	r1, [r7, #4]
 80027d2:	4613      	mov	r3, r2
 80027d4:	005b      	lsls	r3, r3, #1
 80027d6:	4413      	add	r3, r2
 80027d8:	011b      	lsls	r3, r3, #4
 80027da:	440b      	add	r3, r1
 80027dc:	3365      	adds	r3, #101	@ 0x65
 80027de:	2202      	movs	r2, #2
 80027e0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80027e2:	78fa      	ldrb	r2, [r7, #3]
 80027e4:	6879      	ldr	r1, [r7, #4]
 80027e6:	4613      	mov	r3, r2
 80027e8:	005b      	lsls	r3, r3, #1
 80027ea:	4413      	add	r3, r2
 80027ec:	011b      	lsls	r3, r3, #4
 80027ee:	440b      	add	r3, r1
 80027f0:	3364      	adds	r3, #100	@ 0x64
 80027f2:	2201      	movs	r2, #1
 80027f4:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80027f6:	78fa      	ldrb	r2, [r7, #3]
 80027f8:	6879      	ldr	r1, [r7, #4]
 80027fa:	4613      	mov	r3, r2
 80027fc:	005b      	lsls	r3, r3, #1
 80027fe:	4413      	add	r3, r2
 8002800:	011b      	lsls	r3, r3, #4
 8002802:	440b      	add	r3, r1
 8002804:	3340      	adds	r3, #64	@ 0x40
 8002806:	781b      	ldrb	r3, [r3, #0]
 8002808:	2b02      	cmp	r3, #2
 800280a:	d00b      	beq.n	8002824 <HCD_HC_OUT_IRQHandler+0x31a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 800280c:	78fa      	ldrb	r2, [r7, #3]
 800280e:	6879      	ldr	r1, [r7, #4]
 8002810:	4613      	mov	r3, r2
 8002812:	005b      	lsls	r3, r3, #1
 8002814:	4413      	add	r3, r2
 8002816:	011b      	lsls	r3, r3, #4
 8002818:	440b      	add	r3, r1
 800281a:	3340      	adds	r3, #64	@ 0x40
 800281c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800281e:	2b03      	cmp	r3, #3
 8002820:	f040 8134 	bne.w	8002a8c <HCD_HC_OUT_IRQHandler+0x582>
      {
        if (hhcd->Init.dma_enable == 0U)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	68db      	ldr	r3, [r3, #12]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d115      	bne.n	8002858 <HCD_HC_OUT_IRQHandler+0x34e>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 800282c:	78fa      	ldrb	r2, [r7, #3]
 800282e:	6879      	ldr	r1, [r7, #4]
 8002830:	4613      	mov	r3, r2
 8002832:	005b      	lsls	r3, r3, #1
 8002834:	4413      	add	r3, r2
 8002836:	011b      	lsls	r3, r3, #4
 8002838:	440b      	add	r3, r1
 800283a:	3359      	adds	r3, #89	@ 0x59
 800283c:	781b      	ldrb	r3, [r3, #0]
 800283e:	78fa      	ldrb	r2, [r7, #3]
 8002840:	f083 0301 	eor.w	r3, r3, #1
 8002844:	b2d8      	uxtb	r0, r3
 8002846:	6879      	ldr	r1, [r7, #4]
 8002848:	4613      	mov	r3, r2
 800284a:	005b      	lsls	r3, r3, #1
 800284c:	4413      	add	r3, r2
 800284e:	011b      	lsls	r3, r3, #4
 8002850:	440b      	add	r3, r1
 8002852:	3359      	adds	r3, #89	@ 0x59
 8002854:	4602      	mov	r2, r0
 8002856:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	68db      	ldr	r3, [r3, #12]
 800285c:	2b01      	cmp	r3, #1
 800285e:	f040 8115 	bne.w	8002a8c <HCD_HC_OUT_IRQHandler+0x582>
 8002862:	78fa      	ldrb	r2, [r7, #3]
 8002864:	6879      	ldr	r1, [r7, #4]
 8002866:	4613      	mov	r3, r2
 8002868:	005b      	lsls	r3, r3, #1
 800286a:	4413      	add	r3, r2
 800286c:	011b      	lsls	r3, r3, #4
 800286e:	440b      	add	r3, r1
 8002870:	3350      	adds	r3, #80	@ 0x50
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	2b00      	cmp	r3, #0
 8002876:	f000 8109 	beq.w	8002a8c <HCD_HC_OUT_IRQHandler+0x582>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 800287a:	78fa      	ldrb	r2, [r7, #3]
 800287c:	6879      	ldr	r1, [r7, #4]
 800287e:	4613      	mov	r3, r2
 8002880:	005b      	lsls	r3, r3, #1
 8002882:	4413      	add	r3, r2
 8002884:	011b      	lsls	r3, r3, #4
 8002886:	440b      	add	r3, r1
 8002888:	3350      	adds	r3, #80	@ 0x50
 800288a:	6819      	ldr	r1, [r3, #0]
 800288c:	78fa      	ldrb	r2, [r7, #3]
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	4613      	mov	r3, r2
 8002892:	005b      	lsls	r3, r3, #1
 8002894:	4413      	add	r3, r2
 8002896:	011b      	lsls	r3, r3, #4
 8002898:	4403      	add	r3, r0
 800289a:	3342      	adds	r3, #66	@ 0x42
 800289c:	881b      	ldrh	r3, [r3, #0]
 800289e:	440b      	add	r3, r1
 80028a0:	1e59      	subs	r1, r3, #1
 80028a2:	78fa      	ldrb	r2, [r7, #3]
 80028a4:	6878      	ldr	r0, [r7, #4]
 80028a6:	4613      	mov	r3, r2
 80028a8:	005b      	lsls	r3, r3, #1
 80028aa:	4413      	add	r3, r2
 80028ac:	011b      	lsls	r3, r3, #4
 80028ae:	4403      	add	r3, r0
 80028b0:	3342      	adds	r3, #66	@ 0x42
 80028b2:	881b      	ldrh	r3, [r3, #0]
 80028b4:	fbb1 f3f3 	udiv	r3, r1, r3
 80028b8:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 80028ba:	68bb      	ldr	r3, [r7, #8]
 80028bc:	f003 0301 	and.w	r3, r3, #1
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	f000 80e3 	beq.w	8002a8c <HCD_HC_OUT_IRQHandler+0x582>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 80028c6:	78fa      	ldrb	r2, [r7, #3]
 80028c8:	6879      	ldr	r1, [r7, #4]
 80028ca:	4613      	mov	r3, r2
 80028cc:	005b      	lsls	r3, r3, #1
 80028ce:	4413      	add	r3, r2
 80028d0:	011b      	lsls	r3, r3, #4
 80028d2:	440b      	add	r3, r1
 80028d4:	3359      	adds	r3, #89	@ 0x59
 80028d6:	781b      	ldrb	r3, [r3, #0]
 80028d8:	78fa      	ldrb	r2, [r7, #3]
 80028da:	f083 0301 	eor.w	r3, r3, #1
 80028de:	b2d8      	uxtb	r0, r3
 80028e0:	6879      	ldr	r1, [r7, #4]
 80028e2:	4613      	mov	r3, r2
 80028e4:	005b      	lsls	r3, r3, #1
 80028e6:	4413      	add	r3, r2
 80028e8:	011b      	lsls	r3, r3, #4
 80028ea:	440b      	add	r3, r1
 80028ec:	3359      	adds	r3, #89	@ 0x59
 80028ee:	4602      	mov	r2, r0
 80028f0:	701a      	strb	r2, [r3, #0]
 80028f2:	e0cb      	b.n	8002a8c <HCD_HC_OUT_IRQHandler+0x582>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80028f4:	78fa      	ldrb	r2, [r7, #3]
 80028f6:	6879      	ldr	r1, [r7, #4]
 80028f8:	4613      	mov	r3, r2
 80028fa:	005b      	lsls	r3, r3, #1
 80028fc:	4413      	add	r3, r2
 80028fe:	011b      	lsls	r3, r3, #4
 8002900:	440b      	add	r3, r1
 8002902:	3365      	adds	r3, #101	@ 0x65
 8002904:	781b      	ldrb	r3, [r3, #0]
 8002906:	2b03      	cmp	r3, #3
 8002908:	d10a      	bne.n	8002920 <HCD_HC_OUT_IRQHandler+0x416>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800290a:	78fa      	ldrb	r2, [r7, #3]
 800290c:	6879      	ldr	r1, [r7, #4]
 800290e:	4613      	mov	r3, r2
 8002910:	005b      	lsls	r3, r3, #1
 8002912:	4413      	add	r3, r2
 8002914:	011b      	lsls	r3, r3, #4
 8002916:	440b      	add	r3, r1
 8002918:	3365      	adds	r3, #101	@ 0x65
 800291a:	2202      	movs	r2, #2
 800291c:	701a      	strb	r2, [r3, #0]
 800291e:	e0b5      	b.n	8002a8c <HCD_HC_OUT_IRQHandler+0x582>
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8002920:	78fa      	ldrb	r2, [r7, #3]
 8002922:	6879      	ldr	r1, [r7, #4]
 8002924:	4613      	mov	r3, r2
 8002926:	005b      	lsls	r3, r3, #1
 8002928:	4413      	add	r3, r2
 800292a:	011b      	lsls	r3, r3, #4
 800292c:	440b      	add	r3, r1
 800292e:	3365      	adds	r3, #101	@ 0x65
 8002930:	781b      	ldrb	r3, [r3, #0]
 8002932:	2b04      	cmp	r3, #4
 8002934:	d114      	bne.n	8002960 <HCD_HC_OUT_IRQHandler+0x456>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002936:	78fa      	ldrb	r2, [r7, #3]
 8002938:	6879      	ldr	r1, [r7, #4]
 800293a:	4613      	mov	r3, r2
 800293c:	005b      	lsls	r3, r3, #1
 800293e:	4413      	add	r3, r2
 8002940:	011b      	lsls	r3, r3, #4
 8002942:	440b      	add	r3, r1
 8002944:	3365      	adds	r3, #101	@ 0x65
 8002946:	2202      	movs	r2, #2
 8002948:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800294a:	78fa      	ldrb	r2, [r7, #3]
 800294c:	6879      	ldr	r1, [r7, #4]
 800294e:	4613      	mov	r3, r2
 8002950:	005b      	lsls	r3, r3, #1
 8002952:	4413      	add	r3, r2
 8002954:	011b      	lsls	r3, r3, #4
 8002956:	440b      	add	r3, r1
 8002958:	3364      	adds	r3, #100	@ 0x64
 800295a:	2202      	movs	r2, #2
 800295c:	701a      	strb	r2, [r3, #0]
 800295e:	e095      	b.n	8002a8c <HCD_HC_OUT_IRQHandler+0x582>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8002960:	78fa      	ldrb	r2, [r7, #3]
 8002962:	6879      	ldr	r1, [r7, #4]
 8002964:	4613      	mov	r3, r2
 8002966:	005b      	lsls	r3, r3, #1
 8002968:	4413      	add	r3, r2
 800296a:	011b      	lsls	r3, r3, #4
 800296c:	440b      	add	r3, r1
 800296e:	3365      	adds	r3, #101	@ 0x65
 8002970:	781b      	ldrb	r3, [r3, #0]
 8002972:	2b06      	cmp	r3, #6
 8002974:	d114      	bne.n	80029a0 <HCD_HC_OUT_IRQHandler+0x496>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002976:	78fa      	ldrb	r2, [r7, #3]
 8002978:	6879      	ldr	r1, [r7, #4]
 800297a:	4613      	mov	r3, r2
 800297c:	005b      	lsls	r3, r3, #1
 800297e:	4413      	add	r3, r2
 8002980:	011b      	lsls	r3, r3, #4
 8002982:	440b      	add	r3, r1
 8002984:	3365      	adds	r3, #101	@ 0x65
 8002986:	2202      	movs	r2, #2
 8002988:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 800298a:	78fa      	ldrb	r2, [r7, #3]
 800298c:	6879      	ldr	r1, [r7, #4]
 800298e:	4613      	mov	r3, r2
 8002990:	005b      	lsls	r3, r3, #1
 8002992:	4413      	add	r3, r2
 8002994:	011b      	lsls	r3, r3, #4
 8002996:	440b      	add	r3, r1
 8002998:	3364      	adds	r3, #100	@ 0x64
 800299a:	2205      	movs	r2, #5
 800299c:	701a      	strb	r2, [r3, #0]
 800299e:	e075      	b.n	8002a8c <HCD_HC_OUT_IRQHandler+0x582>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80029a0:	78fa      	ldrb	r2, [r7, #3]
 80029a2:	6879      	ldr	r1, [r7, #4]
 80029a4:	4613      	mov	r3, r2
 80029a6:	005b      	lsls	r3, r3, #1
 80029a8:	4413      	add	r3, r2
 80029aa:	011b      	lsls	r3, r3, #4
 80029ac:	440b      	add	r3, r1
 80029ae:	3365      	adds	r3, #101	@ 0x65
 80029b0:	781b      	ldrb	r3, [r3, #0]
 80029b2:	2b07      	cmp	r3, #7
 80029b4:	d00a      	beq.n	80029cc <HCD_HC_OUT_IRQHandler+0x4c2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80029b6:	78fa      	ldrb	r2, [r7, #3]
 80029b8:	6879      	ldr	r1, [r7, #4]
 80029ba:	4613      	mov	r3, r2
 80029bc:	005b      	lsls	r3, r3, #1
 80029be:	4413      	add	r3, r2
 80029c0:	011b      	lsls	r3, r3, #4
 80029c2:	440b      	add	r3, r1
 80029c4:	3365      	adds	r3, #101	@ 0x65
 80029c6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80029c8:	2b09      	cmp	r3, #9
 80029ca:	d170      	bne.n	8002aae <HCD_HC_OUT_IRQHandler+0x5a4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80029cc:	78fa      	ldrb	r2, [r7, #3]
 80029ce:	6879      	ldr	r1, [r7, #4]
 80029d0:	4613      	mov	r3, r2
 80029d2:	005b      	lsls	r3, r3, #1
 80029d4:	4413      	add	r3, r2
 80029d6:	011b      	lsls	r3, r3, #4
 80029d8:	440b      	add	r3, r1
 80029da:	3365      	adds	r3, #101	@ 0x65
 80029dc:	2202      	movs	r2, #2
 80029de:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80029e0:	78fa      	ldrb	r2, [r7, #3]
 80029e2:	6879      	ldr	r1, [r7, #4]
 80029e4:	4613      	mov	r3, r2
 80029e6:	005b      	lsls	r3, r3, #1
 80029e8:	4413      	add	r3, r2
 80029ea:	011b      	lsls	r3, r3, #4
 80029ec:	440b      	add	r3, r1
 80029ee:	3360      	adds	r3, #96	@ 0x60
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	1c59      	adds	r1, r3, #1
 80029f4:	6878      	ldr	r0, [r7, #4]
 80029f6:	4613      	mov	r3, r2
 80029f8:	005b      	lsls	r3, r3, #1
 80029fa:	4413      	add	r3, r2
 80029fc:	011b      	lsls	r3, r3, #4
 80029fe:	4403      	add	r3, r0
 8002a00:	3360      	adds	r3, #96	@ 0x60
 8002a02:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002a04:	78fa      	ldrb	r2, [r7, #3]
 8002a06:	6879      	ldr	r1, [r7, #4]
 8002a08:	4613      	mov	r3, r2
 8002a0a:	005b      	lsls	r3, r3, #1
 8002a0c:	4413      	add	r3, r2
 8002a0e:	011b      	lsls	r3, r3, #4
 8002a10:	440b      	add	r3, r1
 8002a12:	3360      	adds	r3, #96	@ 0x60
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	2b02      	cmp	r3, #2
 8002a18:	d914      	bls.n	8002a44 <HCD_HC_OUT_IRQHandler+0x53a>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8002a1a:	78fa      	ldrb	r2, [r7, #3]
 8002a1c:	6879      	ldr	r1, [r7, #4]
 8002a1e:	4613      	mov	r3, r2
 8002a20:	005b      	lsls	r3, r3, #1
 8002a22:	4413      	add	r3, r2
 8002a24:	011b      	lsls	r3, r3, #4
 8002a26:	440b      	add	r3, r1
 8002a28:	3360      	adds	r3, #96	@ 0x60
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8002a2e:	78fa      	ldrb	r2, [r7, #3]
 8002a30:	6879      	ldr	r1, [r7, #4]
 8002a32:	4613      	mov	r3, r2
 8002a34:	005b      	lsls	r3, r3, #1
 8002a36:	4413      	add	r3, r2
 8002a38:	011b      	lsls	r3, r3, #4
 8002a3a:	440b      	add	r3, r1
 8002a3c:	3364      	adds	r3, #100	@ 0x64
 8002a3e:	2204      	movs	r2, #4
 8002a40:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002a42:	e022      	b.n	8002a8a <HCD_HC_OUT_IRQHandler+0x580>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002a44:	78fa      	ldrb	r2, [r7, #3]
 8002a46:	6879      	ldr	r1, [r7, #4]
 8002a48:	4613      	mov	r3, r2
 8002a4a:	005b      	lsls	r3, r3, #1
 8002a4c:	4413      	add	r3, r2
 8002a4e:	011b      	lsls	r3, r3, #4
 8002a50:	440b      	add	r3, r1
 8002a52:	3364      	adds	r3, #100	@ 0x64
 8002a54:	2202      	movs	r2, #2
 8002a56:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8002a58:	78fb      	ldrb	r3, [r7, #3]
 8002a5a:	015a      	lsls	r2, r3, #5
 8002a5c:	693b      	ldr	r3, [r7, #16]
 8002a5e:	4413      	add	r3, r2
 8002a60:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002a6e:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002a76:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8002a78:	78fb      	ldrb	r3, [r7, #3]
 8002a7a:	015a      	lsls	r2, r3, #5
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	4413      	add	r3, r2
 8002a80:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a84:	461a      	mov	r2, r3
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002a8a:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002a8c:	78fa      	ldrb	r2, [r7, #3]
 8002a8e:	6879      	ldr	r1, [r7, #4]
 8002a90:	4613      	mov	r3, r2
 8002a92:	005b      	lsls	r3, r3, #1
 8002a94:	4413      	add	r3, r2
 8002a96:	011b      	lsls	r3, r3, #4
 8002a98:	440b      	add	r3, r1
 8002a9a:	3364      	adds	r3, #100	@ 0x64
 8002a9c:	781a      	ldrb	r2, [r3, #0]
 8002a9e:	78fb      	ldrb	r3, [r7, #3]
 8002aa0:	4619      	mov	r1, r3
 8002aa2:	6878      	ldr	r0, [r7, #4]
 8002aa4:	f006 ffb2 	bl	8009a0c <HAL_HCD_HC_NotifyURBChange_Callback>
 8002aa8:	e002      	b.n	8002ab0 <HCD_HC_OUT_IRQHandler+0x5a6>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8002aaa:	bf00      	nop
 8002aac:	e000      	b.n	8002ab0 <HCD_HC_OUT_IRQHandler+0x5a6>
      return;
 8002aae:	bf00      	nop
  }
}
 8002ab0:	3718      	adds	r7, #24
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}

08002ab6 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002ab6:	b580      	push	{r7, lr}
 8002ab8:	b08a      	sub	sp, #40	@ 0x28
 8002aba:	af00      	add	r7, sp, #0
 8002abc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ac4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ac6:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	6a1b      	ldr	r3, [r3, #32]
 8002ace:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002ad0:	69fb      	ldr	r3, [r7, #28]
 8002ad2:	f003 030f 	and.w	r3, r3, #15
 8002ad6:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002ad8:	69fb      	ldr	r3, [r7, #28]
 8002ada:	0c5b      	lsrs	r3, r3, #17
 8002adc:	f003 030f 	and.w	r3, r3, #15
 8002ae0:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002ae2:	69fb      	ldr	r3, [r7, #28]
 8002ae4:	091b      	lsrs	r3, r3, #4
 8002ae6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002aea:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	2b02      	cmp	r3, #2
 8002af0:	d004      	beq.n	8002afc <HCD_RXQLVL_IRQHandler+0x46>
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	2b05      	cmp	r3, #5
 8002af6:	f000 80b6 	beq.w	8002c66 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002afa:	e0b7      	b.n	8002c6c <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	f000 80b3 	beq.w	8002c6a <HCD_RXQLVL_IRQHandler+0x1b4>
 8002b04:	6879      	ldr	r1, [r7, #4]
 8002b06:	69ba      	ldr	r2, [r7, #24]
 8002b08:	4613      	mov	r3, r2
 8002b0a:	005b      	lsls	r3, r3, #1
 8002b0c:	4413      	add	r3, r2
 8002b0e:	011b      	lsls	r3, r3, #4
 8002b10:	440b      	add	r3, r1
 8002b12:	3348      	adds	r3, #72	@ 0x48
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	f000 80a7 	beq.w	8002c6a <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8002b1c:	6879      	ldr	r1, [r7, #4]
 8002b1e:	69ba      	ldr	r2, [r7, #24]
 8002b20:	4613      	mov	r3, r2
 8002b22:	005b      	lsls	r3, r3, #1
 8002b24:	4413      	add	r3, r2
 8002b26:	011b      	lsls	r3, r3, #4
 8002b28:	440b      	add	r3, r1
 8002b2a:	3354      	adds	r3, #84	@ 0x54
 8002b2c:	681a      	ldr	r2, [r3, #0]
 8002b2e:	693b      	ldr	r3, [r7, #16]
 8002b30:	18d1      	adds	r1, r2, r3
 8002b32:	6878      	ldr	r0, [r7, #4]
 8002b34:	69ba      	ldr	r2, [r7, #24]
 8002b36:	4613      	mov	r3, r2
 8002b38:	005b      	lsls	r3, r3, #1
 8002b3a:	4413      	add	r3, r2
 8002b3c:	011b      	lsls	r3, r3, #4
 8002b3e:	4403      	add	r3, r0
 8002b40:	3350      	adds	r3, #80	@ 0x50
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4299      	cmp	r1, r3
 8002b46:	f200 8083 	bhi.w	8002c50 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6818      	ldr	r0, [r3, #0]
 8002b4e:	6879      	ldr	r1, [r7, #4]
 8002b50:	69ba      	ldr	r2, [r7, #24]
 8002b52:	4613      	mov	r3, r2
 8002b54:	005b      	lsls	r3, r3, #1
 8002b56:	4413      	add	r3, r2
 8002b58:	011b      	lsls	r3, r3, #4
 8002b5a:	440b      	add	r3, r1
 8002b5c:	3348      	adds	r3, #72	@ 0x48
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	693a      	ldr	r2, [r7, #16]
 8002b62:	b292      	uxth	r2, r2
 8002b64:	4619      	mov	r1, r3
 8002b66:	f002 fb83 	bl	8005270 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8002b6a:	6879      	ldr	r1, [r7, #4]
 8002b6c:	69ba      	ldr	r2, [r7, #24]
 8002b6e:	4613      	mov	r3, r2
 8002b70:	005b      	lsls	r3, r3, #1
 8002b72:	4413      	add	r3, r2
 8002b74:	011b      	lsls	r3, r3, #4
 8002b76:	440b      	add	r3, r1
 8002b78:	3348      	adds	r3, #72	@ 0x48
 8002b7a:	681a      	ldr	r2, [r3, #0]
 8002b7c:	693b      	ldr	r3, [r7, #16]
 8002b7e:	18d1      	adds	r1, r2, r3
 8002b80:	6878      	ldr	r0, [r7, #4]
 8002b82:	69ba      	ldr	r2, [r7, #24]
 8002b84:	4613      	mov	r3, r2
 8002b86:	005b      	lsls	r3, r3, #1
 8002b88:	4413      	add	r3, r2
 8002b8a:	011b      	lsls	r3, r3, #4
 8002b8c:	4403      	add	r3, r0
 8002b8e:	3348      	adds	r3, #72	@ 0x48
 8002b90:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8002b92:	6879      	ldr	r1, [r7, #4]
 8002b94:	69ba      	ldr	r2, [r7, #24]
 8002b96:	4613      	mov	r3, r2
 8002b98:	005b      	lsls	r3, r3, #1
 8002b9a:	4413      	add	r3, r2
 8002b9c:	011b      	lsls	r3, r3, #4
 8002b9e:	440b      	add	r3, r1
 8002ba0:	3354      	adds	r3, #84	@ 0x54
 8002ba2:	681a      	ldr	r2, [r3, #0]
 8002ba4:	693b      	ldr	r3, [r7, #16]
 8002ba6:	18d1      	adds	r1, r2, r3
 8002ba8:	6878      	ldr	r0, [r7, #4]
 8002baa:	69ba      	ldr	r2, [r7, #24]
 8002bac:	4613      	mov	r3, r2
 8002bae:	005b      	lsls	r3, r3, #1
 8002bb0:	4413      	add	r3, r2
 8002bb2:	011b      	lsls	r3, r3, #4
 8002bb4:	4403      	add	r3, r0
 8002bb6:	3354      	adds	r3, #84	@ 0x54
 8002bb8:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002bba:	69bb      	ldr	r3, [r7, #24]
 8002bbc:	015a      	lsls	r2, r3, #5
 8002bbe:	6a3b      	ldr	r3, [r7, #32]
 8002bc0:	4413      	add	r3, r2
 8002bc2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002bc6:	691b      	ldr	r3, [r3, #16]
 8002bc8:	0cdb      	lsrs	r3, r3, #19
 8002bca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002bce:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002bd0:	6879      	ldr	r1, [r7, #4]
 8002bd2:	69ba      	ldr	r2, [r7, #24]
 8002bd4:	4613      	mov	r3, r2
 8002bd6:	005b      	lsls	r3, r3, #1
 8002bd8:	4413      	add	r3, r2
 8002bda:	011b      	lsls	r3, r3, #4
 8002bdc:	440b      	add	r3, r1
 8002bde:	3342      	adds	r3, #66	@ 0x42
 8002be0:	881b      	ldrh	r3, [r3, #0]
 8002be2:	461a      	mov	r2, r3
 8002be4:	693b      	ldr	r3, [r7, #16]
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d13f      	bne.n	8002c6a <HCD_RXQLVL_IRQHandler+0x1b4>
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d03c      	beq.n	8002c6a <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8002bf0:	69bb      	ldr	r3, [r7, #24]
 8002bf2:	015a      	lsls	r2, r3, #5
 8002bf4:	6a3b      	ldr	r3, [r7, #32]
 8002bf6:	4413      	add	r3, r2
 8002bf8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002c06:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002c0e:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8002c10:	69bb      	ldr	r3, [r7, #24]
 8002c12:	015a      	lsls	r2, r3, #5
 8002c14:	6a3b      	ldr	r3, [r7, #32]
 8002c16:	4413      	add	r3, r2
 8002c18:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c1c:	461a      	mov	r2, r3
 8002c1e:	68bb      	ldr	r3, [r7, #8]
 8002c20:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8002c22:	6879      	ldr	r1, [r7, #4]
 8002c24:	69ba      	ldr	r2, [r7, #24]
 8002c26:	4613      	mov	r3, r2
 8002c28:	005b      	lsls	r3, r3, #1
 8002c2a:	4413      	add	r3, r2
 8002c2c:	011b      	lsls	r3, r3, #4
 8002c2e:	440b      	add	r3, r1
 8002c30:	3358      	adds	r3, #88	@ 0x58
 8002c32:	781b      	ldrb	r3, [r3, #0]
 8002c34:	f083 0301 	eor.w	r3, r3, #1
 8002c38:	b2d8      	uxtb	r0, r3
 8002c3a:	6879      	ldr	r1, [r7, #4]
 8002c3c:	69ba      	ldr	r2, [r7, #24]
 8002c3e:	4613      	mov	r3, r2
 8002c40:	005b      	lsls	r3, r3, #1
 8002c42:	4413      	add	r3, r2
 8002c44:	011b      	lsls	r3, r3, #4
 8002c46:	440b      	add	r3, r1
 8002c48:	3358      	adds	r3, #88	@ 0x58
 8002c4a:	4602      	mov	r2, r0
 8002c4c:	701a      	strb	r2, [r3, #0]
      break;
 8002c4e:	e00c      	b.n	8002c6a <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8002c50:	6879      	ldr	r1, [r7, #4]
 8002c52:	69ba      	ldr	r2, [r7, #24]
 8002c54:	4613      	mov	r3, r2
 8002c56:	005b      	lsls	r3, r3, #1
 8002c58:	4413      	add	r3, r2
 8002c5a:	011b      	lsls	r3, r3, #4
 8002c5c:	440b      	add	r3, r1
 8002c5e:	3364      	adds	r3, #100	@ 0x64
 8002c60:	2204      	movs	r2, #4
 8002c62:	701a      	strb	r2, [r3, #0]
      break;
 8002c64:	e001      	b.n	8002c6a <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8002c66:	bf00      	nop
 8002c68:	e000      	b.n	8002c6c <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8002c6a:	bf00      	nop
  }
}
 8002c6c:	bf00      	nop
 8002c6e:	3728      	adds	r7, #40	@ 0x28
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bd80      	pop	{r7, pc}

08002c74 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b086      	sub	sp, #24
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002c90:	693b      	ldr	r3, [r7, #16]
 8002c92:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8002ca0:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	f003 0302 	and.w	r3, r3, #2
 8002ca8:	2b02      	cmp	r3, #2
 8002caa:	d10b      	bne.n	8002cc4 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	f003 0301 	and.w	r3, r3, #1
 8002cb2:	2b01      	cmp	r3, #1
 8002cb4:	d102      	bne.n	8002cbc <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002cb6:	6878      	ldr	r0, [r7, #4]
 8002cb8:	f006 fe8c 	bl	80099d4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	f043 0302 	orr.w	r3, r3, #2
 8002cc2:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	f003 0308 	and.w	r3, r3, #8
 8002cca:	2b08      	cmp	r3, #8
 8002ccc:	d132      	bne.n	8002d34 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	f043 0308 	orr.w	r3, r3, #8
 8002cd4:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	f003 0304 	and.w	r3, r3, #4
 8002cdc:	2b04      	cmp	r3, #4
 8002cde:	d126      	bne.n	8002d2e <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	699b      	ldr	r3, [r3, #24]
 8002ce4:	2b02      	cmp	r3, #2
 8002ce6:	d113      	bne.n	8002d10 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8002cee:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002cf2:	d106      	bne.n	8002d02 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	2102      	movs	r1, #2
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f002 fc08 	bl	8005510 <USB_InitFSLSPClkSel>
 8002d00:	e011      	b.n	8002d26 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	2101      	movs	r1, #1
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f002 fc01 	bl	8005510 <USB_InitFSLSPClkSel>
 8002d0e:	e00a      	b.n	8002d26 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	691b      	ldr	r3, [r3, #16]
 8002d14:	2b01      	cmp	r3, #1
 8002d16:	d106      	bne.n	8002d26 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002d1e:	461a      	mov	r2, r3
 8002d20:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8002d24:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002d26:	6878      	ldr	r0, [r7, #4]
 8002d28:	f006 fe7e 	bl	8009a28 <HAL_HCD_PortEnabled_Callback>
 8002d2c:	e002      	b.n	8002d34 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002d2e:	6878      	ldr	r0, [r7, #4]
 8002d30:	f006 fe88 	bl	8009a44 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	f003 0320 	and.w	r3, r3, #32
 8002d3a:	2b20      	cmp	r3, #32
 8002d3c:	d103      	bne.n	8002d46 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	f043 0320 	orr.w	r3, r3, #32
 8002d44:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8002d4c:	461a      	mov	r2, r3
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	6013      	str	r3, [r2, #0]
}
 8002d52:	bf00      	nop
 8002d54:	3718      	adds	r7, #24
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}
	...

08002d5c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d60:	4b05      	ldr	r3, [pc, #20]	@ (8002d78 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a04      	ldr	r2, [pc, #16]	@ (8002d78 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002d66:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d6a:	6013      	str	r3, [r2, #0]
}
 8002d6c:	bf00      	nop
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr
 8002d76:	bf00      	nop
 8002d78:	40007000 	.word	0x40007000

08002d7c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002d80:	4b04      	ldr	r3, [pc, #16]	@ (8002d94 <HAL_PWREx_GetVoltageRange+0x18>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d90:	4770      	bx	lr
 8002d92:	bf00      	nop
 8002d94:	40007000 	.word	0x40007000

08002d98 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b085      	sub	sp, #20
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002da6:	d130      	bne.n	8002e0a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002da8:	4b23      	ldr	r3, [pc, #140]	@ (8002e38 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002db0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002db4:	d038      	beq.n	8002e28 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002db6:	4b20      	ldr	r3, [pc, #128]	@ (8002e38 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002dbe:	4a1e      	ldr	r2, [pc, #120]	@ (8002e38 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002dc0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002dc4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002dc6:	4b1d      	ldr	r3, [pc, #116]	@ (8002e3c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	2232      	movs	r2, #50	@ 0x32
 8002dcc:	fb02 f303 	mul.w	r3, r2, r3
 8002dd0:	4a1b      	ldr	r2, [pc, #108]	@ (8002e40 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002dd2:	fba2 2303 	umull	r2, r3, r2, r3
 8002dd6:	0c9b      	lsrs	r3, r3, #18
 8002dd8:	3301      	adds	r3, #1
 8002dda:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002ddc:	e002      	b.n	8002de4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	3b01      	subs	r3, #1
 8002de2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002de4:	4b14      	ldr	r3, [pc, #80]	@ (8002e38 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002de6:	695b      	ldr	r3, [r3, #20]
 8002de8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002dec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002df0:	d102      	bne.n	8002df8 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d1f2      	bne.n	8002dde <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002df8:	4b0f      	ldr	r3, [pc, #60]	@ (8002e38 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002dfa:	695b      	ldr	r3, [r3, #20]
 8002dfc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e00:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e04:	d110      	bne.n	8002e28 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002e06:	2303      	movs	r3, #3
 8002e08:	e00f      	b.n	8002e2a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002e0a:	4b0b      	ldr	r3, [pc, #44]	@ (8002e38 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002e12:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e16:	d007      	beq.n	8002e28 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002e18:	4b07      	ldr	r3, [pc, #28]	@ (8002e38 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002e20:	4a05      	ldr	r2, [pc, #20]	@ (8002e38 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e22:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002e26:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002e28:	2300      	movs	r3, #0
}
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	3714      	adds	r7, #20
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e34:	4770      	bx	lr
 8002e36:	bf00      	nop
 8002e38:	40007000 	.word	0x40007000
 8002e3c:	20000000 	.word	0x20000000
 8002e40:	431bde83 	.word	0x431bde83

08002e44 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8002e44:	b480      	push	{r7}
 8002e46:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8002e48:	4b05      	ldr	r3, [pc, #20]	@ (8002e60 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	4a04      	ldr	r2, [pc, #16]	@ (8002e60 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002e4e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002e52:	6053      	str	r3, [r2, #4]
}
 8002e54:	bf00      	nop
 8002e56:	46bd      	mov	sp, r7
 8002e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5c:	4770      	bx	lr
 8002e5e:	bf00      	nop
 8002e60:	40007000 	.word	0x40007000

08002e64 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8002e64:	b480      	push	{r7}
 8002e66:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8002e68:	4b05      	ldr	r3, [pc, #20]	@ (8002e80 <HAL_PWREx_EnableVddIO2+0x1c>)
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	4a04      	ldr	r2, [pc, #16]	@ (8002e80 <HAL_PWREx_EnableVddIO2+0x1c>)
 8002e6e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002e72:	6053      	str	r3, [r2, #4]
}
 8002e74:	bf00      	nop
 8002e76:	46bd      	mov	sp, r7
 8002e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7c:	4770      	bx	lr
 8002e7e:	bf00      	nop
 8002e80:	40007000 	.word	0x40007000

08002e84 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b088      	sub	sp, #32
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d102      	bne.n	8002e98 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	f000 bc08 	b.w	80036a8 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e98:	4b96      	ldr	r3, [pc, #600]	@ (80030f4 <HAL_RCC_OscConfig+0x270>)
 8002e9a:	689b      	ldr	r3, [r3, #8]
 8002e9c:	f003 030c 	and.w	r3, r3, #12
 8002ea0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ea2:	4b94      	ldr	r3, [pc, #592]	@ (80030f4 <HAL_RCC_OscConfig+0x270>)
 8002ea4:	68db      	ldr	r3, [r3, #12]
 8002ea6:	f003 0303 	and.w	r3, r3, #3
 8002eaa:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f003 0310 	and.w	r3, r3, #16
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	f000 80e4 	beq.w	8003082 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002eba:	69bb      	ldr	r3, [r7, #24]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d007      	beq.n	8002ed0 <HAL_RCC_OscConfig+0x4c>
 8002ec0:	69bb      	ldr	r3, [r7, #24]
 8002ec2:	2b0c      	cmp	r3, #12
 8002ec4:	f040 808b 	bne.w	8002fde <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	2b01      	cmp	r3, #1
 8002ecc:	f040 8087 	bne.w	8002fde <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002ed0:	4b88      	ldr	r3, [pc, #544]	@ (80030f4 <HAL_RCC_OscConfig+0x270>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f003 0302 	and.w	r3, r3, #2
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d005      	beq.n	8002ee8 <HAL_RCC_OscConfig+0x64>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	699b      	ldr	r3, [r3, #24]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d101      	bne.n	8002ee8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	e3df      	b.n	80036a8 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6a1a      	ldr	r2, [r3, #32]
 8002eec:	4b81      	ldr	r3, [pc, #516]	@ (80030f4 <HAL_RCC_OscConfig+0x270>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f003 0308 	and.w	r3, r3, #8
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d004      	beq.n	8002f02 <HAL_RCC_OscConfig+0x7e>
 8002ef8:	4b7e      	ldr	r3, [pc, #504]	@ (80030f4 <HAL_RCC_OscConfig+0x270>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002f00:	e005      	b.n	8002f0e <HAL_RCC_OscConfig+0x8a>
 8002f02:	4b7c      	ldr	r3, [pc, #496]	@ (80030f4 <HAL_RCC_OscConfig+0x270>)
 8002f04:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002f08:	091b      	lsrs	r3, r3, #4
 8002f0a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d223      	bcs.n	8002f5a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6a1b      	ldr	r3, [r3, #32]
 8002f16:	4618      	mov	r0, r3
 8002f18:	f000 fd92 	bl	8003a40 <RCC_SetFlashLatencyFromMSIRange>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d001      	beq.n	8002f26 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	e3c0      	b.n	80036a8 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002f26:	4b73      	ldr	r3, [pc, #460]	@ (80030f4 <HAL_RCC_OscConfig+0x270>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a72      	ldr	r2, [pc, #456]	@ (80030f4 <HAL_RCC_OscConfig+0x270>)
 8002f2c:	f043 0308 	orr.w	r3, r3, #8
 8002f30:	6013      	str	r3, [r2, #0]
 8002f32:	4b70      	ldr	r3, [pc, #448]	@ (80030f4 <HAL_RCC_OscConfig+0x270>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6a1b      	ldr	r3, [r3, #32]
 8002f3e:	496d      	ldr	r1, [pc, #436]	@ (80030f4 <HAL_RCC_OscConfig+0x270>)
 8002f40:	4313      	orrs	r3, r2
 8002f42:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f44:	4b6b      	ldr	r3, [pc, #428]	@ (80030f4 <HAL_RCC_OscConfig+0x270>)
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	69db      	ldr	r3, [r3, #28]
 8002f50:	021b      	lsls	r3, r3, #8
 8002f52:	4968      	ldr	r1, [pc, #416]	@ (80030f4 <HAL_RCC_OscConfig+0x270>)
 8002f54:	4313      	orrs	r3, r2
 8002f56:	604b      	str	r3, [r1, #4]
 8002f58:	e025      	b.n	8002fa6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002f5a:	4b66      	ldr	r3, [pc, #408]	@ (80030f4 <HAL_RCC_OscConfig+0x270>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a65      	ldr	r2, [pc, #404]	@ (80030f4 <HAL_RCC_OscConfig+0x270>)
 8002f60:	f043 0308 	orr.w	r3, r3, #8
 8002f64:	6013      	str	r3, [r2, #0]
 8002f66:	4b63      	ldr	r3, [pc, #396]	@ (80030f4 <HAL_RCC_OscConfig+0x270>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6a1b      	ldr	r3, [r3, #32]
 8002f72:	4960      	ldr	r1, [pc, #384]	@ (80030f4 <HAL_RCC_OscConfig+0x270>)
 8002f74:	4313      	orrs	r3, r2
 8002f76:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f78:	4b5e      	ldr	r3, [pc, #376]	@ (80030f4 <HAL_RCC_OscConfig+0x270>)
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	69db      	ldr	r3, [r3, #28]
 8002f84:	021b      	lsls	r3, r3, #8
 8002f86:	495b      	ldr	r1, [pc, #364]	@ (80030f4 <HAL_RCC_OscConfig+0x270>)
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002f8c:	69bb      	ldr	r3, [r7, #24]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d109      	bne.n	8002fa6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6a1b      	ldr	r3, [r3, #32]
 8002f96:	4618      	mov	r0, r3
 8002f98:	f000 fd52 	bl	8003a40 <RCC_SetFlashLatencyFromMSIRange>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d001      	beq.n	8002fa6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e380      	b.n	80036a8 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002fa6:	f000 fc87 	bl	80038b8 <HAL_RCC_GetSysClockFreq>
 8002faa:	4602      	mov	r2, r0
 8002fac:	4b51      	ldr	r3, [pc, #324]	@ (80030f4 <HAL_RCC_OscConfig+0x270>)
 8002fae:	689b      	ldr	r3, [r3, #8]
 8002fb0:	091b      	lsrs	r3, r3, #4
 8002fb2:	f003 030f 	and.w	r3, r3, #15
 8002fb6:	4950      	ldr	r1, [pc, #320]	@ (80030f8 <HAL_RCC_OscConfig+0x274>)
 8002fb8:	5ccb      	ldrb	r3, [r1, r3]
 8002fba:	f003 031f 	and.w	r3, r3, #31
 8002fbe:	fa22 f303 	lsr.w	r3, r2, r3
 8002fc2:	4a4e      	ldr	r2, [pc, #312]	@ (80030fc <HAL_RCC_OscConfig+0x278>)
 8002fc4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002fc6:	4b4e      	ldr	r3, [pc, #312]	@ (8003100 <HAL_RCC_OscConfig+0x27c>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f7fd feb2 	bl	8000d34 <HAL_InitTick>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002fd4:	7bfb      	ldrb	r3, [r7, #15]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d052      	beq.n	8003080 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002fda:	7bfb      	ldrb	r3, [r7, #15]
 8002fdc:	e364      	b.n	80036a8 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	699b      	ldr	r3, [r3, #24]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d032      	beq.n	800304c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002fe6:	4b43      	ldr	r3, [pc, #268]	@ (80030f4 <HAL_RCC_OscConfig+0x270>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a42      	ldr	r2, [pc, #264]	@ (80030f4 <HAL_RCC_OscConfig+0x270>)
 8002fec:	f043 0301 	orr.w	r3, r3, #1
 8002ff0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002ff2:	f7fd feef 	bl	8000dd4 <HAL_GetTick>
 8002ff6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002ff8:	e008      	b.n	800300c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002ffa:	f7fd feeb 	bl	8000dd4 <HAL_GetTick>
 8002ffe:	4602      	mov	r2, r0
 8003000:	693b      	ldr	r3, [r7, #16]
 8003002:	1ad3      	subs	r3, r2, r3
 8003004:	2b02      	cmp	r3, #2
 8003006:	d901      	bls.n	800300c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003008:	2303      	movs	r3, #3
 800300a:	e34d      	b.n	80036a8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800300c:	4b39      	ldr	r3, [pc, #228]	@ (80030f4 <HAL_RCC_OscConfig+0x270>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f003 0302 	and.w	r3, r3, #2
 8003014:	2b00      	cmp	r3, #0
 8003016:	d0f0      	beq.n	8002ffa <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003018:	4b36      	ldr	r3, [pc, #216]	@ (80030f4 <HAL_RCC_OscConfig+0x270>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a35      	ldr	r2, [pc, #212]	@ (80030f4 <HAL_RCC_OscConfig+0x270>)
 800301e:	f043 0308 	orr.w	r3, r3, #8
 8003022:	6013      	str	r3, [r2, #0]
 8003024:	4b33      	ldr	r3, [pc, #204]	@ (80030f4 <HAL_RCC_OscConfig+0x270>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6a1b      	ldr	r3, [r3, #32]
 8003030:	4930      	ldr	r1, [pc, #192]	@ (80030f4 <HAL_RCC_OscConfig+0x270>)
 8003032:	4313      	orrs	r3, r2
 8003034:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003036:	4b2f      	ldr	r3, [pc, #188]	@ (80030f4 <HAL_RCC_OscConfig+0x270>)
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	69db      	ldr	r3, [r3, #28]
 8003042:	021b      	lsls	r3, r3, #8
 8003044:	492b      	ldr	r1, [pc, #172]	@ (80030f4 <HAL_RCC_OscConfig+0x270>)
 8003046:	4313      	orrs	r3, r2
 8003048:	604b      	str	r3, [r1, #4]
 800304a:	e01a      	b.n	8003082 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800304c:	4b29      	ldr	r3, [pc, #164]	@ (80030f4 <HAL_RCC_OscConfig+0x270>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a28      	ldr	r2, [pc, #160]	@ (80030f4 <HAL_RCC_OscConfig+0x270>)
 8003052:	f023 0301 	bic.w	r3, r3, #1
 8003056:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003058:	f7fd febc 	bl	8000dd4 <HAL_GetTick>
 800305c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800305e:	e008      	b.n	8003072 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003060:	f7fd feb8 	bl	8000dd4 <HAL_GetTick>
 8003064:	4602      	mov	r2, r0
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	1ad3      	subs	r3, r2, r3
 800306a:	2b02      	cmp	r3, #2
 800306c:	d901      	bls.n	8003072 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800306e:	2303      	movs	r3, #3
 8003070:	e31a      	b.n	80036a8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003072:	4b20      	ldr	r3, [pc, #128]	@ (80030f4 <HAL_RCC_OscConfig+0x270>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f003 0302 	and.w	r3, r3, #2
 800307a:	2b00      	cmp	r3, #0
 800307c:	d1f0      	bne.n	8003060 <HAL_RCC_OscConfig+0x1dc>
 800307e:	e000      	b.n	8003082 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003080:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 0301 	and.w	r3, r3, #1
 800308a:	2b00      	cmp	r3, #0
 800308c:	d073      	beq.n	8003176 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800308e:	69bb      	ldr	r3, [r7, #24]
 8003090:	2b08      	cmp	r3, #8
 8003092:	d005      	beq.n	80030a0 <HAL_RCC_OscConfig+0x21c>
 8003094:	69bb      	ldr	r3, [r7, #24]
 8003096:	2b0c      	cmp	r3, #12
 8003098:	d10e      	bne.n	80030b8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800309a:	697b      	ldr	r3, [r7, #20]
 800309c:	2b03      	cmp	r3, #3
 800309e:	d10b      	bne.n	80030b8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030a0:	4b14      	ldr	r3, [pc, #80]	@ (80030f4 <HAL_RCC_OscConfig+0x270>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d063      	beq.n	8003174 <HAL_RCC_OscConfig+0x2f0>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d15f      	bne.n	8003174 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80030b4:	2301      	movs	r3, #1
 80030b6:	e2f7      	b.n	80036a8 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80030c0:	d106      	bne.n	80030d0 <HAL_RCC_OscConfig+0x24c>
 80030c2:	4b0c      	ldr	r3, [pc, #48]	@ (80030f4 <HAL_RCC_OscConfig+0x270>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a0b      	ldr	r2, [pc, #44]	@ (80030f4 <HAL_RCC_OscConfig+0x270>)
 80030c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030cc:	6013      	str	r3, [r2, #0]
 80030ce:	e025      	b.n	800311c <HAL_RCC_OscConfig+0x298>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80030d8:	d114      	bne.n	8003104 <HAL_RCC_OscConfig+0x280>
 80030da:	4b06      	ldr	r3, [pc, #24]	@ (80030f4 <HAL_RCC_OscConfig+0x270>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a05      	ldr	r2, [pc, #20]	@ (80030f4 <HAL_RCC_OscConfig+0x270>)
 80030e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80030e4:	6013      	str	r3, [r2, #0]
 80030e6:	4b03      	ldr	r3, [pc, #12]	@ (80030f4 <HAL_RCC_OscConfig+0x270>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a02      	ldr	r2, [pc, #8]	@ (80030f4 <HAL_RCC_OscConfig+0x270>)
 80030ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030f0:	6013      	str	r3, [r2, #0]
 80030f2:	e013      	b.n	800311c <HAL_RCC_OscConfig+0x298>
 80030f4:	40021000 	.word	0x40021000
 80030f8:	0800b900 	.word	0x0800b900
 80030fc:	20000000 	.word	0x20000000
 8003100:	20000004 	.word	0x20000004
 8003104:	4ba0      	ldr	r3, [pc, #640]	@ (8003388 <HAL_RCC_OscConfig+0x504>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a9f      	ldr	r2, [pc, #636]	@ (8003388 <HAL_RCC_OscConfig+0x504>)
 800310a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800310e:	6013      	str	r3, [r2, #0]
 8003110:	4b9d      	ldr	r3, [pc, #628]	@ (8003388 <HAL_RCC_OscConfig+0x504>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a9c      	ldr	r2, [pc, #624]	@ (8003388 <HAL_RCC_OscConfig+0x504>)
 8003116:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800311a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d013      	beq.n	800314c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003124:	f7fd fe56 	bl	8000dd4 <HAL_GetTick>
 8003128:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800312a:	e008      	b.n	800313e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800312c:	f7fd fe52 	bl	8000dd4 <HAL_GetTick>
 8003130:	4602      	mov	r2, r0
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	1ad3      	subs	r3, r2, r3
 8003136:	2b64      	cmp	r3, #100	@ 0x64
 8003138:	d901      	bls.n	800313e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800313a:	2303      	movs	r3, #3
 800313c:	e2b4      	b.n	80036a8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800313e:	4b92      	ldr	r3, [pc, #584]	@ (8003388 <HAL_RCC_OscConfig+0x504>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003146:	2b00      	cmp	r3, #0
 8003148:	d0f0      	beq.n	800312c <HAL_RCC_OscConfig+0x2a8>
 800314a:	e014      	b.n	8003176 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800314c:	f7fd fe42 	bl	8000dd4 <HAL_GetTick>
 8003150:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003152:	e008      	b.n	8003166 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003154:	f7fd fe3e 	bl	8000dd4 <HAL_GetTick>
 8003158:	4602      	mov	r2, r0
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	1ad3      	subs	r3, r2, r3
 800315e:	2b64      	cmp	r3, #100	@ 0x64
 8003160:	d901      	bls.n	8003166 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003162:	2303      	movs	r3, #3
 8003164:	e2a0      	b.n	80036a8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003166:	4b88      	ldr	r3, [pc, #544]	@ (8003388 <HAL_RCC_OscConfig+0x504>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800316e:	2b00      	cmp	r3, #0
 8003170:	d1f0      	bne.n	8003154 <HAL_RCC_OscConfig+0x2d0>
 8003172:	e000      	b.n	8003176 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003174:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f003 0302 	and.w	r3, r3, #2
 800317e:	2b00      	cmp	r3, #0
 8003180:	d060      	beq.n	8003244 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003182:	69bb      	ldr	r3, [r7, #24]
 8003184:	2b04      	cmp	r3, #4
 8003186:	d005      	beq.n	8003194 <HAL_RCC_OscConfig+0x310>
 8003188:	69bb      	ldr	r3, [r7, #24]
 800318a:	2b0c      	cmp	r3, #12
 800318c:	d119      	bne.n	80031c2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800318e:	697b      	ldr	r3, [r7, #20]
 8003190:	2b02      	cmp	r3, #2
 8003192:	d116      	bne.n	80031c2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003194:	4b7c      	ldr	r3, [pc, #496]	@ (8003388 <HAL_RCC_OscConfig+0x504>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800319c:	2b00      	cmp	r3, #0
 800319e:	d005      	beq.n	80031ac <HAL_RCC_OscConfig+0x328>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	68db      	ldr	r3, [r3, #12]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d101      	bne.n	80031ac <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80031a8:	2301      	movs	r3, #1
 80031aa:	e27d      	b.n	80036a8 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031ac:	4b76      	ldr	r3, [pc, #472]	@ (8003388 <HAL_RCC_OscConfig+0x504>)
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	691b      	ldr	r3, [r3, #16]
 80031b8:	061b      	lsls	r3, r3, #24
 80031ba:	4973      	ldr	r1, [pc, #460]	@ (8003388 <HAL_RCC_OscConfig+0x504>)
 80031bc:	4313      	orrs	r3, r2
 80031be:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80031c0:	e040      	b.n	8003244 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	68db      	ldr	r3, [r3, #12]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d023      	beq.n	8003212 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031ca:	4b6f      	ldr	r3, [pc, #444]	@ (8003388 <HAL_RCC_OscConfig+0x504>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a6e      	ldr	r2, [pc, #440]	@ (8003388 <HAL_RCC_OscConfig+0x504>)
 80031d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80031d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031d6:	f7fd fdfd 	bl	8000dd4 <HAL_GetTick>
 80031da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80031dc:	e008      	b.n	80031f0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031de:	f7fd fdf9 	bl	8000dd4 <HAL_GetTick>
 80031e2:	4602      	mov	r2, r0
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	1ad3      	subs	r3, r2, r3
 80031e8:	2b02      	cmp	r3, #2
 80031ea:	d901      	bls.n	80031f0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80031ec:	2303      	movs	r3, #3
 80031ee:	e25b      	b.n	80036a8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80031f0:	4b65      	ldr	r3, [pc, #404]	@ (8003388 <HAL_RCC_OscConfig+0x504>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d0f0      	beq.n	80031de <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031fc:	4b62      	ldr	r3, [pc, #392]	@ (8003388 <HAL_RCC_OscConfig+0x504>)
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	691b      	ldr	r3, [r3, #16]
 8003208:	061b      	lsls	r3, r3, #24
 800320a:	495f      	ldr	r1, [pc, #380]	@ (8003388 <HAL_RCC_OscConfig+0x504>)
 800320c:	4313      	orrs	r3, r2
 800320e:	604b      	str	r3, [r1, #4]
 8003210:	e018      	b.n	8003244 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003212:	4b5d      	ldr	r3, [pc, #372]	@ (8003388 <HAL_RCC_OscConfig+0x504>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a5c      	ldr	r2, [pc, #368]	@ (8003388 <HAL_RCC_OscConfig+0x504>)
 8003218:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800321c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800321e:	f7fd fdd9 	bl	8000dd4 <HAL_GetTick>
 8003222:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003224:	e008      	b.n	8003238 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003226:	f7fd fdd5 	bl	8000dd4 <HAL_GetTick>
 800322a:	4602      	mov	r2, r0
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	1ad3      	subs	r3, r2, r3
 8003230:	2b02      	cmp	r3, #2
 8003232:	d901      	bls.n	8003238 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003234:	2303      	movs	r3, #3
 8003236:	e237      	b.n	80036a8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003238:	4b53      	ldr	r3, [pc, #332]	@ (8003388 <HAL_RCC_OscConfig+0x504>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003240:	2b00      	cmp	r3, #0
 8003242:	d1f0      	bne.n	8003226 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f003 0308 	and.w	r3, r3, #8
 800324c:	2b00      	cmp	r3, #0
 800324e:	d03c      	beq.n	80032ca <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	695b      	ldr	r3, [r3, #20]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d01c      	beq.n	8003292 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003258:	4b4b      	ldr	r3, [pc, #300]	@ (8003388 <HAL_RCC_OscConfig+0x504>)
 800325a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800325e:	4a4a      	ldr	r2, [pc, #296]	@ (8003388 <HAL_RCC_OscConfig+0x504>)
 8003260:	f043 0301 	orr.w	r3, r3, #1
 8003264:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003268:	f7fd fdb4 	bl	8000dd4 <HAL_GetTick>
 800326c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800326e:	e008      	b.n	8003282 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003270:	f7fd fdb0 	bl	8000dd4 <HAL_GetTick>
 8003274:	4602      	mov	r2, r0
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	1ad3      	subs	r3, r2, r3
 800327a:	2b02      	cmp	r3, #2
 800327c:	d901      	bls.n	8003282 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800327e:	2303      	movs	r3, #3
 8003280:	e212      	b.n	80036a8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003282:	4b41      	ldr	r3, [pc, #260]	@ (8003388 <HAL_RCC_OscConfig+0x504>)
 8003284:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003288:	f003 0302 	and.w	r3, r3, #2
 800328c:	2b00      	cmp	r3, #0
 800328e:	d0ef      	beq.n	8003270 <HAL_RCC_OscConfig+0x3ec>
 8003290:	e01b      	b.n	80032ca <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003292:	4b3d      	ldr	r3, [pc, #244]	@ (8003388 <HAL_RCC_OscConfig+0x504>)
 8003294:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003298:	4a3b      	ldr	r2, [pc, #236]	@ (8003388 <HAL_RCC_OscConfig+0x504>)
 800329a:	f023 0301 	bic.w	r3, r3, #1
 800329e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032a2:	f7fd fd97 	bl	8000dd4 <HAL_GetTick>
 80032a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80032a8:	e008      	b.n	80032bc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032aa:	f7fd fd93 	bl	8000dd4 <HAL_GetTick>
 80032ae:	4602      	mov	r2, r0
 80032b0:	693b      	ldr	r3, [r7, #16]
 80032b2:	1ad3      	subs	r3, r2, r3
 80032b4:	2b02      	cmp	r3, #2
 80032b6:	d901      	bls.n	80032bc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80032b8:	2303      	movs	r3, #3
 80032ba:	e1f5      	b.n	80036a8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80032bc:	4b32      	ldr	r3, [pc, #200]	@ (8003388 <HAL_RCC_OscConfig+0x504>)
 80032be:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80032c2:	f003 0302 	and.w	r3, r3, #2
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d1ef      	bne.n	80032aa <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f003 0304 	and.w	r3, r3, #4
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	f000 80a6 	beq.w	8003424 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032d8:	2300      	movs	r3, #0
 80032da:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80032dc:	4b2a      	ldr	r3, [pc, #168]	@ (8003388 <HAL_RCC_OscConfig+0x504>)
 80032de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d10d      	bne.n	8003304 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032e8:	4b27      	ldr	r3, [pc, #156]	@ (8003388 <HAL_RCC_OscConfig+0x504>)
 80032ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032ec:	4a26      	ldr	r2, [pc, #152]	@ (8003388 <HAL_RCC_OscConfig+0x504>)
 80032ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80032f2:	6593      	str	r3, [r2, #88]	@ 0x58
 80032f4:	4b24      	ldr	r3, [pc, #144]	@ (8003388 <HAL_RCC_OscConfig+0x504>)
 80032f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032fc:	60bb      	str	r3, [r7, #8]
 80032fe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003300:	2301      	movs	r3, #1
 8003302:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003304:	4b21      	ldr	r3, [pc, #132]	@ (800338c <HAL_RCC_OscConfig+0x508>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800330c:	2b00      	cmp	r3, #0
 800330e:	d118      	bne.n	8003342 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003310:	4b1e      	ldr	r3, [pc, #120]	@ (800338c <HAL_RCC_OscConfig+0x508>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a1d      	ldr	r2, [pc, #116]	@ (800338c <HAL_RCC_OscConfig+0x508>)
 8003316:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800331a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800331c:	f7fd fd5a 	bl	8000dd4 <HAL_GetTick>
 8003320:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003322:	e008      	b.n	8003336 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003324:	f7fd fd56 	bl	8000dd4 <HAL_GetTick>
 8003328:	4602      	mov	r2, r0
 800332a:	693b      	ldr	r3, [r7, #16]
 800332c:	1ad3      	subs	r3, r2, r3
 800332e:	2b02      	cmp	r3, #2
 8003330:	d901      	bls.n	8003336 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003332:	2303      	movs	r3, #3
 8003334:	e1b8      	b.n	80036a8 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003336:	4b15      	ldr	r3, [pc, #84]	@ (800338c <HAL_RCC_OscConfig+0x508>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800333e:	2b00      	cmp	r3, #0
 8003340:	d0f0      	beq.n	8003324 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	689b      	ldr	r3, [r3, #8]
 8003346:	2b01      	cmp	r3, #1
 8003348:	d108      	bne.n	800335c <HAL_RCC_OscConfig+0x4d8>
 800334a:	4b0f      	ldr	r3, [pc, #60]	@ (8003388 <HAL_RCC_OscConfig+0x504>)
 800334c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003350:	4a0d      	ldr	r2, [pc, #52]	@ (8003388 <HAL_RCC_OscConfig+0x504>)
 8003352:	f043 0301 	orr.w	r3, r3, #1
 8003356:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800335a:	e029      	b.n	80033b0 <HAL_RCC_OscConfig+0x52c>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	689b      	ldr	r3, [r3, #8]
 8003360:	2b05      	cmp	r3, #5
 8003362:	d115      	bne.n	8003390 <HAL_RCC_OscConfig+0x50c>
 8003364:	4b08      	ldr	r3, [pc, #32]	@ (8003388 <HAL_RCC_OscConfig+0x504>)
 8003366:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800336a:	4a07      	ldr	r2, [pc, #28]	@ (8003388 <HAL_RCC_OscConfig+0x504>)
 800336c:	f043 0304 	orr.w	r3, r3, #4
 8003370:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003374:	4b04      	ldr	r3, [pc, #16]	@ (8003388 <HAL_RCC_OscConfig+0x504>)
 8003376:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800337a:	4a03      	ldr	r2, [pc, #12]	@ (8003388 <HAL_RCC_OscConfig+0x504>)
 800337c:	f043 0301 	orr.w	r3, r3, #1
 8003380:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003384:	e014      	b.n	80033b0 <HAL_RCC_OscConfig+0x52c>
 8003386:	bf00      	nop
 8003388:	40021000 	.word	0x40021000
 800338c:	40007000 	.word	0x40007000
 8003390:	4b9d      	ldr	r3, [pc, #628]	@ (8003608 <HAL_RCC_OscConfig+0x784>)
 8003392:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003396:	4a9c      	ldr	r2, [pc, #624]	@ (8003608 <HAL_RCC_OscConfig+0x784>)
 8003398:	f023 0301 	bic.w	r3, r3, #1
 800339c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80033a0:	4b99      	ldr	r3, [pc, #612]	@ (8003608 <HAL_RCC_OscConfig+0x784>)
 80033a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033a6:	4a98      	ldr	r2, [pc, #608]	@ (8003608 <HAL_RCC_OscConfig+0x784>)
 80033a8:	f023 0304 	bic.w	r3, r3, #4
 80033ac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d016      	beq.n	80033e6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033b8:	f7fd fd0c 	bl	8000dd4 <HAL_GetTick>
 80033bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80033be:	e00a      	b.n	80033d6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033c0:	f7fd fd08 	bl	8000dd4 <HAL_GetTick>
 80033c4:	4602      	mov	r2, r0
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	1ad3      	subs	r3, r2, r3
 80033ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d901      	bls.n	80033d6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80033d2:	2303      	movs	r3, #3
 80033d4:	e168      	b.n	80036a8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80033d6:	4b8c      	ldr	r3, [pc, #560]	@ (8003608 <HAL_RCC_OscConfig+0x784>)
 80033d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033dc:	f003 0302 	and.w	r3, r3, #2
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d0ed      	beq.n	80033c0 <HAL_RCC_OscConfig+0x53c>
 80033e4:	e015      	b.n	8003412 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033e6:	f7fd fcf5 	bl	8000dd4 <HAL_GetTick>
 80033ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80033ec:	e00a      	b.n	8003404 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033ee:	f7fd fcf1 	bl	8000dd4 <HAL_GetTick>
 80033f2:	4602      	mov	r2, r0
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	1ad3      	subs	r3, r2, r3
 80033f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d901      	bls.n	8003404 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003400:	2303      	movs	r3, #3
 8003402:	e151      	b.n	80036a8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003404:	4b80      	ldr	r3, [pc, #512]	@ (8003608 <HAL_RCC_OscConfig+0x784>)
 8003406:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800340a:	f003 0302 	and.w	r3, r3, #2
 800340e:	2b00      	cmp	r3, #0
 8003410:	d1ed      	bne.n	80033ee <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003412:	7ffb      	ldrb	r3, [r7, #31]
 8003414:	2b01      	cmp	r3, #1
 8003416:	d105      	bne.n	8003424 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003418:	4b7b      	ldr	r3, [pc, #492]	@ (8003608 <HAL_RCC_OscConfig+0x784>)
 800341a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800341c:	4a7a      	ldr	r2, [pc, #488]	@ (8003608 <HAL_RCC_OscConfig+0x784>)
 800341e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003422:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f003 0320 	and.w	r3, r3, #32
 800342c:	2b00      	cmp	r3, #0
 800342e:	d03c      	beq.n	80034aa <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003434:	2b00      	cmp	r3, #0
 8003436:	d01c      	beq.n	8003472 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003438:	4b73      	ldr	r3, [pc, #460]	@ (8003608 <HAL_RCC_OscConfig+0x784>)
 800343a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800343e:	4a72      	ldr	r2, [pc, #456]	@ (8003608 <HAL_RCC_OscConfig+0x784>)
 8003440:	f043 0301 	orr.w	r3, r3, #1
 8003444:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003448:	f7fd fcc4 	bl	8000dd4 <HAL_GetTick>
 800344c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800344e:	e008      	b.n	8003462 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003450:	f7fd fcc0 	bl	8000dd4 <HAL_GetTick>
 8003454:	4602      	mov	r2, r0
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	1ad3      	subs	r3, r2, r3
 800345a:	2b02      	cmp	r3, #2
 800345c:	d901      	bls.n	8003462 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800345e:	2303      	movs	r3, #3
 8003460:	e122      	b.n	80036a8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003462:	4b69      	ldr	r3, [pc, #420]	@ (8003608 <HAL_RCC_OscConfig+0x784>)
 8003464:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003468:	f003 0302 	and.w	r3, r3, #2
 800346c:	2b00      	cmp	r3, #0
 800346e:	d0ef      	beq.n	8003450 <HAL_RCC_OscConfig+0x5cc>
 8003470:	e01b      	b.n	80034aa <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003472:	4b65      	ldr	r3, [pc, #404]	@ (8003608 <HAL_RCC_OscConfig+0x784>)
 8003474:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003478:	4a63      	ldr	r2, [pc, #396]	@ (8003608 <HAL_RCC_OscConfig+0x784>)
 800347a:	f023 0301 	bic.w	r3, r3, #1
 800347e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003482:	f7fd fca7 	bl	8000dd4 <HAL_GetTick>
 8003486:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003488:	e008      	b.n	800349c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800348a:	f7fd fca3 	bl	8000dd4 <HAL_GetTick>
 800348e:	4602      	mov	r2, r0
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	1ad3      	subs	r3, r2, r3
 8003494:	2b02      	cmp	r3, #2
 8003496:	d901      	bls.n	800349c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003498:	2303      	movs	r3, #3
 800349a:	e105      	b.n	80036a8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800349c:	4b5a      	ldr	r3, [pc, #360]	@ (8003608 <HAL_RCC_OscConfig+0x784>)
 800349e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80034a2:	f003 0302 	and.w	r3, r3, #2
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d1ef      	bne.n	800348a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	f000 80f9 	beq.w	80036a6 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034b8:	2b02      	cmp	r3, #2
 80034ba:	f040 80cf 	bne.w	800365c <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80034be:	4b52      	ldr	r3, [pc, #328]	@ (8003608 <HAL_RCC_OscConfig+0x784>)
 80034c0:	68db      	ldr	r3, [r3, #12]
 80034c2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80034c4:	697b      	ldr	r3, [r7, #20]
 80034c6:	f003 0203 	and.w	r2, r3, #3
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034ce:	429a      	cmp	r2, r3
 80034d0:	d12c      	bne.n	800352c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034dc:	3b01      	subs	r3, #1
 80034de:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80034e0:	429a      	cmp	r2, r3
 80034e2:	d123      	bne.n	800352c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80034e4:	697b      	ldr	r3, [r7, #20]
 80034e6:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034ee:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80034f0:	429a      	cmp	r2, r3
 80034f2:	d11b      	bne.n	800352c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034fe:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003500:	429a      	cmp	r2, r3
 8003502:	d113      	bne.n	800352c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800350e:	085b      	lsrs	r3, r3, #1
 8003510:	3b01      	subs	r3, #1
 8003512:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003514:	429a      	cmp	r2, r3
 8003516:	d109      	bne.n	800352c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003522:	085b      	lsrs	r3, r3, #1
 8003524:	3b01      	subs	r3, #1
 8003526:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003528:	429a      	cmp	r2, r3
 800352a:	d071      	beq.n	8003610 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800352c:	69bb      	ldr	r3, [r7, #24]
 800352e:	2b0c      	cmp	r3, #12
 8003530:	d068      	beq.n	8003604 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003532:	4b35      	ldr	r3, [pc, #212]	@ (8003608 <HAL_RCC_OscConfig+0x784>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800353a:	2b00      	cmp	r3, #0
 800353c:	d105      	bne.n	800354a <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800353e:	4b32      	ldr	r3, [pc, #200]	@ (8003608 <HAL_RCC_OscConfig+0x784>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003546:	2b00      	cmp	r3, #0
 8003548:	d001      	beq.n	800354e <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800354a:	2301      	movs	r3, #1
 800354c:	e0ac      	b.n	80036a8 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800354e:	4b2e      	ldr	r3, [pc, #184]	@ (8003608 <HAL_RCC_OscConfig+0x784>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a2d      	ldr	r2, [pc, #180]	@ (8003608 <HAL_RCC_OscConfig+0x784>)
 8003554:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003558:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800355a:	f7fd fc3b 	bl	8000dd4 <HAL_GetTick>
 800355e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003560:	e008      	b.n	8003574 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003562:	f7fd fc37 	bl	8000dd4 <HAL_GetTick>
 8003566:	4602      	mov	r2, r0
 8003568:	693b      	ldr	r3, [r7, #16]
 800356a:	1ad3      	subs	r3, r2, r3
 800356c:	2b02      	cmp	r3, #2
 800356e:	d901      	bls.n	8003574 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8003570:	2303      	movs	r3, #3
 8003572:	e099      	b.n	80036a8 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003574:	4b24      	ldr	r3, [pc, #144]	@ (8003608 <HAL_RCC_OscConfig+0x784>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800357c:	2b00      	cmp	r3, #0
 800357e:	d1f0      	bne.n	8003562 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003580:	4b21      	ldr	r3, [pc, #132]	@ (8003608 <HAL_RCC_OscConfig+0x784>)
 8003582:	68da      	ldr	r2, [r3, #12]
 8003584:	4b21      	ldr	r3, [pc, #132]	@ (800360c <HAL_RCC_OscConfig+0x788>)
 8003586:	4013      	ands	r3, r2
 8003588:	687a      	ldr	r2, [r7, #4]
 800358a:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800358c:	687a      	ldr	r2, [r7, #4]
 800358e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003590:	3a01      	subs	r2, #1
 8003592:	0112      	lsls	r2, r2, #4
 8003594:	4311      	orrs	r1, r2
 8003596:	687a      	ldr	r2, [r7, #4]
 8003598:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800359a:	0212      	lsls	r2, r2, #8
 800359c:	4311      	orrs	r1, r2
 800359e:	687a      	ldr	r2, [r7, #4]
 80035a0:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80035a2:	0852      	lsrs	r2, r2, #1
 80035a4:	3a01      	subs	r2, #1
 80035a6:	0552      	lsls	r2, r2, #21
 80035a8:	4311      	orrs	r1, r2
 80035aa:	687a      	ldr	r2, [r7, #4]
 80035ac:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80035ae:	0852      	lsrs	r2, r2, #1
 80035b0:	3a01      	subs	r2, #1
 80035b2:	0652      	lsls	r2, r2, #25
 80035b4:	4311      	orrs	r1, r2
 80035b6:	687a      	ldr	r2, [r7, #4]
 80035b8:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80035ba:	06d2      	lsls	r2, r2, #27
 80035bc:	430a      	orrs	r2, r1
 80035be:	4912      	ldr	r1, [pc, #72]	@ (8003608 <HAL_RCC_OscConfig+0x784>)
 80035c0:	4313      	orrs	r3, r2
 80035c2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80035c4:	4b10      	ldr	r3, [pc, #64]	@ (8003608 <HAL_RCC_OscConfig+0x784>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a0f      	ldr	r2, [pc, #60]	@ (8003608 <HAL_RCC_OscConfig+0x784>)
 80035ca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80035ce:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80035d0:	4b0d      	ldr	r3, [pc, #52]	@ (8003608 <HAL_RCC_OscConfig+0x784>)
 80035d2:	68db      	ldr	r3, [r3, #12]
 80035d4:	4a0c      	ldr	r2, [pc, #48]	@ (8003608 <HAL_RCC_OscConfig+0x784>)
 80035d6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80035da:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80035dc:	f7fd fbfa 	bl	8000dd4 <HAL_GetTick>
 80035e0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035e2:	e008      	b.n	80035f6 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035e4:	f7fd fbf6 	bl	8000dd4 <HAL_GetTick>
 80035e8:	4602      	mov	r2, r0
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	1ad3      	subs	r3, r2, r3
 80035ee:	2b02      	cmp	r3, #2
 80035f0:	d901      	bls.n	80035f6 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80035f2:	2303      	movs	r3, #3
 80035f4:	e058      	b.n	80036a8 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035f6:	4b04      	ldr	r3, [pc, #16]	@ (8003608 <HAL_RCC_OscConfig+0x784>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d0f0      	beq.n	80035e4 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003602:	e050      	b.n	80036a6 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003604:	2301      	movs	r3, #1
 8003606:	e04f      	b.n	80036a8 <HAL_RCC_OscConfig+0x824>
 8003608:	40021000 	.word	0x40021000
 800360c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003610:	4b27      	ldr	r3, [pc, #156]	@ (80036b0 <HAL_RCC_OscConfig+0x82c>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003618:	2b00      	cmp	r3, #0
 800361a:	d144      	bne.n	80036a6 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800361c:	4b24      	ldr	r3, [pc, #144]	@ (80036b0 <HAL_RCC_OscConfig+0x82c>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a23      	ldr	r2, [pc, #140]	@ (80036b0 <HAL_RCC_OscConfig+0x82c>)
 8003622:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003626:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003628:	4b21      	ldr	r3, [pc, #132]	@ (80036b0 <HAL_RCC_OscConfig+0x82c>)
 800362a:	68db      	ldr	r3, [r3, #12]
 800362c:	4a20      	ldr	r2, [pc, #128]	@ (80036b0 <HAL_RCC_OscConfig+0x82c>)
 800362e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003632:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003634:	f7fd fbce 	bl	8000dd4 <HAL_GetTick>
 8003638:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800363a:	e008      	b.n	800364e <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800363c:	f7fd fbca 	bl	8000dd4 <HAL_GetTick>
 8003640:	4602      	mov	r2, r0
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	1ad3      	subs	r3, r2, r3
 8003646:	2b02      	cmp	r3, #2
 8003648:	d901      	bls.n	800364e <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 800364a:	2303      	movs	r3, #3
 800364c:	e02c      	b.n	80036a8 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800364e:	4b18      	ldr	r3, [pc, #96]	@ (80036b0 <HAL_RCC_OscConfig+0x82c>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003656:	2b00      	cmp	r3, #0
 8003658:	d0f0      	beq.n	800363c <HAL_RCC_OscConfig+0x7b8>
 800365a:	e024      	b.n	80036a6 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800365c:	69bb      	ldr	r3, [r7, #24]
 800365e:	2b0c      	cmp	r3, #12
 8003660:	d01f      	beq.n	80036a2 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003662:	4b13      	ldr	r3, [pc, #76]	@ (80036b0 <HAL_RCC_OscConfig+0x82c>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a12      	ldr	r2, [pc, #72]	@ (80036b0 <HAL_RCC_OscConfig+0x82c>)
 8003668:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800366c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800366e:	f7fd fbb1 	bl	8000dd4 <HAL_GetTick>
 8003672:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003674:	e008      	b.n	8003688 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003676:	f7fd fbad 	bl	8000dd4 <HAL_GetTick>
 800367a:	4602      	mov	r2, r0
 800367c:	693b      	ldr	r3, [r7, #16]
 800367e:	1ad3      	subs	r3, r2, r3
 8003680:	2b02      	cmp	r3, #2
 8003682:	d901      	bls.n	8003688 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8003684:	2303      	movs	r3, #3
 8003686:	e00f      	b.n	80036a8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003688:	4b09      	ldr	r3, [pc, #36]	@ (80036b0 <HAL_RCC_OscConfig+0x82c>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003690:	2b00      	cmp	r3, #0
 8003692:	d1f0      	bne.n	8003676 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003694:	4b06      	ldr	r3, [pc, #24]	@ (80036b0 <HAL_RCC_OscConfig+0x82c>)
 8003696:	68da      	ldr	r2, [r3, #12]
 8003698:	4905      	ldr	r1, [pc, #20]	@ (80036b0 <HAL_RCC_OscConfig+0x82c>)
 800369a:	4b06      	ldr	r3, [pc, #24]	@ (80036b4 <HAL_RCC_OscConfig+0x830>)
 800369c:	4013      	ands	r3, r2
 800369e:	60cb      	str	r3, [r1, #12]
 80036a0:	e001      	b.n	80036a6 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	e000      	b.n	80036a8 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 80036a6:	2300      	movs	r3, #0
}
 80036a8:	4618      	mov	r0, r3
 80036aa:	3720      	adds	r7, #32
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bd80      	pop	{r7, pc}
 80036b0:	40021000 	.word	0x40021000
 80036b4:	feeefffc 	.word	0xfeeefffc

080036b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b084      	sub	sp, #16
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
 80036c0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d101      	bne.n	80036cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036c8:	2301      	movs	r3, #1
 80036ca:	e0e7      	b.n	800389c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80036cc:	4b75      	ldr	r3, [pc, #468]	@ (80038a4 <HAL_RCC_ClockConfig+0x1ec>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f003 0307 	and.w	r3, r3, #7
 80036d4:	683a      	ldr	r2, [r7, #0]
 80036d6:	429a      	cmp	r2, r3
 80036d8:	d910      	bls.n	80036fc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036da:	4b72      	ldr	r3, [pc, #456]	@ (80038a4 <HAL_RCC_ClockConfig+0x1ec>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f023 0207 	bic.w	r2, r3, #7
 80036e2:	4970      	ldr	r1, [pc, #448]	@ (80038a4 <HAL_RCC_ClockConfig+0x1ec>)
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	4313      	orrs	r3, r2
 80036e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036ea:	4b6e      	ldr	r3, [pc, #440]	@ (80038a4 <HAL_RCC_ClockConfig+0x1ec>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f003 0307 	and.w	r3, r3, #7
 80036f2:	683a      	ldr	r2, [r7, #0]
 80036f4:	429a      	cmp	r2, r3
 80036f6:	d001      	beq.n	80036fc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80036f8:	2301      	movs	r3, #1
 80036fa:	e0cf      	b.n	800389c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f003 0302 	and.w	r3, r3, #2
 8003704:	2b00      	cmp	r3, #0
 8003706:	d010      	beq.n	800372a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	689a      	ldr	r2, [r3, #8]
 800370c:	4b66      	ldr	r3, [pc, #408]	@ (80038a8 <HAL_RCC_ClockConfig+0x1f0>)
 800370e:	689b      	ldr	r3, [r3, #8]
 8003710:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003714:	429a      	cmp	r2, r3
 8003716:	d908      	bls.n	800372a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003718:	4b63      	ldr	r3, [pc, #396]	@ (80038a8 <HAL_RCC_ClockConfig+0x1f0>)
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	689b      	ldr	r3, [r3, #8]
 8003724:	4960      	ldr	r1, [pc, #384]	@ (80038a8 <HAL_RCC_ClockConfig+0x1f0>)
 8003726:	4313      	orrs	r3, r2
 8003728:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f003 0301 	and.w	r3, r3, #1
 8003732:	2b00      	cmp	r3, #0
 8003734:	d04c      	beq.n	80037d0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	2b03      	cmp	r3, #3
 800373c:	d107      	bne.n	800374e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800373e:	4b5a      	ldr	r3, [pc, #360]	@ (80038a8 <HAL_RCC_ClockConfig+0x1f0>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003746:	2b00      	cmp	r3, #0
 8003748:	d121      	bne.n	800378e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800374a:	2301      	movs	r3, #1
 800374c:	e0a6      	b.n	800389c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	2b02      	cmp	r3, #2
 8003754:	d107      	bne.n	8003766 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003756:	4b54      	ldr	r3, [pc, #336]	@ (80038a8 <HAL_RCC_ClockConfig+0x1f0>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800375e:	2b00      	cmp	r3, #0
 8003760:	d115      	bne.n	800378e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003762:	2301      	movs	r3, #1
 8003764:	e09a      	b.n	800389c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d107      	bne.n	800377e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800376e:	4b4e      	ldr	r3, [pc, #312]	@ (80038a8 <HAL_RCC_ClockConfig+0x1f0>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f003 0302 	and.w	r3, r3, #2
 8003776:	2b00      	cmp	r3, #0
 8003778:	d109      	bne.n	800378e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	e08e      	b.n	800389c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800377e:	4b4a      	ldr	r3, [pc, #296]	@ (80038a8 <HAL_RCC_ClockConfig+0x1f0>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003786:	2b00      	cmp	r3, #0
 8003788:	d101      	bne.n	800378e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	e086      	b.n	800389c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800378e:	4b46      	ldr	r3, [pc, #280]	@ (80038a8 <HAL_RCC_ClockConfig+0x1f0>)
 8003790:	689b      	ldr	r3, [r3, #8]
 8003792:	f023 0203 	bic.w	r2, r3, #3
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	4943      	ldr	r1, [pc, #268]	@ (80038a8 <HAL_RCC_ClockConfig+0x1f0>)
 800379c:	4313      	orrs	r3, r2
 800379e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037a0:	f7fd fb18 	bl	8000dd4 <HAL_GetTick>
 80037a4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037a6:	e00a      	b.n	80037be <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037a8:	f7fd fb14 	bl	8000dd4 <HAL_GetTick>
 80037ac:	4602      	mov	r2, r0
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	1ad3      	subs	r3, r2, r3
 80037b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d901      	bls.n	80037be <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80037ba:	2303      	movs	r3, #3
 80037bc:	e06e      	b.n	800389c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037be:	4b3a      	ldr	r3, [pc, #232]	@ (80038a8 <HAL_RCC_ClockConfig+0x1f0>)
 80037c0:	689b      	ldr	r3, [r3, #8]
 80037c2:	f003 020c 	and.w	r2, r3, #12
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	009b      	lsls	r3, r3, #2
 80037cc:	429a      	cmp	r2, r3
 80037ce:	d1eb      	bne.n	80037a8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f003 0302 	and.w	r3, r3, #2
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d010      	beq.n	80037fe <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	689a      	ldr	r2, [r3, #8]
 80037e0:	4b31      	ldr	r3, [pc, #196]	@ (80038a8 <HAL_RCC_ClockConfig+0x1f0>)
 80037e2:	689b      	ldr	r3, [r3, #8]
 80037e4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80037e8:	429a      	cmp	r2, r3
 80037ea:	d208      	bcs.n	80037fe <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037ec:	4b2e      	ldr	r3, [pc, #184]	@ (80038a8 <HAL_RCC_ClockConfig+0x1f0>)
 80037ee:	689b      	ldr	r3, [r3, #8]
 80037f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	689b      	ldr	r3, [r3, #8]
 80037f8:	492b      	ldr	r1, [pc, #172]	@ (80038a8 <HAL_RCC_ClockConfig+0x1f0>)
 80037fa:	4313      	orrs	r3, r2
 80037fc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80037fe:	4b29      	ldr	r3, [pc, #164]	@ (80038a4 <HAL_RCC_ClockConfig+0x1ec>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f003 0307 	and.w	r3, r3, #7
 8003806:	683a      	ldr	r2, [r7, #0]
 8003808:	429a      	cmp	r2, r3
 800380a:	d210      	bcs.n	800382e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800380c:	4b25      	ldr	r3, [pc, #148]	@ (80038a4 <HAL_RCC_ClockConfig+0x1ec>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f023 0207 	bic.w	r2, r3, #7
 8003814:	4923      	ldr	r1, [pc, #140]	@ (80038a4 <HAL_RCC_ClockConfig+0x1ec>)
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	4313      	orrs	r3, r2
 800381a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800381c:	4b21      	ldr	r3, [pc, #132]	@ (80038a4 <HAL_RCC_ClockConfig+0x1ec>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f003 0307 	and.w	r3, r3, #7
 8003824:	683a      	ldr	r2, [r7, #0]
 8003826:	429a      	cmp	r2, r3
 8003828:	d001      	beq.n	800382e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	e036      	b.n	800389c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f003 0304 	and.w	r3, r3, #4
 8003836:	2b00      	cmp	r3, #0
 8003838:	d008      	beq.n	800384c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800383a:	4b1b      	ldr	r3, [pc, #108]	@ (80038a8 <HAL_RCC_ClockConfig+0x1f0>)
 800383c:	689b      	ldr	r3, [r3, #8]
 800383e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	68db      	ldr	r3, [r3, #12]
 8003846:	4918      	ldr	r1, [pc, #96]	@ (80038a8 <HAL_RCC_ClockConfig+0x1f0>)
 8003848:	4313      	orrs	r3, r2
 800384a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f003 0308 	and.w	r3, r3, #8
 8003854:	2b00      	cmp	r3, #0
 8003856:	d009      	beq.n	800386c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003858:	4b13      	ldr	r3, [pc, #76]	@ (80038a8 <HAL_RCC_ClockConfig+0x1f0>)
 800385a:	689b      	ldr	r3, [r3, #8]
 800385c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	691b      	ldr	r3, [r3, #16]
 8003864:	00db      	lsls	r3, r3, #3
 8003866:	4910      	ldr	r1, [pc, #64]	@ (80038a8 <HAL_RCC_ClockConfig+0x1f0>)
 8003868:	4313      	orrs	r3, r2
 800386a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800386c:	f000 f824 	bl	80038b8 <HAL_RCC_GetSysClockFreq>
 8003870:	4602      	mov	r2, r0
 8003872:	4b0d      	ldr	r3, [pc, #52]	@ (80038a8 <HAL_RCC_ClockConfig+0x1f0>)
 8003874:	689b      	ldr	r3, [r3, #8]
 8003876:	091b      	lsrs	r3, r3, #4
 8003878:	f003 030f 	and.w	r3, r3, #15
 800387c:	490b      	ldr	r1, [pc, #44]	@ (80038ac <HAL_RCC_ClockConfig+0x1f4>)
 800387e:	5ccb      	ldrb	r3, [r1, r3]
 8003880:	f003 031f 	and.w	r3, r3, #31
 8003884:	fa22 f303 	lsr.w	r3, r2, r3
 8003888:	4a09      	ldr	r2, [pc, #36]	@ (80038b0 <HAL_RCC_ClockConfig+0x1f8>)
 800388a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800388c:	4b09      	ldr	r3, [pc, #36]	@ (80038b4 <HAL_RCC_ClockConfig+0x1fc>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4618      	mov	r0, r3
 8003892:	f7fd fa4f 	bl	8000d34 <HAL_InitTick>
 8003896:	4603      	mov	r3, r0
 8003898:	72fb      	strb	r3, [r7, #11]

  return status;
 800389a:	7afb      	ldrb	r3, [r7, #11]
}
 800389c:	4618      	mov	r0, r3
 800389e:	3710      	adds	r7, #16
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bd80      	pop	{r7, pc}
 80038a4:	40022000 	.word	0x40022000
 80038a8:	40021000 	.word	0x40021000
 80038ac:	0800b900 	.word	0x0800b900
 80038b0:	20000000 	.word	0x20000000
 80038b4:	20000004 	.word	0x20000004

080038b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038b8:	b480      	push	{r7}
 80038ba:	b089      	sub	sp, #36	@ 0x24
 80038bc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80038be:	2300      	movs	r3, #0
 80038c0:	61fb      	str	r3, [r7, #28]
 80038c2:	2300      	movs	r3, #0
 80038c4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80038c6:	4b3e      	ldr	r3, [pc, #248]	@ (80039c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80038c8:	689b      	ldr	r3, [r3, #8]
 80038ca:	f003 030c 	and.w	r3, r3, #12
 80038ce:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80038d0:	4b3b      	ldr	r3, [pc, #236]	@ (80039c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80038d2:	68db      	ldr	r3, [r3, #12]
 80038d4:	f003 0303 	and.w	r3, r3, #3
 80038d8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d005      	beq.n	80038ec <HAL_RCC_GetSysClockFreq+0x34>
 80038e0:	693b      	ldr	r3, [r7, #16]
 80038e2:	2b0c      	cmp	r3, #12
 80038e4:	d121      	bne.n	800392a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	2b01      	cmp	r3, #1
 80038ea:	d11e      	bne.n	800392a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80038ec:	4b34      	ldr	r3, [pc, #208]	@ (80039c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f003 0308 	and.w	r3, r3, #8
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d107      	bne.n	8003908 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80038f8:	4b31      	ldr	r3, [pc, #196]	@ (80039c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80038fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80038fe:	0a1b      	lsrs	r3, r3, #8
 8003900:	f003 030f 	and.w	r3, r3, #15
 8003904:	61fb      	str	r3, [r7, #28]
 8003906:	e005      	b.n	8003914 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003908:	4b2d      	ldr	r3, [pc, #180]	@ (80039c0 <HAL_RCC_GetSysClockFreq+0x108>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	091b      	lsrs	r3, r3, #4
 800390e:	f003 030f 	and.w	r3, r3, #15
 8003912:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003914:	4a2b      	ldr	r2, [pc, #172]	@ (80039c4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003916:	69fb      	ldr	r3, [r7, #28]
 8003918:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800391c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d10d      	bne.n	8003940 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003924:	69fb      	ldr	r3, [r7, #28]
 8003926:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003928:	e00a      	b.n	8003940 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800392a:	693b      	ldr	r3, [r7, #16]
 800392c:	2b04      	cmp	r3, #4
 800392e:	d102      	bne.n	8003936 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003930:	4b25      	ldr	r3, [pc, #148]	@ (80039c8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003932:	61bb      	str	r3, [r7, #24]
 8003934:	e004      	b.n	8003940 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	2b08      	cmp	r3, #8
 800393a:	d101      	bne.n	8003940 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800393c:	4b23      	ldr	r3, [pc, #140]	@ (80039cc <HAL_RCC_GetSysClockFreq+0x114>)
 800393e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	2b0c      	cmp	r3, #12
 8003944:	d134      	bne.n	80039b0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003946:	4b1e      	ldr	r3, [pc, #120]	@ (80039c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003948:	68db      	ldr	r3, [r3, #12]
 800394a:	f003 0303 	and.w	r3, r3, #3
 800394e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	2b02      	cmp	r3, #2
 8003954:	d003      	beq.n	800395e <HAL_RCC_GetSysClockFreq+0xa6>
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	2b03      	cmp	r3, #3
 800395a:	d003      	beq.n	8003964 <HAL_RCC_GetSysClockFreq+0xac>
 800395c:	e005      	b.n	800396a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800395e:	4b1a      	ldr	r3, [pc, #104]	@ (80039c8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003960:	617b      	str	r3, [r7, #20]
      break;
 8003962:	e005      	b.n	8003970 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003964:	4b19      	ldr	r3, [pc, #100]	@ (80039cc <HAL_RCC_GetSysClockFreq+0x114>)
 8003966:	617b      	str	r3, [r7, #20]
      break;
 8003968:	e002      	b.n	8003970 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800396a:	69fb      	ldr	r3, [r7, #28]
 800396c:	617b      	str	r3, [r7, #20]
      break;
 800396e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003970:	4b13      	ldr	r3, [pc, #76]	@ (80039c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003972:	68db      	ldr	r3, [r3, #12]
 8003974:	091b      	lsrs	r3, r3, #4
 8003976:	f003 0307 	and.w	r3, r3, #7
 800397a:	3301      	adds	r3, #1
 800397c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800397e:	4b10      	ldr	r3, [pc, #64]	@ (80039c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003980:	68db      	ldr	r3, [r3, #12]
 8003982:	0a1b      	lsrs	r3, r3, #8
 8003984:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003988:	697a      	ldr	r2, [r7, #20]
 800398a:	fb03 f202 	mul.w	r2, r3, r2
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	fbb2 f3f3 	udiv	r3, r2, r3
 8003994:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003996:	4b0a      	ldr	r3, [pc, #40]	@ (80039c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003998:	68db      	ldr	r3, [r3, #12]
 800399a:	0e5b      	lsrs	r3, r3, #25
 800399c:	f003 0303 	and.w	r3, r3, #3
 80039a0:	3301      	adds	r3, #1
 80039a2:	005b      	lsls	r3, r3, #1
 80039a4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80039a6:	697a      	ldr	r2, [r7, #20]
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80039ae:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80039b0:	69bb      	ldr	r3, [r7, #24]
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	3724      	adds	r7, #36	@ 0x24
 80039b6:	46bd      	mov	sp, r7
 80039b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039bc:	4770      	bx	lr
 80039be:	bf00      	nop
 80039c0:	40021000 	.word	0x40021000
 80039c4:	0800b918 	.word	0x0800b918
 80039c8:	00f42400 	.word	0x00f42400
 80039cc:	007a1200 	.word	0x007a1200

080039d0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039d0:	b480      	push	{r7}
 80039d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80039d4:	4b03      	ldr	r3, [pc, #12]	@ (80039e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80039d6:	681b      	ldr	r3, [r3, #0]
}
 80039d8:	4618      	mov	r0, r3
 80039da:	46bd      	mov	sp, r7
 80039dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e0:	4770      	bx	lr
 80039e2:	bf00      	nop
 80039e4:	20000000 	.word	0x20000000

080039e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80039ec:	f7ff fff0 	bl	80039d0 <HAL_RCC_GetHCLKFreq>
 80039f0:	4602      	mov	r2, r0
 80039f2:	4b06      	ldr	r3, [pc, #24]	@ (8003a0c <HAL_RCC_GetPCLK1Freq+0x24>)
 80039f4:	689b      	ldr	r3, [r3, #8]
 80039f6:	0a1b      	lsrs	r3, r3, #8
 80039f8:	f003 0307 	and.w	r3, r3, #7
 80039fc:	4904      	ldr	r1, [pc, #16]	@ (8003a10 <HAL_RCC_GetPCLK1Freq+0x28>)
 80039fe:	5ccb      	ldrb	r3, [r1, r3]
 8003a00:	f003 031f 	and.w	r3, r3, #31
 8003a04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	bd80      	pop	{r7, pc}
 8003a0c:	40021000 	.word	0x40021000
 8003a10:	0800b910 	.word	0x0800b910

08003a14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003a18:	f7ff ffda 	bl	80039d0 <HAL_RCC_GetHCLKFreq>
 8003a1c:	4602      	mov	r2, r0
 8003a1e:	4b06      	ldr	r3, [pc, #24]	@ (8003a38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a20:	689b      	ldr	r3, [r3, #8]
 8003a22:	0adb      	lsrs	r3, r3, #11
 8003a24:	f003 0307 	and.w	r3, r3, #7
 8003a28:	4904      	ldr	r1, [pc, #16]	@ (8003a3c <HAL_RCC_GetPCLK2Freq+0x28>)
 8003a2a:	5ccb      	ldrb	r3, [r1, r3]
 8003a2c:	f003 031f 	and.w	r3, r3, #31
 8003a30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a34:	4618      	mov	r0, r3
 8003a36:	bd80      	pop	{r7, pc}
 8003a38:	40021000 	.word	0x40021000
 8003a3c:	0800b910 	.word	0x0800b910

08003a40 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b086      	sub	sp, #24
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003a48:	2300      	movs	r3, #0
 8003a4a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003a4c:	4b2a      	ldr	r3, [pc, #168]	@ (8003af8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a50:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d003      	beq.n	8003a60 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003a58:	f7ff f990 	bl	8002d7c <HAL_PWREx_GetVoltageRange>
 8003a5c:	6178      	str	r0, [r7, #20]
 8003a5e:	e014      	b.n	8003a8a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003a60:	4b25      	ldr	r3, [pc, #148]	@ (8003af8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a64:	4a24      	ldr	r2, [pc, #144]	@ (8003af8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a66:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a6a:	6593      	str	r3, [r2, #88]	@ 0x58
 8003a6c:	4b22      	ldr	r3, [pc, #136]	@ (8003af8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a70:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a74:	60fb      	str	r3, [r7, #12]
 8003a76:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003a78:	f7ff f980 	bl	8002d7c <HAL_PWREx_GetVoltageRange>
 8003a7c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003a7e:	4b1e      	ldr	r3, [pc, #120]	@ (8003af8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a82:	4a1d      	ldr	r2, [pc, #116]	@ (8003af8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a84:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003a88:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003a8a:	697b      	ldr	r3, [r7, #20]
 8003a8c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003a90:	d10b      	bne.n	8003aaa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2b80      	cmp	r3, #128	@ 0x80
 8003a96:	d919      	bls.n	8003acc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2ba0      	cmp	r3, #160	@ 0xa0
 8003a9c:	d902      	bls.n	8003aa4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003a9e:	2302      	movs	r3, #2
 8003aa0:	613b      	str	r3, [r7, #16]
 8003aa2:	e013      	b.n	8003acc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	613b      	str	r3, [r7, #16]
 8003aa8:	e010      	b.n	8003acc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2b80      	cmp	r3, #128	@ 0x80
 8003aae:	d902      	bls.n	8003ab6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003ab0:	2303      	movs	r3, #3
 8003ab2:	613b      	str	r3, [r7, #16]
 8003ab4:	e00a      	b.n	8003acc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2b80      	cmp	r3, #128	@ 0x80
 8003aba:	d102      	bne.n	8003ac2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003abc:	2302      	movs	r3, #2
 8003abe:	613b      	str	r3, [r7, #16]
 8003ac0:	e004      	b.n	8003acc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2b70      	cmp	r3, #112	@ 0x70
 8003ac6:	d101      	bne.n	8003acc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003ac8:	2301      	movs	r3, #1
 8003aca:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003acc:	4b0b      	ldr	r3, [pc, #44]	@ (8003afc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f023 0207 	bic.w	r2, r3, #7
 8003ad4:	4909      	ldr	r1, [pc, #36]	@ (8003afc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003ad6:	693b      	ldr	r3, [r7, #16]
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003adc:	4b07      	ldr	r3, [pc, #28]	@ (8003afc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f003 0307 	and.w	r3, r3, #7
 8003ae4:	693a      	ldr	r2, [r7, #16]
 8003ae6:	429a      	cmp	r2, r3
 8003ae8:	d001      	beq.n	8003aee <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
 8003aec:	e000      	b.n	8003af0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003aee:	2300      	movs	r3, #0
}
 8003af0:	4618      	mov	r0, r3
 8003af2:	3718      	adds	r7, #24
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bd80      	pop	{r7, pc}
 8003af8:	40021000 	.word	0x40021000
 8003afc:	40022000 	.word	0x40022000

08003b00 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b086      	sub	sp, #24
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003b08:	2300      	movs	r3, #0
 8003b0a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d041      	beq.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003b20:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003b24:	d02a      	beq.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003b26:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003b2a:	d824      	bhi.n	8003b76 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003b2c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003b30:	d008      	beq.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003b32:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003b36:	d81e      	bhi.n	8003b76 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d00a      	beq.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003b3c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003b40:	d010      	beq.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003b42:	e018      	b.n	8003b76 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003b44:	4b86      	ldr	r3, [pc, #536]	@ (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b46:	68db      	ldr	r3, [r3, #12]
 8003b48:	4a85      	ldr	r2, [pc, #532]	@ (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b4a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b4e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003b50:	e015      	b.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	3304      	adds	r3, #4
 8003b56:	2100      	movs	r1, #0
 8003b58:	4618      	mov	r0, r3
 8003b5a:	f000 fadd 	bl	8004118 <RCCEx_PLLSAI1_Config>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003b62:	e00c      	b.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	3320      	adds	r3, #32
 8003b68:	2100      	movs	r1, #0
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	f000 fbc6 	bl	80042fc <RCCEx_PLLSAI2_Config>
 8003b70:	4603      	mov	r3, r0
 8003b72:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003b74:	e003      	b.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b76:	2301      	movs	r3, #1
 8003b78:	74fb      	strb	r3, [r7, #19]
      break;
 8003b7a:	e000      	b.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003b7c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b7e:	7cfb      	ldrb	r3, [r7, #19]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d10b      	bne.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003b84:	4b76      	ldr	r3, [pc, #472]	@ (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b8a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003b92:	4973      	ldr	r1, [pc, #460]	@ (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b94:	4313      	orrs	r3, r2
 8003b96:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003b9a:	e001      	b.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b9c:	7cfb      	ldrb	r3, [r7, #19]
 8003b9e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d041      	beq.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003bb0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003bb4:	d02a      	beq.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003bb6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003bba:	d824      	bhi.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003bbc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003bc0:	d008      	beq.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003bc2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003bc6:	d81e      	bhi.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d00a      	beq.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003bcc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003bd0:	d010      	beq.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003bd2:	e018      	b.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003bd4:	4b62      	ldr	r3, [pc, #392]	@ (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bd6:	68db      	ldr	r3, [r3, #12]
 8003bd8:	4a61      	ldr	r2, [pc, #388]	@ (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bda:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003bde:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003be0:	e015      	b.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	3304      	adds	r3, #4
 8003be6:	2100      	movs	r1, #0
 8003be8:	4618      	mov	r0, r3
 8003bea:	f000 fa95 	bl	8004118 <RCCEx_PLLSAI1_Config>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003bf2:	e00c      	b.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	3320      	adds	r3, #32
 8003bf8:	2100      	movs	r1, #0
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f000 fb7e 	bl	80042fc <RCCEx_PLLSAI2_Config>
 8003c00:	4603      	mov	r3, r0
 8003c02:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003c04:	e003      	b.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c06:	2301      	movs	r3, #1
 8003c08:	74fb      	strb	r3, [r7, #19]
      break;
 8003c0a:	e000      	b.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003c0c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c0e:	7cfb      	ldrb	r3, [r7, #19]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d10b      	bne.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003c14:	4b52      	ldr	r3, [pc, #328]	@ (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c1a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003c22:	494f      	ldr	r1, [pc, #316]	@ (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c24:	4313      	orrs	r3, r2
 8003c26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003c2a:	e001      	b.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c2c:	7cfb      	ldrb	r3, [r7, #19]
 8003c2e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	f000 80a0 	beq.w	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c3e:	2300      	movs	r3, #0
 8003c40:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003c42:	4b47      	ldr	r3, [pc, #284]	@ (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d101      	bne.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003c4e:	2301      	movs	r3, #1
 8003c50:	e000      	b.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003c52:	2300      	movs	r3, #0
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d00d      	beq.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c58:	4b41      	ldr	r3, [pc, #260]	@ (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c5c:	4a40      	ldr	r2, [pc, #256]	@ (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c5e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c62:	6593      	str	r3, [r2, #88]	@ 0x58
 8003c64:	4b3e      	ldr	r3, [pc, #248]	@ (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c68:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c6c:	60bb      	str	r3, [r7, #8]
 8003c6e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c70:	2301      	movs	r3, #1
 8003c72:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c74:	4b3b      	ldr	r3, [pc, #236]	@ (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a3a      	ldr	r2, [pc, #232]	@ (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003c7a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c7e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003c80:	f7fd f8a8 	bl	8000dd4 <HAL_GetTick>
 8003c84:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003c86:	e009      	b.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c88:	f7fd f8a4 	bl	8000dd4 <HAL_GetTick>
 8003c8c:	4602      	mov	r2, r0
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	1ad3      	subs	r3, r2, r3
 8003c92:	2b02      	cmp	r3, #2
 8003c94:	d902      	bls.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003c96:	2303      	movs	r3, #3
 8003c98:	74fb      	strb	r3, [r7, #19]
        break;
 8003c9a:	e005      	b.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003c9c:	4b31      	ldr	r3, [pc, #196]	@ (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d0ef      	beq.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003ca8:	7cfb      	ldrb	r3, [r7, #19]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d15c      	bne.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003cae:	4b2c      	ldr	r3, [pc, #176]	@ (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cb4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003cb8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d01f      	beq.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cc6:	697a      	ldr	r2, [r7, #20]
 8003cc8:	429a      	cmp	r2, r3
 8003cca:	d019      	beq.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003ccc:	4b24      	ldr	r3, [pc, #144]	@ (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cd2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003cd6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003cd8:	4b21      	ldr	r3, [pc, #132]	@ (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cde:	4a20      	ldr	r2, [pc, #128]	@ (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ce0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ce4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003ce8:	4b1d      	ldr	r3, [pc, #116]	@ (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cee:	4a1c      	ldr	r2, [pc, #112]	@ (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cf0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003cf4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003cf8:	4a19      	ldr	r2, [pc, #100]	@ (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	f003 0301 	and.w	r3, r3, #1
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d016      	beq.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d0a:	f7fd f863 	bl	8000dd4 <HAL_GetTick>
 8003d0e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d10:	e00b      	b.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d12:	f7fd f85f 	bl	8000dd4 <HAL_GetTick>
 8003d16:	4602      	mov	r2, r0
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	1ad3      	subs	r3, r2, r3
 8003d1c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d902      	bls.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003d24:	2303      	movs	r3, #3
 8003d26:	74fb      	strb	r3, [r7, #19]
            break;
 8003d28:	e006      	b.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d2a:	4b0d      	ldr	r3, [pc, #52]	@ (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d30:	f003 0302 	and.w	r3, r3, #2
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d0ec      	beq.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003d38:	7cfb      	ldrb	r3, [r7, #19]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d10c      	bne.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d3e:	4b08      	ldr	r3, [pc, #32]	@ (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d44:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d4e:	4904      	ldr	r1, [pc, #16]	@ (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d50:	4313      	orrs	r3, r2
 8003d52:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003d56:	e009      	b.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003d58:	7cfb      	ldrb	r3, [r7, #19]
 8003d5a:	74bb      	strb	r3, [r7, #18]
 8003d5c:	e006      	b.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003d5e:	bf00      	nop
 8003d60:	40021000 	.word	0x40021000
 8003d64:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d68:	7cfb      	ldrb	r3, [r7, #19]
 8003d6a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d6c:	7c7b      	ldrb	r3, [r7, #17]
 8003d6e:	2b01      	cmp	r3, #1
 8003d70:	d105      	bne.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d72:	4ba6      	ldr	r3, [pc, #664]	@ (800400c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003d74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d76:	4aa5      	ldr	r2, [pc, #660]	@ (800400c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003d78:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003d7c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f003 0301 	and.w	r3, r3, #1
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d00a      	beq.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003d8a:	4ba0      	ldr	r3, [pc, #640]	@ (800400c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003d8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d90:	f023 0203 	bic.w	r2, r3, #3
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d98:	499c      	ldr	r1, [pc, #624]	@ (800400c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f003 0302 	and.w	r3, r3, #2
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d00a      	beq.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003dac:	4b97      	ldr	r3, [pc, #604]	@ (800400c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003dae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003db2:	f023 020c 	bic.w	r2, r3, #12
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003dba:	4994      	ldr	r1, [pc, #592]	@ (800400c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f003 0304 	and.w	r3, r3, #4
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d00a      	beq.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003dce:	4b8f      	ldr	r3, [pc, #572]	@ (800400c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003dd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dd4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ddc:	498b      	ldr	r1, [pc, #556]	@ (800400c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003dde:	4313      	orrs	r3, r2
 8003de0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f003 0308 	and.w	r3, r3, #8
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d00a      	beq.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003df0:	4b86      	ldr	r3, [pc, #536]	@ (800400c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003df2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003df6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dfe:	4983      	ldr	r1, [pc, #524]	@ (800400c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003e00:	4313      	orrs	r3, r2
 8003e02:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f003 0310 	and.w	r3, r3, #16
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d00a      	beq.n	8003e28 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003e12:	4b7e      	ldr	r3, [pc, #504]	@ (800400c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003e14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e18:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e20:	497a      	ldr	r1, [pc, #488]	@ (800400c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003e22:	4313      	orrs	r3, r2
 8003e24:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f003 0320 	and.w	r3, r3, #32
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d00a      	beq.n	8003e4a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003e34:	4b75      	ldr	r3, [pc, #468]	@ (800400c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003e36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e3a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e42:	4972      	ldr	r1, [pc, #456]	@ (800400c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003e44:	4313      	orrs	r3, r2
 8003e46:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d00a      	beq.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003e56:	4b6d      	ldr	r3, [pc, #436]	@ (800400c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003e58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e5c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e64:	4969      	ldr	r1, [pc, #420]	@ (800400c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003e66:	4313      	orrs	r3, r2
 8003e68:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d00a      	beq.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003e78:	4b64      	ldr	r3, [pc, #400]	@ (800400c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003e7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e7e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003e86:	4961      	ldr	r1, [pc, #388]	@ (800400c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d00a      	beq.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003e9a:	4b5c      	ldr	r3, [pc, #368]	@ (800400c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003e9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ea0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ea8:	4958      	ldr	r1, [pc, #352]	@ (800400c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d00a      	beq.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003ebc:	4b53      	ldr	r3, [pc, #332]	@ (800400c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003ebe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ec2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003eca:	4950      	ldr	r1, [pc, #320]	@ (800400c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d00a      	beq.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003ede:	4b4b      	ldr	r3, [pc, #300]	@ (800400c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003ee0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ee4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003eec:	4947      	ldr	r1, [pc, #284]	@ (800400c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d00a      	beq.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003f00:	4b42      	ldr	r3, [pc, #264]	@ (800400c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003f02:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003f06:	f023 0203 	bic.w	r2, r3, #3
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f0e:	493f      	ldr	r1, [pc, #252]	@ (800400c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003f10:	4313      	orrs	r3, r2
 8003f12:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d028      	beq.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003f22:	4b3a      	ldr	r3, [pc, #232]	@ (800400c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003f24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f28:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f30:	4936      	ldr	r1, [pc, #216]	@ (800400c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003f32:	4313      	orrs	r3, r2
 8003f34:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f3c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003f40:	d106      	bne.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f42:	4b32      	ldr	r3, [pc, #200]	@ (800400c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003f44:	68db      	ldr	r3, [r3, #12]
 8003f46:	4a31      	ldr	r2, [pc, #196]	@ (800400c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003f48:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003f4c:	60d3      	str	r3, [r2, #12]
 8003f4e:	e011      	b.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f54:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003f58:	d10c      	bne.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	3304      	adds	r3, #4
 8003f5e:	2101      	movs	r1, #1
 8003f60:	4618      	mov	r0, r3
 8003f62:	f000 f8d9 	bl	8004118 <RCCEx_PLLSAI1_Config>
 8003f66:	4603      	mov	r3, r0
 8003f68:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003f6a:	7cfb      	ldrb	r3, [r7, #19]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d001      	beq.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 8003f70:	7cfb      	ldrb	r3, [r7, #19]
 8003f72:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d028      	beq.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003f80:	4b22      	ldr	r3, [pc, #136]	@ (800400c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003f82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f86:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f8e:	491f      	ldr	r1, [pc, #124]	@ (800400c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003f90:	4313      	orrs	r3, r2
 8003f92:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f9a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003f9e:	d106      	bne.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003fa0:	4b1a      	ldr	r3, [pc, #104]	@ (800400c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003fa2:	68db      	ldr	r3, [r3, #12]
 8003fa4:	4a19      	ldr	r2, [pc, #100]	@ (800400c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003fa6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003faa:	60d3      	str	r3, [r2, #12]
 8003fac:	e011      	b.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003fb2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003fb6:	d10c      	bne.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	3304      	adds	r3, #4
 8003fbc:	2101      	movs	r1, #1
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	f000 f8aa 	bl	8004118 <RCCEx_PLLSAI1_Config>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003fc8:	7cfb      	ldrb	r3, [r7, #19]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d001      	beq.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 8003fce:	7cfb      	ldrb	r3, [r7, #19]
 8003fd0:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d02a      	beq.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003fde:	4b0b      	ldr	r3, [pc, #44]	@ (800400c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003fe0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fe4:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003fec:	4907      	ldr	r1, [pc, #28]	@ (800400c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003ff8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003ffc:	d108      	bne.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ffe:	4b03      	ldr	r3, [pc, #12]	@ (800400c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004000:	68db      	ldr	r3, [r3, #12]
 8004002:	4a02      	ldr	r2, [pc, #8]	@ (800400c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004004:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004008:	60d3      	str	r3, [r2, #12]
 800400a:	e013      	b.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0x534>
 800400c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004014:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004018:	d10c      	bne.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	3304      	adds	r3, #4
 800401e:	2101      	movs	r1, #1
 8004020:	4618      	mov	r0, r3
 8004022:	f000 f879 	bl	8004118 <RCCEx_PLLSAI1_Config>
 8004026:	4603      	mov	r3, r0
 8004028:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800402a:	7cfb      	ldrb	r3, [r7, #19]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d001      	beq.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 8004030:	7cfb      	ldrb	r3, [r7, #19]
 8004032:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800403c:	2b00      	cmp	r3, #0
 800403e:	d02f      	beq.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004040:	4b2c      	ldr	r3, [pc, #176]	@ (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8004042:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004046:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800404e:	4929      	ldr	r1, [pc, #164]	@ (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8004050:	4313      	orrs	r3, r2
 8004052:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800405a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800405e:	d10d      	bne.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	3304      	adds	r3, #4
 8004064:	2102      	movs	r1, #2
 8004066:	4618      	mov	r0, r3
 8004068:	f000 f856 	bl	8004118 <RCCEx_PLLSAI1_Config>
 800406c:	4603      	mov	r3, r0
 800406e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004070:	7cfb      	ldrb	r3, [r7, #19]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d014      	beq.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8004076:	7cfb      	ldrb	r3, [r7, #19]
 8004078:	74bb      	strb	r3, [r7, #18]
 800407a:	e011      	b.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004080:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004084:	d10c      	bne.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	3320      	adds	r3, #32
 800408a:	2102      	movs	r1, #2
 800408c:	4618      	mov	r0, r3
 800408e:	f000 f935 	bl	80042fc <RCCEx_PLLSAI2_Config>
 8004092:	4603      	mov	r3, r0
 8004094:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004096:	7cfb      	ldrb	r3, [r7, #19]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d001      	beq.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 800409c:	7cfb      	ldrb	r3, [r7, #19]
 800409e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d00b      	beq.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80040ac:	4b11      	ldr	r3, [pc, #68]	@ (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80040ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040b2:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80040bc:	490d      	ldr	r1, [pc, #52]	@ (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80040be:	4313      	orrs	r3, r2
 80040c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d00b      	beq.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80040d0:	4b08      	ldr	r3, [pc, #32]	@ (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80040d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040d6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80040e0:	4904      	ldr	r1, [pc, #16]	@ (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80040e2:	4313      	orrs	r3, r2
 80040e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80040e8:	7cbb      	ldrb	r3, [r7, #18]
}
 80040ea:	4618      	mov	r0, r3
 80040ec:	3718      	adds	r7, #24
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bd80      	pop	{r7, pc}
 80040f2:	bf00      	nop
 80040f4:	40021000 	.word	0x40021000

080040f8 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80040f8:	b480      	push	{r7}
 80040fa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80040fc:	4b05      	ldr	r3, [pc, #20]	@ (8004114 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a04      	ldr	r2, [pc, #16]	@ (8004114 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004102:	f043 0304 	orr.w	r3, r3, #4
 8004106:	6013      	str	r3, [r2, #0]
}
 8004108:	bf00      	nop
 800410a:	46bd      	mov	sp, r7
 800410c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004110:	4770      	bx	lr
 8004112:	bf00      	nop
 8004114:	40021000 	.word	0x40021000

08004118 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b084      	sub	sp, #16
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
 8004120:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004122:	2300      	movs	r3, #0
 8004124:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004126:	4b74      	ldr	r3, [pc, #464]	@ (80042f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004128:	68db      	ldr	r3, [r3, #12]
 800412a:	f003 0303 	and.w	r3, r3, #3
 800412e:	2b00      	cmp	r3, #0
 8004130:	d018      	beq.n	8004164 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004132:	4b71      	ldr	r3, [pc, #452]	@ (80042f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004134:	68db      	ldr	r3, [r3, #12]
 8004136:	f003 0203 	and.w	r2, r3, #3
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	429a      	cmp	r2, r3
 8004140:	d10d      	bne.n	800415e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
       ||
 8004146:	2b00      	cmp	r3, #0
 8004148:	d009      	beq.n	800415e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800414a:	4b6b      	ldr	r3, [pc, #428]	@ (80042f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800414c:	68db      	ldr	r3, [r3, #12]
 800414e:	091b      	lsrs	r3, r3, #4
 8004150:	f003 0307 	and.w	r3, r3, #7
 8004154:	1c5a      	adds	r2, r3, #1
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	685b      	ldr	r3, [r3, #4]
       ||
 800415a:	429a      	cmp	r2, r3
 800415c:	d047      	beq.n	80041ee <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800415e:	2301      	movs	r3, #1
 8004160:	73fb      	strb	r3, [r7, #15]
 8004162:	e044      	b.n	80041ee <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	2b03      	cmp	r3, #3
 800416a:	d018      	beq.n	800419e <RCCEx_PLLSAI1_Config+0x86>
 800416c:	2b03      	cmp	r3, #3
 800416e:	d825      	bhi.n	80041bc <RCCEx_PLLSAI1_Config+0xa4>
 8004170:	2b01      	cmp	r3, #1
 8004172:	d002      	beq.n	800417a <RCCEx_PLLSAI1_Config+0x62>
 8004174:	2b02      	cmp	r3, #2
 8004176:	d009      	beq.n	800418c <RCCEx_PLLSAI1_Config+0x74>
 8004178:	e020      	b.n	80041bc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800417a:	4b5f      	ldr	r3, [pc, #380]	@ (80042f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f003 0302 	and.w	r3, r3, #2
 8004182:	2b00      	cmp	r3, #0
 8004184:	d11d      	bne.n	80041c2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004186:	2301      	movs	r3, #1
 8004188:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800418a:	e01a      	b.n	80041c2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800418c:	4b5a      	ldr	r3, [pc, #360]	@ (80042f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004194:	2b00      	cmp	r3, #0
 8004196:	d116      	bne.n	80041c6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004198:	2301      	movs	r3, #1
 800419a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800419c:	e013      	b.n	80041c6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800419e:	4b56      	ldr	r3, [pc, #344]	@ (80042f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d10f      	bne.n	80041ca <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80041aa:	4b53      	ldr	r3, [pc, #332]	@ (80042f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d109      	bne.n	80041ca <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80041b6:	2301      	movs	r3, #1
 80041b8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80041ba:	e006      	b.n	80041ca <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80041bc:	2301      	movs	r3, #1
 80041be:	73fb      	strb	r3, [r7, #15]
      break;
 80041c0:	e004      	b.n	80041cc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80041c2:	bf00      	nop
 80041c4:	e002      	b.n	80041cc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80041c6:	bf00      	nop
 80041c8:	e000      	b.n	80041cc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80041ca:	bf00      	nop
    }

    if(status == HAL_OK)
 80041cc:	7bfb      	ldrb	r3, [r7, #15]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d10d      	bne.n	80041ee <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80041d2:	4b49      	ldr	r3, [pc, #292]	@ (80042f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80041d4:	68db      	ldr	r3, [r3, #12]
 80041d6:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6819      	ldr	r1, [r3, #0]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	3b01      	subs	r3, #1
 80041e4:	011b      	lsls	r3, r3, #4
 80041e6:	430b      	orrs	r3, r1
 80041e8:	4943      	ldr	r1, [pc, #268]	@ (80042f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80041ea:	4313      	orrs	r3, r2
 80041ec:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80041ee:	7bfb      	ldrb	r3, [r7, #15]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d17c      	bne.n	80042ee <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80041f4:	4b40      	ldr	r3, [pc, #256]	@ (80042f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a3f      	ldr	r2, [pc, #252]	@ (80042f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80041fa:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80041fe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004200:	f7fc fde8 	bl	8000dd4 <HAL_GetTick>
 8004204:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004206:	e009      	b.n	800421c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004208:	f7fc fde4 	bl	8000dd4 <HAL_GetTick>
 800420c:	4602      	mov	r2, r0
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	1ad3      	subs	r3, r2, r3
 8004212:	2b02      	cmp	r3, #2
 8004214:	d902      	bls.n	800421c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004216:	2303      	movs	r3, #3
 8004218:	73fb      	strb	r3, [r7, #15]
        break;
 800421a:	e005      	b.n	8004228 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800421c:	4b36      	ldr	r3, [pc, #216]	@ (80042f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004224:	2b00      	cmp	r3, #0
 8004226:	d1ef      	bne.n	8004208 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004228:	7bfb      	ldrb	r3, [r7, #15]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d15f      	bne.n	80042ee <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d110      	bne.n	8004256 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004234:	4b30      	ldr	r3, [pc, #192]	@ (80042f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004236:	691b      	ldr	r3, [r3, #16]
 8004238:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 800423c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004240:	687a      	ldr	r2, [r7, #4]
 8004242:	6892      	ldr	r2, [r2, #8]
 8004244:	0211      	lsls	r1, r2, #8
 8004246:	687a      	ldr	r2, [r7, #4]
 8004248:	68d2      	ldr	r2, [r2, #12]
 800424a:	06d2      	lsls	r2, r2, #27
 800424c:	430a      	orrs	r2, r1
 800424e:	492a      	ldr	r1, [pc, #168]	@ (80042f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004250:	4313      	orrs	r3, r2
 8004252:	610b      	str	r3, [r1, #16]
 8004254:	e027      	b.n	80042a6 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	2b01      	cmp	r3, #1
 800425a:	d112      	bne.n	8004282 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800425c:	4b26      	ldr	r3, [pc, #152]	@ (80042f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800425e:	691b      	ldr	r3, [r3, #16]
 8004260:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8004264:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004268:	687a      	ldr	r2, [r7, #4]
 800426a:	6892      	ldr	r2, [r2, #8]
 800426c:	0211      	lsls	r1, r2, #8
 800426e:	687a      	ldr	r2, [r7, #4]
 8004270:	6912      	ldr	r2, [r2, #16]
 8004272:	0852      	lsrs	r2, r2, #1
 8004274:	3a01      	subs	r2, #1
 8004276:	0552      	lsls	r2, r2, #21
 8004278:	430a      	orrs	r2, r1
 800427a:	491f      	ldr	r1, [pc, #124]	@ (80042f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800427c:	4313      	orrs	r3, r2
 800427e:	610b      	str	r3, [r1, #16]
 8004280:	e011      	b.n	80042a6 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004282:	4b1d      	ldr	r3, [pc, #116]	@ (80042f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004284:	691b      	ldr	r3, [r3, #16]
 8004286:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800428a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800428e:	687a      	ldr	r2, [r7, #4]
 8004290:	6892      	ldr	r2, [r2, #8]
 8004292:	0211      	lsls	r1, r2, #8
 8004294:	687a      	ldr	r2, [r7, #4]
 8004296:	6952      	ldr	r2, [r2, #20]
 8004298:	0852      	lsrs	r2, r2, #1
 800429a:	3a01      	subs	r2, #1
 800429c:	0652      	lsls	r2, r2, #25
 800429e:	430a      	orrs	r2, r1
 80042a0:	4915      	ldr	r1, [pc, #84]	@ (80042f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80042a2:	4313      	orrs	r3, r2
 80042a4:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80042a6:	4b14      	ldr	r3, [pc, #80]	@ (80042f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4a13      	ldr	r2, [pc, #76]	@ (80042f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80042ac:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80042b0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042b2:	f7fc fd8f 	bl	8000dd4 <HAL_GetTick>
 80042b6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80042b8:	e009      	b.n	80042ce <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80042ba:	f7fc fd8b 	bl	8000dd4 <HAL_GetTick>
 80042be:	4602      	mov	r2, r0
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	1ad3      	subs	r3, r2, r3
 80042c4:	2b02      	cmp	r3, #2
 80042c6:	d902      	bls.n	80042ce <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80042c8:	2303      	movs	r3, #3
 80042ca:	73fb      	strb	r3, [r7, #15]
          break;
 80042cc:	e005      	b.n	80042da <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80042ce:	4b0a      	ldr	r3, [pc, #40]	@ (80042f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d0ef      	beq.n	80042ba <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80042da:	7bfb      	ldrb	r3, [r7, #15]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d106      	bne.n	80042ee <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80042e0:	4b05      	ldr	r3, [pc, #20]	@ (80042f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80042e2:	691a      	ldr	r2, [r3, #16]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	699b      	ldr	r3, [r3, #24]
 80042e8:	4903      	ldr	r1, [pc, #12]	@ (80042f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80042ea:	4313      	orrs	r3, r2
 80042ec:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80042ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80042f0:	4618      	mov	r0, r3
 80042f2:	3710      	adds	r7, #16
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bd80      	pop	{r7, pc}
 80042f8:	40021000 	.word	0x40021000

080042fc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b084      	sub	sp, #16
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
 8004304:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004306:	2300      	movs	r3, #0
 8004308:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800430a:	4b69      	ldr	r3, [pc, #420]	@ (80044b0 <RCCEx_PLLSAI2_Config+0x1b4>)
 800430c:	68db      	ldr	r3, [r3, #12]
 800430e:	f003 0303 	and.w	r3, r3, #3
 8004312:	2b00      	cmp	r3, #0
 8004314:	d018      	beq.n	8004348 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004316:	4b66      	ldr	r3, [pc, #408]	@ (80044b0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004318:	68db      	ldr	r3, [r3, #12]
 800431a:	f003 0203 	and.w	r2, r3, #3
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	429a      	cmp	r2, r3
 8004324:	d10d      	bne.n	8004342 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
       ||
 800432a:	2b00      	cmp	r3, #0
 800432c:	d009      	beq.n	8004342 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800432e:	4b60      	ldr	r3, [pc, #384]	@ (80044b0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004330:	68db      	ldr	r3, [r3, #12]
 8004332:	091b      	lsrs	r3, r3, #4
 8004334:	f003 0307 	and.w	r3, r3, #7
 8004338:	1c5a      	adds	r2, r3, #1
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	685b      	ldr	r3, [r3, #4]
       ||
 800433e:	429a      	cmp	r2, r3
 8004340:	d047      	beq.n	80043d2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004342:	2301      	movs	r3, #1
 8004344:	73fb      	strb	r3, [r7, #15]
 8004346:	e044      	b.n	80043d2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	2b03      	cmp	r3, #3
 800434e:	d018      	beq.n	8004382 <RCCEx_PLLSAI2_Config+0x86>
 8004350:	2b03      	cmp	r3, #3
 8004352:	d825      	bhi.n	80043a0 <RCCEx_PLLSAI2_Config+0xa4>
 8004354:	2b01      	cmp	r3, #1
 8004356:	d002      	beq.n	800435e <RCCEx_PLLSAI2_Config+0x62>
 8004358:	2b02      	cmp	r3, #2
 800435a:	d009      	beq.n	8004370 <RCCEx_PLLSAI2_Config+0x74>
 800435c:	e020      	b.n	80043a0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800435e:	4b54      	ldr	r3, [pc, #336]	@ (80044b0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f003 0302 	and.w	r3, r3, #2
 8004366:	2b00      	cmp	r3, #0
 8004368:	d11d      	bne.n	80043a6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800436a:	2301      	movs	r3, #1
 800436c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800436e:	e01a      	b.n	80043a6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004370:	4b4f      	ldr	r3, [pc, #316]	@ (80044b0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004378:	2b00      	cmp	r3, #0
 800437a:	d116      	bne.n	80043aa <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800437c:	2301      	movs	r3, #1
 800437e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004380:	e013      	b.n	80043aa <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004382:	4b4b      	ldr	r3, [pc, #300]	@ (80044b0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800438a:	2b00      	cmp	r3, #0
 800438c:	d10f      	bne.n	80043ae <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800438e:	4b48      	ldr	r3, [pc, #288]	@ (80044b0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004396:	2b00      	cmp	r3, #0
 8004398:	d109      	bne.n	80043ae <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800439a:	2301      	movs	r3, #1
 800439c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800439e:	e006      	b.n	80043ae <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80043a0:	2301      	movs	r3, #1
 80043a2:	73fb      	strb	r3, [r7, #15]
      break;
 80043a4:	e004      	b.n	80043b0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80043a6:	bf00      	nop
 80043a8:	e002      	b.n	80043b0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80043aa:	bf00      	nop
 80043ac:	e000      	b.n	80043b0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80043ae:	bf00      	nop
    }

    if(status == HAL_OK)
 80043b0:	7bfb      	ldrb	r3, [r7, #15]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d10d      	bne.n	80043d2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80043b6:	4b3e      	ldr	r3, [pc, #248]	@ (80044b0 <RCCEx_PLLSAI2_Config+0x1b4>)
 80043b8:	68db      	ldr	r3, [r3, #12]
 80043ba:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6819      	ldr	r1, [r3, #0]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	3b01      	subs	r3, #1
 80043c8:	011b      	lsls	r3, r3, #4
 80043ca:	430b      	orrs	r3, r1
 80043cc:	4938      	ldr	r1, [pc, #224]	@ (80044b0 <RCCEx_PLLSAI2_Config+0x1b4>)
 80043ce:	4313      	orrs	r3, r2
 80043d0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80043d2:	7bfb      	ldrb	r3, [r7, #15]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d166      	bne.n	80044a6 <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80043d8:	4b35      	ldr	r3, [pc, #212]	@ (80044b0 <RCCEx_PLLSAI2_Config+0x1b4>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a34      	ldr	r2, [pc, #208]	@ (80044b0 <RCCEx_PLLSAI2_Config+0x1b4>)
 80043de:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80043e2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043e4:	f7fc fcf6 	bl	8000dd4 <HAL_GetTick>
 80043e8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80043ea:	e009      	b.n	8004400 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80043ec:	f7fc fcf2 	bl	8000dd4 <HAL_GetTick>
 80043f0:	4602      	mov	r2, r0
 80043f2:	68bb      	ldr	r3, [r7, #8]
 80043f4:	1ad3      	subs	r3, r2, r3
 80043f6:	2b02      	cmp	r3, #2
 80043f8:	d902      	bls.n	8004400 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80043fa:	2303      	movs	r3, #3
 80043fc:	73fb      	strb	r3, [r7, #15]
        break;
 80043fe:	e005      	b.n	800440c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004400:	4b2b      	ldr	r3, [pc, #172]	@ (80044b0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004408:	2b00      	cmp	r3, #0
 800440a:	d1ef      	bne.n	80043ec <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800440c:	7bfb      	ldrb	r3, [r7, #15]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d149      	bne.n	80044a6 <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d110      	bne.n	800443a <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004418:	4b25      	ldr	r3, [pc, #148]	@ (80044b0 <RCCEx_PLLSAI2_Config+0x1b4>)
 800441a:	695b      	ldr	r3, [r3, #20]
 800441c:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8004420:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004424:	687a      	ldr	r2, [r7, #4]
 8004426:	6892      	ldr	r2, [r2, #8]
 8004428:	0211      	lsls	r1, r2, #8
 800442a:	687a      	ldr	r2, [r7, #4]
 800442c:	68d2      	ldr	r2, [r2, #12]
 800442e:	06d2      	lsls	r2, r2, #27
 8004430:	430a      	orrs	r2, r1
 8004432:	491f      	ldr	r1, [pc, #124]	@ (80044b0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004434:	4313      	orrs	r3, r2
 8004436:	614b      	str	r3, [r1, #20]
 8004438:	e011      	b.n	800445e <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800443a:	4b1d      	ldr	r3, [pc, #116]	@ (80044b0 <RCCEx_PLLSAI2_Config+0x1b4>)
 800443c:	695b      	ldr	r3, [r3, #20]
 800443e:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004442:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004446:	687a      	ldr	r2, [r7, #4]
 8004448:	6892      	ldr	r2, [r2, #8]
 800444a:	0211      	lsls	r1, r2, #8
 800444c:	687a      	ldr	r2, [r7, #4]
 800444e:	6912      	ldr	r2, [r2, #16]
 8004450:	0852      	lsrs	r2, r2, #1
 8004452:	3a01      	subs	r2, #1
 8004454:	0652      	lsls	r2, r2, #25
 8004456:	430a      	orrs	r2, r1
 8004458:	4915      	ldr	r1, [pc, #84]	@ (80044b0 <RCCEx_PLLSAI2_Config+0x1b4>)
 800445a:	4313      	orrs	r3, r2
 800445c:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800445e:	4b14      	ldr	r3, [pc, #80]	@ (80044b0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a13      	ldr	r2, [pc, #76]	@ (80044b0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004464:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004468:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800446a:	f7fc fcb3 	bl	8000dd4 <HAL_GetTick>
 800446e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004470:	e009      	b.n	8004486 <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004472:	f7fc fcaf 	bl	8000dd4 <HAL_GetTick>
 8004476:	4602      	mov	r2, r0
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	1ad3      	subs	r3, r2, r3
 800447c:	2b02      	cmp	r3, #2
 800447e:	d902      	bls.n	8004486 <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 8004480:	2303      	movs	r3, #3
 8004482:	73fb      	strb	r3, [r7, #15]
          break;
 8004484:	e005      	b.n	8004492 <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004486:	4b0a      	ldr	r3, [pc, #40]	@ (80044b0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800448e:	2b00      	cmp	r3, #0
 8004490:	d0ef      	beq.n	8004472 <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 8004492:	7bfb      	ldrb	r3, [r7, #15]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d106      	bne.n	80044a6 <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004498:	4b05      	ldr	r3, [pc, #20]	@ (80044b0 <RCCEx_PLLSAI2_Config+0x1b4>)
 800449a:	695a      	ldr	r2, [r3, #20]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	695b      	ldr	r3, [r3, #20]
 80044a0:	4903      	ldr	r1, [pc, #12]	@ (80044b0 <RCCEx_PLLSAI2_Config+0x1b4>)
 80044a2:	4313      	orrs	r3, r2
 80044a4:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80044a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80044a8:	4618      	mov	r0, r3
 80044aa:	3710      	adds	r7, #16
 80044ac:	46bd      	mov	sp, r7
 80044ae:	bd80      	pop	{r7, pc}
 80044b0:	40021000 	.word	0x40021000

080044b4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b082      	sub	sp, #8
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d101      	bne.n	80044c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80044c2:	2301      	movs	r3, #1
 80044c4:	e040      	b.n	8004548 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d106      	bne.n	80044dc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2200      	movs	r2, #0
 80044d2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80044d6:	6878      	ldr	r0, [r7, #4]
 80044d8:	f7fc fa9a 	bl	8000a10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2224      	movs	r2, #36	@ 0x24
 80044e0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	681a      	ldr	r2, [r3, #0]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f022 0201 	bic.w	r2, r2, #1
 80044f0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d002      	beq.n	8004500 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80044fa:	6878      	ldr	r0, [r7, #4]
 80044fc:	f000 fb6a 	bl	8004bd4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004500:	6878      	ldr	r0, [r7, #4]
 8004502:	f000 f8af 	bl	8004664 <UART_SetConfig>
 8004506:	4603      	mov	r3, r0
 8004508:	2b01      	cmp	r3, #1
 800450a:	d101      	bne.n	8004510 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800450c:	2301      	movs	r3, #1
 800450e:	e01b      	b.n	8004548 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	685a      	ldr	r2, [r3, #4]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800451e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	689a      	ldr	r2, [r3, #8]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800452e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	681a      	ldr	r2, [r3, #0]
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f042 0201 	orr.w	r2, r2, #1
 800453e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004540:	6878      	ldr	r0, [r7, #4]
 8004542:	f000 fbe9 	bl	8004d18 <UART_CheckIdleState>
 8004546:	4603      	mov	r3, r0
}
 8004548:	4618      	mov	r0, r3
 800454a:	3708      	adds	r7, #8
 800454c:	46bd      	mov	sp, r7
 800454e:	bd80      	pop	{r7, pc}

08004550 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b08a      	sub	sp, #40	@ 0x28
 8004554:	af02      	add	r7, sp, #8
 8004556:	60f8      	str	r0, [r7, #12]
 8004558:	60b9      	str	r1, [r7, #8]
 800455a:	603b      	str	r3, [r7, #0]
 800455c:	4613      	mov	r3, r2
 800455e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004564:	2b20      	cmp	r3, #32
 8004566:	d177      	bne.n	8004658 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d002      	beq.n	8004574 <HAL_UART_Transmit+0x24>
 800456e:	88fb      	ldrh	r3, [r7, #6]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d101      	bne.n	8004578 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004574:	2301      	movs	r3, #1
 8004576:	e070      	b.n	800465a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	2200      	movs	r2, #0
 800457c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	2221      	movs	r2, #33	@ 0x21
 8004584:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004586:	f7fc fc25 	bl	8000dd4 <HAL_GetTick>
 800458a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	88fa      	ldrh	r2, [r7, #6]
 8004590:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	88fa      	ldrh	r2, [r7, #6]
 8004598:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	689b      	ldr	r3, [r3, #8]
 80045a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80045a4:	d108      	bne.n	80045b8 <HAL_UART_Transmit+0x68>
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	691b      	ldr	r3, [r3, #16]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d104      	bne.n	80045b8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80045ae:	2300      	movs	r3, #0
 80045b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	61bb      	str	r3, [r7, #24]
 80045b6:	e003      	b.n	80045c0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80045bc:	2300      	movs	r3, #0
 80045be:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80045c0:	e02f      	b.n	8004622 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	9300      	str	r3, [sp, #0]
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	2200      	movs	r2, #0
 80045ca:	2180      	movs	r1, #128	@ 0x80
 80045cc:	68f8      	ldr	r0, [r7, #12]
 80045ce:	f000 fc4b 	bl	8004e68 <UART_WaitOnFlagUntilTimeout>
 80045d2:	4603      	mov	r3, r0
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d004      	beq.n	80045e2 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	2220      	movs	r2, #32
 80045dc:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80045de:	2303      	movs	r3, #3
 80045e0:	e03b      	b.n	800465a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80045e2:	69fb      	ldr	r3, [r7, #28]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d10b      	bne.n	8004600 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80045e8:	69bb      	ldr	r3, [r7, #24]
 80045ea:	881a      	ldrh	r2, [r3, #0]
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80045f4:	b292      	uxth	r2, r2
 80045f6:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80045f8:	69bb      	ldr	r3, [r7, #24]
 80045fa:	3302      	adds	r3, #2
 80045fc:	61bb      	str	r3, [r7, #24]
 80045fe:	e007      	b.n	8004610 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004600:	69fb      	ldr	r3, [r7, #28]
 8004602:	781a      	ldrb	r2, [r3, #0]
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800460a:	69fb      	ldr	r3, [r7, #28]
 800460c:	3301      	adds	r3, #1
 800460e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004616:	b29b      	uxth	r3, r3
 8004618:	3b01      	subs	r3, #1
 800461a:	b29a      	uxth	r2, r3
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004628:	b29b      	uxth	r3, r3
 800462a:	2b00      	cmp	r3, #0
 800462c:	d1c9      	bne.n	80045c2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	9300      	str	r3, [sp, #0]
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	2200      	movs	r2, #0
 8004636:	2140      	movs	r1, #64	@ 0x40
 8004638:	68f8      	ldr	r0, [r7, #12]
 800463a:	f000 fc15 	bl	8004e68 <UART_WaitOnFlagUntilTimeout>
 800463e:	4603      	mov	r3, r0
 8004640:	2b00      	cmp	r3, #0
 8004642:	d004      	beq.n	800464e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	2220      	movs	r2, #32
 8004648:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800464a:	2303      	movs	r3, #3
 800464c:	e005      	b.n	800465a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	2220      	movs	r2, #32
 8004652:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004654:	2300      	movs	r3, #0
 8004656:	e000      	b.n	800465a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004658:	2302      	movs	r3, #2
  }
}
 800465a:	4618      	mov	r0, r3
 800465c:	3720      	adds	r7, #32
 800465e:	46bd      	mov	sp, r7
 8004660:	bd80      	pop	{r7, pc}
	...

08004664 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004664:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004668:	b08a      	sub	sp, #40	@ 0x28
 800466a:	af00      	add	r7, sp, #0
 800466c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800466e:	2300      	movs	r3, #0
 8004670:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	689a      	ldr	r2, [r3, #8]
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	691b      	ldr	r3, [r3, #16]
 800467c:	431a      	orrs	r2, r3
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	695b      	ldr	r3, [r3, #20]
 8004682:	431a      	orrs	r2, r3
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	69db      	ldr	r3, [r3, #28]
 8004688:	4313      	orrs	r3, r2
 800468a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	681a      	ldr	r2, [r3, #0]
 8004692:	4ba4      	ldr	r3, [pc, #656]	@ (8004924 <UART_SetConfig+0x2c0>)
 8004694:	4013      	ands	r3, r2
 8004696:	68fa      	ldr	r2, [r7, #12]
 8004698:	6812      	ldr	r2, [r2, #0]
 800469a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800469c:	430b      	orrs	r3, r1
 800469e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	68da      	ldr	r2, [r3, #12]
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	430a      	orrs	r2, r1
 80046b4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	699b      	ldr	r3, [r3, #24]
 80046ba:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a99      	ldr	r2, [pc, #612]	@ (8004928 <UART_SetConfig+0x2c4>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d004      	beq.n	80046d0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	6a1b      	ldr	r3, [r3, #32]
 80046ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80046cc:	4313      	orrs	r3, r2
 80046ce:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	689b      	ldr	r3, [r3, #8]
 80046d6:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80046e0:	430a      	orrs	r2, r1
 80046e2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a90      	ldr	r2, [pc, #576]	@ (800492c <UART_SetConfig+0x2c8>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d126      	bne.n	800473c <UART_SetConfig+0xd8>
 80046ee:	4b90      	ldr	r3, [pc, #576]	@ (8004930 <UART_SetConfig+0x2cc>)
 80046f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046f4:	f003 0303 	and.w	r3, r3, #3
 80046f8:	2b03      	cmp	r3, #3
 80046fa:	d81b      	bhi.n	8004734 <UART_SetConfig+0xd0>
 80046fc:	a201      	add	r2, pc, #4	@ (adr r2, 8004704 <UART_SetConfig+0xa0>)
 80046fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004702:	bf00      	nop
 8004704:	08004715 	.word	0x08004715
 8004708:	08004725 	.word	0x08004725
 800470c:	0800471d 	.word	0x0800471d
 8004710:	0800472d 	.word	0x0800472d
 8004714:	2301      	movs	r3, #1
 8004716:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800471a:	e116      	b.n	800494a <UART_SetConfig+0x2e6>
 800471c:	2302      	movs	r3, #2
 800471e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004722:	e112      	b.n	800494a <UART_SetConfig+0x2e6>
 8004724:	2304      	movs	r3, #4
 8004726:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800472a:	e10e      	b.n	800494a <UART_SetConfig+0x2e6>
 800472c:	2308      	movs	r3, #8
 800472e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004732:	e10a      	b.n	800494a <UART_SetConfig+0x2e6>
 8004734:	2310      	movs	r3, #16
 8004736:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800473a:	e106      	b.n	800494a <UART_SetConfig+0x2e6>
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a7c      	ldr	r2, [pc, #496]	@ (8004934 <UART_SetConfig+0x2d0>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d138      	bne.n	80047b8 <UART_SetConfig+0x154>
 8004746:	4b7a      	ldr	r3, [pc, #488]	@ (8004930 <UART_SetConfig+0x2cc>)
 8004748:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800474c:	f003 030c 	and.w	r3, r3, #12
 8004750:	2b0c      	cmp	r3, #12
 8004752:	d82d      	bhi.n	80047b0 <UART_SetConfig+0x14c>
 8004754:	a201      	add	r2, pc, #4	@ (adr r2, 800475c <UART_SetConfig+0xf8>)
 8004756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800475a:	bf00      	nop
 800475c:	08004791 	.word	0x08004791
 8004760:	080047b1 	.word	0x080047b1
 8004764:	080047b1 	.word	0x080047b1
 8004768:	080047b1 	.word	0x080047b1
 800476c:	080047a1 	.word	0x080047a1
 8004770:	080047b1 	.word	0x080047b1
 8004774:	080047b1 	.word	0x080047b1
 8004778:	080047b1 	.word	0x080047b1
 800477c:	08004799 	.word	0x08004799
 8004780:	080047b1 	.word	0x080047b1
 8004784:	080047b1 	.word	0x080047b1
 8004788:	080047b1 	.word	0x080047b1
 800478c:	080047a9 	.word	0x080047a9
 8004790:	2300      	movs	r3, #0
 8004792:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004796:	e0d8      	b.n	800494a <UART_SetConfig+0x2e6>
 8004798:	2302      	movs	r3, #2
 800479a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800479e:	e0d4      	b.n	800494a <UART_SetConfig+0x2e6>
 80047a0:	2304      	movs	r3, #4
 80047a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80047a6:	e0d0      	b.n	800494a <UART_SetConfig+0x2e6>
 80047a8:	2308      	movs	r3, #8
 80047aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80047ae:	e0cc      	b.n	800494a <UART_SetConfig+0x2e6>
 80047b0:	2310      	movs	r3, #16
 80047b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80047b6:	e0c8      	b.n	800494a <UART_SetConfig+0x2e6>
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a5e      	ldr	r2, [pc, #376]	@ (8004938 <UART_SetConfig+0x2d4>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d125      	bne.n	800480e <UART_SetConfig+0x1aa>
 80047c2:	4b5b      	ldr	r3, [pc, #364]	@ (8004930 <UART_SetConfig+0x2cc>)
 80047c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047c8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80047cc:	2b30      	cmp	r3, #48	@ 0x30
 80047ce:	d016      	beq.n	80047fe <UART_SetConfig+0x19a>
 80047d0:	2b30      	cmp	r3, #48	@ 0x30
 80047d2:	d818      	bhi.n	8004806 <UART_SetConfig+0x1a2>
 80047d4:	2b20      	cmp	r3, #32
 80047d6:	d00a      	beq.n	80047ee <UART_SetConfig+0x18a>
 80047d8:	2b20      	cmp	r3, #32
 80047da:	d814      	bhi.n	8004806 <UART_SetConfig+0x1a2>
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d002      	beq.n	80047e6 <UART_SetConfig+0x182>
 80047e0:	2b10      	cmp	r3, #16
 80047e2:	d008      	beq.n	80047f6 <UART_SetConfig+0x192>
 80047e4:	e00f      	b.n	8004806 <UART_SetConfig+0x1a2>
 80047e6:	2300      	movs	r3, #0
 80047e8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80047ec:	e0ad      	b.n	800494a <UART_SetConfig+0x2e6>
 80047ee:	2302      	movs	r3, #2
 80047f0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80047f4:	e0a9      	b.n	800494a <UART_SetConfig+0x2e6>
 80047f6:	2304      	movs	r3, #4
 80047f8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80047fc:	e0a5      	b.n	800494a <UART_SetConfig+0x2e6>
 80047fe:	2308      	movs	r3, #8
 8004800:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004804:	e0a1      	b.n	800494a <UART_SetConfig+0x2e6>
 8004806:	2310      	movs	r3, #16
 8004808:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800480c:	e09d      	b.n	800494a <UART_SetConfig+0x2e6>
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4a4a      	ldr	r2, [pc, #296]	@ (800493c <UART_SetConfig+0x2d8>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d125      	bne.n	8004864 <UART_SetConfig+0x200>
 8004818:	4b45      	ldr	r3, [pc, #276]	@ (8004930 <UART_SetConfig+0x2cc>)
 800481a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800481e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004822:	2bc0      	cmp	r3, #192	@ 0xc0
 8004824:	d016      	beq.n	8004854 <UART_SetConfig+0x1f0>
 8004826:	2bc0      	cmp	r3, #192	@ 0xc0
 8004828:	d818      	bhi.n	800485c <UART_SetConfig+0x1f8>
 800482a:	2b80      	cmp	r3, #128	@ 0x80
 800482c:	d00a      	beq.n	8004844 <UART_SetConfig+0x1e0>
 800482e:	2b80      	cmp	r3, #128	@ 0x80
 8004830:	d814      	bhi.n	800485c <UART_SetConfig+0x1f8>
 8004832:	2b00      	cmp	r3, #0
 8004834:	d002      	beq.n	800483c <UART_SetConfig+0x1d8>
 8004836:	2b40      	cmp	r3, #64	@ 0x40
 8004838:	d008      	beq.n	800484c <UART_SetConfig+0x1e8>
 800483a:	e00f      	b.n	800485c <UART_SetConfig+0x1f8>
 800483c:	2300      	movs	r3, #0
 800483e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004842:	e082      	b.n	800494a <UART_SetConfig+0x2e6>
 8004844:	2302      	movs	r3, #2
 8004846:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800484a:	e07e      	b.n	800494a <UART_SetConfig+0x2e6>
 800484c:	2304      	movs	r3, #4
 800484e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004852:	e07a      	b.n	800494a <UART_SetConfig+0x2e6>
 8004854:	2308      	movs	r3, #8
 8004856:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800485a:	e076      	b.n	800494a <UART_SetConfig+0x2e6>
 800485c:	2310      	movs	r3, #16
 800485e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004862:	e072      	b.n	800494a <UART_SetConfig+0x2e6>
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a35      	ldr	r2, [pc, #212]	@ (8004940 <UART_SetConfig+0x2dc>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d12a      	bne.n	80048c4 <UART_SetConfig+0x260>
 800486e:	4b30      	ldr	r3, [pc, #192]	@ (8004930 <UART_SetConfig+0x2cc>)
 8004870:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004874:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004878:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800487c:	d01a      	beq.n	80048b4 <UART_SetConfig+0x250>
 800487e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004882:	d81b      	bhi.n	80048bc <UART_SetConfig+0x258>
 8004884:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004888:	d00c      	beq.n	80048a4 <UART_SetConfig+0x240>
 800488a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800488e:	d815      	bhi.n	80048bc <UART_SetConfig+0x258>
 8004890:	2b00      	cmp	r3, #0
 8004892:	d003      	beq.n	800489c <UART_SetConfig+0x238>
 8004894:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004898:	d008      	beq.n	80048ac <UART_SetConfig+0x248>
 800489a:	e00f      	b.n	80048bc <UART_SetConfig+0x258>
 800489c:	2300      	movs	r3, #0
 800489e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80048a2:	e052      	b.n	800494a <UART_SetConfig+0x2e6>
 80048a4:	2302      	movs	r3, #2
 80048a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80048aa:	e04e      	b.n	800494a <UART_SetConfig+0x2e6>
 80048ac:	2304      	movs	r3, #4
 80048ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80048b2:	e04a      	b.n	800494a <UART_SetConfig+0x2e6>
 80048b4:	2308      	movs	r3, #8
 80048b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80048ba:	e046      	b.n	800494a <UART_SetConfig+0x2e6>
 80048bc:	2310      	movs	r3, #16
 80048be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80048c2:	e042      	b.n	800494a <UART_SetConfig+0x2e6>
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a17      	ldr	r2, [pc, #92]	@ (8004928 <UART_SetConfig+0x2c4>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d13a      	bne.n	8004944 <UART_SetConfig+0x2e0>
 80048ce:	4b18      	ldr	r3, [pc, #96]	@ (8004930 <UART_SetConfig+0x2cc>)
 80048d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048d4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80048d8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80048dc:	d01a      	beq.n	8004914 <UART_SetConfig+0x2b0>
 80048de:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80048e2:	d81b      	bhi.n	800491c <UART_SetConfig+0x2b8>
 80048e4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80048e8:	d00c      	beq.n	8004904 <UART_SetConfig+0x2a0>
 80048ea:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80048ee:	d815      	bhi.n	800491c <UART_SetConfig+0x2b8>
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d003      	beq.n	80048fc <UART_SetConfig+0x298>
 80048f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80048f8:	d008      	beq.n	800490c <UART_SetConfig+0x2a8>
 80048fa:	e00f      	b.n	800491c <UART_SetConfig+0x2b8>
 80048fc:	2300      	movs	r3, #0
 80048fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004902:	e022      	b.n	800494a <UART_SetConfig+0x2e6>
 8004904:	2302      	movs	r3, #2
 8004906:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800490a:	e01e      	b.n	800494a <UART_SetConfig+0x2e6>
 800490c:	2304      	movs	r3, #4
 800490e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004912:	e01a      	b.n	800494a <UART_SetConfig+0x2e6>
 8004914:	2308      	movs	r3, #8
 8004916:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800491a:	e016      	b.n	800494a <UART_SetConfig+0x2e6>
 800491c:	2310      	movs	r3, #16
 800491e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004922:	e012      	b.n	800494a <UART_SetConfig+0x2e6>
 8004924:	efff69f3 	.word	0xefff69f3
 8004928:	40008000 	.word	0x40008000
 800492c:	40013800 	.word	0x40013800
 8004930:	40021000 	.word	0x40021000
 8004934:	40004400 	.word	0x40004400
 8004938:	40004800 	.word	0x40004800
 800493c:	40004c00 	.word	0x40004c00
 8004940:	40005000 	.word	0x40005000
 8004944:	2310      	movs	r3, #16
 8004946:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a9f      	ldr	r2, [pc, #636]	@ (8004bcc <UART_SetConfig+0x568>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d17a      	bne.n	8004a4a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004954:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004958:	2b08      	cmp	r3, #8
 800495a:	d824      	bhi.n	80049a6 <UART_SetConfig+0x342>
 800495c:	a201      	add	r2, pc, #4	@ (adr r2, 8004964 <UART_SetConfig+0x300>)
 800495e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004962:	bf00      	nop
 8004964:	08004989 	.word	0x08004989
 8004968:	080049a7 	.word	0x080049a7
 800496c:	08004991 	.word	0x08004991
 8004970:	080049a7 	.word	0x080049a7
 8004974:	08004997 	.word	0x08004997
 8004978:	080049a7 	.word	0x080049a7
 800497c:	080049a7 	.word	0x080049a7
 8004980:	080049a7 	.word	0x080049a7
 8004984:	0800499f 	.word	0x0800499f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004988:	f7ff f82e 	bl	80039e8 <HAL_RCC_GetPCLK1Freq>
 800498c:	61f8      	str	r0, [r7, #28]
        break;
 800498e:	e010      	b.n	80049b2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004990:	4b8f      	ldr	r3, [pc, #572]	@ (8004bd0 <UART_SetConfig+0x56c>)
 8004992:	61fb      	str	r3, [r7, #28]
        break;
 8004994:	e00d      	b.n	80049b2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004996:	f7fe ff8f 	bl	80038b8 <HAL_RCC_GetSysClockFreq>
 800499a:	61f8      	str	r0, [r7, #28]
        break;
 800499c:	e009      	b.n	80049b2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800499e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80049a2:	61fb      	str	r3, [r7, #28]
        break;
 80049a4:	e005      	b.n	80049b2 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80049a6:	2300      	movs	r3, #0
 80049a8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80049aa:	2301      	movs	r3, #1
 80049ac:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80049b0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80049b2:	69fb      	ldr	r3, [r7, #28]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	f000 80fb 	beq.w	8004bb0 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	685a      	ldr	r2, [r3, #4]
 80049be:	4613      	mov	r3, r2
 80049c0:	005b      	lsls	r3, r3, #1
 80049c2:	4413      	add	r3, r2
 80049c4:	69fa      	ldr	r2, [r7, #28]
 80049c6:	429a      	cmp	r2, r3
 80049c8:	d305      	bcc.n	80049d6 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80049d0:	69fa      	ldr	r2, [r7, #28]
 80049d2:	429a      	cmp	r2, r3
 80049d4:	d903      	bls.n	80049de <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80049d6:	2301      	movs	r3, #1
 80049d8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80049dc:	e0e8      	b.n	8004bb0 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80049de:	69fb      	ldr	r3, [r7, #28]
 80049e0:	2200      	movs	r2, #0
 80049e2:	461c      	mov	r4, r3
 80049e4:	4615      	mov	r5, r2
 80049e6:	f04f 0200 	mov.w	r2, #0
 80049ea:	f04f 0300 	mov.w	r3, #0
 80049ee:	022b      	lsls	r3, r5, #8
 80049f0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80049f4:	0222      	lsls	r2, r4, #8
 80049f6:	68f9      	ldr	r1, [r7, #12]
 80049f8:	6849      	ldr	r1, [r1, #4]
 80049fa:	0849      	lsrs	r1, r1, #1
 80049fc:	2000      	movs	r0, #0
 80049fe:	4688      	mov	r8, r1
 8004a00:	4681      	mov	r9, r0
 8004a02:	eb12 0a08 	adds.w	sl, r2, r8
 8004a06:	eb43 0b09 	adc.w	fp, r3, r9
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	685b      	ldr	r3, [r3, #4]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	603b      	str	r3, [r7, #0]
 8004a12:	607a      	str	r2, [r7, #4]
 8004a14:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004a18:	4650      	mov	r0, sl
 8004a1a:	4659      	mov	r1, fp
 8004a1c:	f7fb fc38 	bl	8000290 <__aeabi_uldivmod>
 8004a20:	4602      	mov	r2, r0
 8004a22:	460b      	mov	r3, r1
 8004a24:	4613      	mov	r3, r2
 8004a26:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004a28:	69bb      	ldr	r3, [r7, #24]
 8004a2a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004a2e:	d308      	bcc.n	8004a42 <UART_SetConfig+0x3de>
 8004a30:	69bb      	ldr	r3, [r7, #24]
 8004a32:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004a36:	d204      	bcs.n	8004a42 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	69ba      	ldr	r2, [r7, #24]
 8004a3e:	60da      	str	r2, [r3, #12]
 8004a40:	e0b6      	b.n	8004bb0 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004a42:	2301      	movs	r3, #1
 8004a44:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004a48:	e0b2      	b.n	8004bb0 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	69db      	ldr	r3, [r3, #28]
 8004a4e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004a52:	d15e      	bne.n	8004b12 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004a54:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004a58:	2b08      	cmp	r3, #8
 8004a5a:	d828      	bhi.n	8004aae <UART_SetConfig+0x44a>
 8004a5c:	a201      	add	r2, pc, #4	@ (adr r2, 8004a64 <UART_SetConfig+0x400>)
 8004a5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a62:	bf00      	nop
 8004a64:	08004a89 	.word	0x08004a89
 8004a68:	08004a91 	.word	0x08004a91
 8004a6c:	08004a99 	.word	0x08004a99
 8004a70:	08004aaf 	.word	0x08004aaf
 8004a74:	08004a9f 	.word	0x08004a9f
 8004a78:	08004aaf 	.word	0x08004aaf
 8004a7c:	08004aaf 	.word	0x08004aaf
 8004a80:	08004aaf 	.word	0x08004aaf
 8004a84:	08004aa7 	.word	0x08004aa7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a88:	f7fe ffae 	bl	80039e8 <HAL_RCC_GetPCLK1Freq>
 8004a8c:	61f8      	str	r0, [r7, #28]
        break;
 8004a8e:	e014      	b.n	8004aba <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004a90:	f7fe ffc0 	bl	8003a14 <HAL_RCC_GetPCLK2Freq>
 8004a94:	61f8      	str	r0, [r7, #28]
        break;
 8004a96:	e010      	b.n	8004aba <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a98:	4b4d      	ldr	r3, [pc, #308]	@ (8004bd0 <UART_SetConfig+0x56c>)
 8004a9a:	61fb      	str	r3, [r7, #28]
        break;
 8004a9c:	e00d      	b.n	8004aba <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a9e:	f7fe ff0b 	bl	80038b8 <HAL_RCC_GetSysClockFreq>
 8004aa2:	61f8      	str	r0, [r7, #28]
        break;
 8004aa4:	e009      	b.n	8004aba <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004aa6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004aaa:	61fb      	str	r3, [r7, #28]
        break;
 8004aac:	e005      	b.n	8004aba <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004aae:	2300      	movs	r3, #0
 8004ab0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004ab8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004aba:	69fb      	ldr	r3, [r7, #28]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d077      	beq.n	8004bb0 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004ac0:	69fb      	ldr	r3, [r7, #28]
 8004ac2:	005a      	lsls	r2, r3, #1
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	085b      	lsrs	r3, r3, #1
 8004aca:	441a      	add	r2, r3
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ad4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ad6:	69bb      	ldr	r3, [r7, #24]
 8004ad8:	2b0f      	cmp	r3, #15
 8004ada:	d916      	bls.n	8004b0a <UART_SetConfig+0x4a6>
 8004adc:	69bb      	ldr	r3, [r7, #24]
 8004ade:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ae2:	d212      	bcs.n	8004b0a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004ae4:	69bb      	ldr	r3, [r7, #24]
 8004ae6:	b29b      	uxth	r3, r3
 8004ae8:	f023 030f 	bic.w	r3, r3, #15
 8004aec:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004aee:	69bb      	ldr	r3, [r7, #24]
 8004af0:	085b      	lsrs	r3, r3, #1
 8004af2:	b29b      	uxth	r3, r3
 8004af4:	f003 0307 	and.w	r3, r3, #7
 8004af8:	b29a      	uxth	r2, r3
 8004afa:	8afb      	ldrh	r3, [r7, #22]
 8004afc:	4313      	orrs	r3, r2
 8004afe:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	8afa      	ldrh	r2, [r7, #22]
 8004b06:	60da      	str	r2, [r3, #12]
 8004b08:	e052      	b.n	8004bb0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004b10:	e04e      	b.n	8004bb0 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004b12:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004b16:	2b08      	cmp	r3, #8
 8004b18:	d827      	bhi.n	8004b6a <UART_SetConfig+0x506>
 8004b1a:	a201      	add	r2, pc, #4	@ (adr r2, 8004b20 <UART_SetConfig+0x4bc>)
 8004b1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b20:	08004b45 	.word	0x08004b45
 8004b24:	08004b4d 	.word	0x08004b4d
 8004b28:	08004b55 	.word	0x08004b55
 8004b2c:	08004b6b 	.word	0x08004b6b
 8004b30:	08004b5b 	.word	0x08004b5b
 8004b34:	08004b6b 	.word	0x08004b6b
 8004b38:	08004b6b 	.word	0x08004b6b
 8004b3c:	08004b6b 	.word	0x08004b6b
 8004b40:	08004b63 	.word	0x08004b63
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b44:	f7fe ff50 	bl	80039e8 <HAL_RCC_GetPCLK1Freq>
 8004b48:	61f8      	str	r0, [r7, #28]
        break;
 8004b4a:	e014      	b.n	8004b76 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b4c:	f7fe ff62 	bl	8003a14 <HAL_RCC_GetPCLK2Freq>
 8004b50:	61f8      	str	r0, [r7, #28]
        break;
 8004b52:	e010      	b.n	8004b76 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b54:	4b1e      	ldr	r3, [pc, #120]	@ (8004bd0 <UART_SetConfig+0x56c>)
 8004b56:	61fb      	str	r3, [r7, #28]
        break;
 8004b58:	e00d      	b.n	8004b76 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b5a:	f7fe fead 	bl	80038b8 <HAL_RCC_GetSysClockFreq>
 8004b5e:	61f8      	str	r0, [r7, #28]
        break;
 8004b60:	e009      	b.n	8004b76 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b62:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004b66:	61fb      	str	r3, [r7, #28]
        break;
 8004b68:	e005      	b.n	8004b76 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004b6e:	2301      	movs	r3, #1
 8004b70:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004b74:	bf00      	nop
    }

    if (pclk != 0U)
 8004b76:	69fb      	ldr	r3, [r7, #28]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d019      	beq.n	8004bb0 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	085a      	lsrs	r2, r3, #1
 8004b82:	69fb      	ldr	r3, [r7, #28]
 8004b84:	441a      	add	r2, r3
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	685b      	ldr	r3, [r3, #4]
 8004b8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b8e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b90:	69bb      	ldr	r3, [r7, #24]
 8004b92:	2b0f      	cmp	r3, #15
 8004b94:	d909      	bls.n	8004baa <UART_SetConfig+0x546>
 8004b96:	69bb      	ldr	r3, [r7, #24]
 8004b98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b9c:	d205      	bcs.n	8004baa <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004b9e:	69bb      	ldr	r3, [r7, #24]
 8004ba0:	b29a      	uxth	r2, r3
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	60da      	str	r2, [r3, #12]
 8004ba8:	e002      	b.n	8004bb0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004baa:	2301      	movs	r3, #1
 8004bac:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004bbc:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	3728      	adds	r7, #40	@ 0x28
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004bca:	bf00      	nop
 8004bcc:	40008000 	.word	0x40008000
 8004bd0:	00f42400 	.word	0x00f42400

08004bd4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	b083      	sub	sp, #12
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004be0:	f003 0308 	and.w	r3, r3, #8
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d00a      	beq.n	8004bfe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	430a      	orrs	r2, r1
 8004bfc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c02:	f003 0301 	and.w	r3, r3, #1
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d00a      	beq.n	8004c20 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	685b      	ldr	r3, [r3, #4]
 8004c10:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	430a      	orrs	r2, r1
 8004c1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c24:	f003 0302 	and.w	r3, r3, #2
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d00a      	beq.n	8004c42 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	685b      	ldr	r3, [r3, #4]
 8004c32:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	430a      	orrs	r2, r1
 8004c40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c46:	f003 0304 	and.w	r3, r3, #4
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d00a      	beq.n	8004c64 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	685b      	ldr	r3, [r3, #4]
 8004c54:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	430a      	orrs	r2, r1
 8004c62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c68:	f003 0310 	and.w	r3, r3, #16
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d00a      	beq.n	8004c86 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	689b      	ldr	r3, [r3, #8]
 8004c76:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	430a      	orrs	r2, r1
 8004c84:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c8a:	f003 0320 	and.w	r3, r3, #32
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d00a      	beq.n	8004ca8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	689b      	ldr	r3, [r3, #8]
 8004c98:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	430a      	orrs	r2, r1
 8004ca6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d01a      	beq.n	8004cea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	430a      	orrs	r2, r1
 8004cc8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004cd2:	d10a      	bne.n	8004cea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	685b      	ldr	r3, [r3, #4]
 8004cda:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	430a      	orrs	r2, r1
 8004ce8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d00a      	beq.n	8004d0c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	685b      	ldr	r3, [r3, #4]
 8004cfc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	430a      	orrs	r2, r1
 8004d0a:	605a      	str	r2, [r3, #4]
  }
}
 8004d0c:	bf00      	nop
 8004d0e:	370c      	adds	r7, #12
 8004d10:	46bd      	mov	sp, r7
 8004d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d16:	4770      	bx	lr

08004d18 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b098      	sub	sp, #96	@ 0x60
 8004d1c:	af02      	add	r7, sp, #8
 8004d1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2200      	movs	r2, #0
 8004d24:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004d28:	f7fc f854 	bl	8000dd4 <HAL_GetTick>
 8004d2c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f003 0308 	and.w	r3, r3, #8
 8004d38:	2b08      	cmp	r3, #8
 8004d3a:	d12e      	bne.n	8004d9a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d3c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004d40:	9300      	str	r3, [sp, #0]
 8004d42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004d44:	2200      	movs	r2, #0
 8004d46:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004d4a:	6878      	ldr	r0, [r7, #4]
 8004d4c:	f000 f88c 	bl	8004e68 <UART_WaitOnFlagUntilTimeout>
 8004d50:	4603      	mov	r3, r0
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d021      	beq.n	8004d9a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d5e:	e853 3f00 	ldrex	r3, [r3]
 8004d62:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004d64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d66:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004d6a:	653b      	str	r3, [r7, #80]	@ 0x50
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	461a      	mov	r2, r3
 8004d72:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004d74:	647b      	str	r3, [r7, #68]	@ 0x44
 8004d76:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d78:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004d7a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004d7c:	e841 2300 	strex	r3, r2, [r1]
 8004d80:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004d82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d1e6      	bne.n	8004d56 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2220      	movs	r2, #32
 8004d8c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2200      	movs	r2, #0
 8004d92:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004d96:	2303      	movs	r3, #3
 8004d98:	e062      	b.n	8004e60 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f003 0304 	and.w	r3, r3, #4
 8004da4:	2b04      	cmp	r3, #4
 8004da6:	d149      	bne.n	8004e3c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004da8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004dac:	9300      	str	r3, [sp, #0]
 8004dae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004db0:	2200      	movs	r2, #0
 8004db2:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004db6:	6878      	ldr	r0, [r7, #4]
 8004db8:	f000 f856 	bl	8004e68 <UART_WaitOnFlagUntilTimeout>
 8004dbc:	4603      	mov	r3, r0
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d03c      	beq.n	8004e3c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dca:	e853 3f00 	ldrex	r3, [r3]
 8004dce:	623b      	str	r3, [r7, #32]
   return(result);
 8004dd0:	6a3b      	ldr	r3, [r7, #32]
 8004dd2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004dd6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	461a      	mov	r2, r3
 8004dde:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004de0:	633b      	str	r3, [r7, #48]	@ 0x30
 8004de2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004de4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004de6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004de8:	e841 2300 	strex	r3, r2, [r1]
 8004dec:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004dee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d1e6      	bne.n	8004dc2 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	3308      	adds	r3, #8
 8004dfa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dfc:	693b      	ldr	r3, [r7, #16]
 8004dfe:	e853 3f00 	ldrex	r3, [r3]
 8004e02:	60fb      	str	r3, [r7, #12]
   return(result);
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	f023 0301 	bic.w	r3, r3, #1
 8004e0a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	3308      	adds	r3, #8
 8004e12:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004e14:	61fa      	str	r2, [r7, #28]
 8004e16:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e18:	69b9      	ldr	r1, [r7, #24]
 8004e1a:	69fa      	ldr	r2, [r7, #28]
 8004e1c:	e841 2300 	strex	r3, r2, [r1]
 8004e20:	617b      	str	r3, [r7, #20]
   return(result);
 8004e22:	697b      	ldr	r3, [r7, #20]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d1e5      	bne.n	8004df4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2220      	movs	r2, #32
 8004e2c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2200      	movs	r2, #0
 8004e34:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e38:	2303      	movs	r3, #3
 8004e3a:	e011      	b.n	8004e60 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2220      	movs	r2, #32
 8004e40:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2220      	movs	r2, #32
 8004e46:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2200      	movs	r2, #0
 8004e54:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2200      	movs	r2, #0
 8004e5a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004e5e:	2300      	movs	r3, #0
}
 8004e60:	4618      	mov	r0, r3
 8004e62:	3758      	adds	r7, #88	@ 0x58
 8004e64:	46bd      	mov	sp, r7
 8004e66:	bd80      	pop	{r7, pc}

08004e68 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b084      	sub	sp, #16
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	60f8      	str	r0, [r7, #12]
 8004e70:	60b9      	str	r1, [r7, #8]
 8004e72:	603b      	str	r3, [r7, #0]
 8004e74:	4613      	mov	r3, r2
 8004e76:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e78:	e049      	b.n	8004f0e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e7a:	69bb      	ldr	r3, [r7, #24]
 8004e7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e80:	d045      	beq.n	8004f0e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e82:	f7fb ffa7 	bl	8000dd4 <HAL_GetTick>
 8004e86:	4602      	mov	r2, r0
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	1ad3      	subs	r3, r2, r3
 8004e8c:	69ba      	ldr	r2, [r7, #24]
 8004e8e:	429a      	cmp	r2, r3
 8004e90:	d302      	bcc.n	8004e98 <UART_WaitOnFlagUntilTimeout+0x30>
 8004e92:	69bb      	ldr	r3, [r7, #24]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d101      	bne.n	8004e9c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004e98:	2303      	movs	r3, #3
 8004e9a:	e048      	b.n	8004f2e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f003 0304 	and.w	r3, r3, #4
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d031      	beq.n	8004f0e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	69db      	ldr	r3, [r3, #28]
 8004eb0:	f003 0308 	and.w	r3, r3, #8
 8004eb4:	2b08      	cmp	r3, #8
 8004eb6:	d110      	bne.n	8004eda <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	2208      	movs	r2, #8
 8004ebe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004ec0:	68f8      	ldr	r0, [r7, #12]
 8004ec2:	f000 f838 	bl	8004f36 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	2208      	movs	r2, #8
 8004eca:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	e029      	b.n	8004f2e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	69db      	ldr	r3, [r3, #28]
 8004ee0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004ee4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004ee8:	d111      	bne.n	8004f0e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004ef2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004ef4:	68f8      	ldr	r0, [r7, #12]
 8004ef6:	f000 f81e 	bl	8004f36 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	2220      	movs	r2, #32
 8004efe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	2200      	movs	r2, #0
 8004f06:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004f0a:	2303      	movs	r3, #3
 8004f0c:	e00f      	b.n	8004f2e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	69da      	ldr	r2, [r3, #28]
 8004f14:	68bb      	ldr	r3, [r7, #8]
 8004f16:	4013      	ands	r3, r2
 8004f18:	68ba      	ldr	r2, [r7, #8]
 8004f1a:	429a      	cmp	r2, r3
 8004f1c:	bf0c      	ite	eq
 8004f1e:	2301      	moveq	r3, #1
 8004f20:	2300      	movne	r3, #0
 8004f22:	b2db      	uxtb	r3, r3
 8004f24:	461a      	mov	r2, r3
 8004f26:	79fb      	ldrb	r3, [r7, #7]
 8004f28:	429a      	cmp	r2, r3
 8004f2a:	d0a6      	beq.n	8004e7a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004f2c:	2300      	movs	r3, #0
}
 8004f2e:	4618      	mov	r0, r3
 8004f30:	3710      	adds	r7, #16
 8004f32:	46bd      	mov	sp, r7
 8004f34:	bd80      	pop	{r7, pc}

08004f36 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004f36:	b480      	push	{r7}
 8004f38:	b095      	sub	sp, #84	@ 0x54
 8004f3a:	af00      	add	r7, sp, #0
 8004f3c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f46:	e853 3f00 	ldrex	r3, [r3]
 8004f4a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004f4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f4e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004f52:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	461a      	mov	r2, r3
 8004f5a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004f5c:	643b      	str	r3, [r7, #64]	@ 0x40
 8004f5e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f60:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004f62:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004f64:	e841 2300 	strex	r3, r2, [r1]
 8004f68:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004f6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d1e6      	bne.n	8004f3e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	3308      	adds	r3, #8
 8004f76:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f78:	6a3b      	ldr	r3, [r7, #32]
 8004f7a:	e853 3f00 	ldrex	r3, [r3]
 8004f7e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004f80:	69fb      	ldr	r3, [r7, #28]
 8004f82:	f023 0301 	bic.w	r3, r3, #1
 8004f86:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	3308      	adds	r3, #8
 8004f8e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004f90:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004f92:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f94:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004f96:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004f98:	e841 2300 	strex	r3, r2, [r1]
 8004f9c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004f9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d1e5      	bne.n	8004f70 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004fa8:	2b01      	cmp	r3, #1
 8004faa:	d118      	bne.n	8004fde <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	e853 3f00 	ldrex	r3, [r3]
 8004fb8:	60bb      	str	r3, [r7, #8]
   return(result);
 8004fba:	68bb      	ldr	r3, [r7, #8]
 8004fbc:	f023 0310 	bic.w	r3, r3, #16
 8004fc0:	647b      	str	r3, [r7, #68]	@ 0x44
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	461a      	mov	r2, r3
 8004fc8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004fca:	61bb      	str	r3, [r7, #24]
 8004fcc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fce:	6979      	ldr	r1, [r7, #20]
 8004fd0:	69ba      	ldr	r2, [r7, #24]
 8004fd2:	e841 2300 	strex	r3, r2, [r1]
 8004fd6:	613b      	str	r3, [r7, #16]
   return(result);
 8004fd8:	693b      	ldr	r3, [r7, #16]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d1e6      	bne.n	8004fac <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2220      	movs	r2, #32
 8004fe2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2200      	movs	r2, #0
 8004ff0:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004ff2:	bf00      	nop
 8004ff4:	3754      	adds	r7, #84	@ 0x54
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffc:	4770      	bx	lr

08004ffe <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004ffe:	b084      	sub	sp, #16
 8005000:	b580      	push	{r7, lr}
 8005002:	b084      	sub	sp, #16
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
 8005008:	f107 001c 	add.w	r0, r7, #28
 800500c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	68db      	ldr	r3, [r3, #12]
 8005014:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800501c:	6878      	ldr	r0, [r7, #4]
 800501e:	f000 f9c1 	bl	80053a4 <USB_CoreReset>
 8005022:	4603      	mov	r3, r0
 8005024:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8005026:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005028:	2b00      	cmp	r3, #0
 800502a:	d106      	bne.n	800503a <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005030:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	639a      	str	r2, [r3, #56]	@ 0x38
 8005038:	e005      	b.n	8005046 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800503e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return ret;
 8005046:	7bfb      	ldrb	r3, [r7, #15]
}
 8005048:	4618      	mov	r0, r3
 800504a:	3710      	adds	r7, #16
 800504c:	46bd      	mov	sp, r7
 800504e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005052:	b004      	add	sp, #16
 8005054:	4770      	bx	lr

08005056 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005056:	b480      	push	{r7}
 8005058:	b083      	sub	sp, #12
 800505a:	af00      	add	r7, sp, #0
 800505c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	689b      	ldr	r3, [r3, #8]
 8005062:	f043 0201 	orr.w	r2, r3, #1
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800506a:	2300      	movs	r3, #0
}
 800506c:	4618      	mov	r0, r3
 800506e:	370c      	adds	r7, #12
 8005070:	46bd      	mov	sp, r7
 8005072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005076:	4770      	bx	lr

08005078 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005078:	b480      	push	{r7}
 800507a:	b083      	sub	sp, #12
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	689b      	ldr	r3, [r3, #8]
 8005084:	f023 0201 	bic.w	r2, r3, #1
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800508c:	2300      	movs	r3, #0
}
 800508e:	4618      	mov	r0, r3
 8005090:	370c      	adds	r7, #12
 8005092:	46bd      	mov	sp, r7
 8005094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005098:	4770      	bx	lr

0800509a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 800509a:	b580      	push	{r7, lr}
 800509c:	b084      	sub	sp, #16
 800509e:	af00      	add	r7, sp, #0
 80050a0:	6078      	str	r0, [r7, #4]
 80050a2:	460b      	mov	r3, r1
 80050a4:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80050a6:	2300      	movs	r3, #0
 80050a8:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	68db      	ldr	r3, [r3, #12]
 80050ae:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80050b6:	78fb      	ldrb	r3, [r7, #3]
 80050b8:	2b01      	cmp	r3, #1
 80050ba:	d115      	bne.n	80050e8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	68db      	ldr	r3, [r3, #12]
 80050c0:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80050c8:	2001      	movs	r0, #1
 80050ca:	f7fb fe8f 	bl	8000dec <HAL_Delay>
      ms++;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	3301      	adds	r3, #1
 80050d2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80050d4:	6878      	ldr	r0, [r7, #4]
 80050d6:	f000 f957 	bl	8005388 <USB_GetMode>
 80050da:	4603      	mov	r3, r0
 80050dc:	2b01      	cmp	r3, #1
 80050de:	d01e      	beq.n	800511e <USB_SetCurrentMode+0x84>
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	2b31      	cmp	r3, #49	@ 0x31
 80050e4:	d9f0      	bls.n	80050c8 <USB_SetCurrentMode+0x2e>
 80050e6:	e01a      	b.n	800511e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80050e8:	78fb      	ldrb	r3, [r7, #3]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d115      	bne.n	800511a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	68db      	ldr	r3, [r3, #12]
 80050f2:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80050fa:	2001      	movs	r0, #1
 80050fc:	f7fb fe76 	bl	8000dec <HAL_Delay>
      ms++;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	3301      	adds	r3, #1
 8005104:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005106:	6878      	ldr	r0, [r7, #4]
 8005108:	f000 f93e 	bl	8005388 <USB_GetMode>
 800510c:	4603      	mov	r3, r0
 800510e:	2b00      	cmp	r3, #0
 8005110:	d005      	beq.n	800511e <USB_SetCurrentMode+0x84>
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	2b31      	cmp	r3, #49	@ 0x31
 8005116:	d9f0      	bls.n	80050fa <USB_SetCurrentMode+0x60>
 8005118:	e001      	b.n	800511e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800511a:	2301      	movs	r3, #1
 800511c:	e005      	b.n	800512a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	2b32      	cmp	r3, #50	@ 0x32
 8005122:	d101      	bne.n	8005128 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005124:	2301      	movs	r3, #1
 8005126:	e000      	b.n	800512a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005128:	2300      	movs	r3, #0
}
 800512a:	4618      	mov	r0, r3
 800512c:	3710      	adds	r7, #16
 800512e:	46bd      	mov	sp, r7
 8005130:	bd80      	pop	{r7, pc}
	...

08005134 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005134:	b480      	push	{r7}
 8005136:	b085      	sub	sp, #20
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
 800513c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800513e:	2300      	movs	r3, #0
 8005140:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	3301      	adds	r3, #1
 8005146:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	4a13      	ldr	r2, [pc, #76]	@ (8005198 <USB_FlushTxFifo+0x64>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d901      	bls.n	8005154 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005150:	2303      	movs	r3, #3
 8005152:	e01b      	b.n	800518c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	691b      	ldr	r3, [r3, #16]
 8005158:	2b00      	cmp	r3, #0
 800515a:	daf2      	bge.n	8005142 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800515c:	2300      	movs	r3, #0
 800515e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	019b      	lsls	r3, r3, #6
 8005164:	f043 0220 	orr.w	r2, r3, #32
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	3301      	adds	r3, #1
 8005170:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	4a08      	ldr	r2, [pc, #32]	@ (8005198 <USB_FlushTxFifo+0x64>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d901      	bls.n	800517e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800517a:	2303      	movs	r3, #3
 800517c:	e006      	b.n	800518c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	691b      	ldr	r3, [r3, #16]
 8005182:	f003 0320 	and.w	r3, r3, #32
 8005186:	2b20      	cmp	r3, #32
 8005188:	d0f0      	beq.n	800516c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800518a:	2300      	movs	r3, #0
}
 800518c:	4618      	mov	r0, r3
 800518e:	3714      	adds	r7, #20
 8005190:	46bd      	mov	sp, r7
 8005192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005196:	4770      	bx	lr
 8005198:	00030d40 	.word	0x00030d40

0800519c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800519c:	b480      	push	{r7}
 800519e:	b085      	sub	sp, #20
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80051a4:	2300      	movs	r3, #0
 80051a6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	3301      	adds	r3, #1
 80051ac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	4a11      	ldr	r2, [pc, #68]	@ (80051f8 <USB_FlushRxFifo+0x5c>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d901      	bls.n	80051ba <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80051b6:	2303      	movs	r3, #3
 80051b8:	e018      	b.n	80051ec <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	691b      	ldr	r3, [r3, #16]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	daf2      	bge.n	80051a8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80051c2:	2300      	movs	r3, #0
 80051c4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2210      	movs	r2, #16
 80051ca:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	3301      	adds	r3, #1
 80051d0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	4a08      	ldr	r2, [pc, #32]	@ (80051f8 <USB_FlushRxFifo+0x5c>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d901      	bls.n	80051de <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80051da:	2303      	movs	r3, #3
 80051dc:	e006      	b.n	80051ec <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	691b      	ldr	r3, [r3, #16]
 80051e2:	f003 0310 	and.w	r3, r3, #16
 80051e6:	2b10      	cmp	r3, #16
 80051e8:	d0f0      	beq.n	80051cc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80051ea:	2300      	movs	r3, #0
}
 80051ec:	4618      	mov	r0, r3
 80051ee:	3714      	adds	r7, #20
 80051f0:	46bd      	mov	sp, r7
 80051f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f6:	4770      	bx	lr
 80051f8:	00030d40 	.word	0x00030d40

080051fc <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 80051fc:	b480      	push	{r7}
 80051fe:	b089      	sub	sp, #36	@ 0x24
 8005200:	af00      	add	r7, sp, #0
 8005202:	60f8      	str	r0, [r7, #12]
 8005204:	60b9      	str	r1, [r7, #8]
 8005206:	4611      	mov	r1, r2
 8005208:	461a      	mov	r2, r3
 800520a:	460b      	mov	r3, r1
 800520c:	71fb      	strb	r3, [r7, #7]
 800520e:	4613      	mov	r3, r2
 8005210:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005216:	68bb      	ldr	r3, [r7, #8]
 8005218:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 800521a:	88bb      	ldrh	r3, [r7, #4]
 800521c:	3303      	adds	r3, #3
 800521e:	089b      	lsrs	r3, r3, #2
 8005220:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 8005222:	2300      	movs	r3, #0
 8005224:	61bb      	str	r3, [r7, #24]
 8005226:	e018      	b.n	800525a <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005228:	79fb      	ldrb	r3, [r7, #7]
 800522a:	031a      	lsls	r2, r3, #12
 800522c:	697b      	ldr	r3, [r7, #20]
 800522e:	4413      	add	r3, r2
 8005230:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005234:	461a      	mov	r2, r3
 8005236:	69fb      	ldr	r3, [r7, #28]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	6013      	str	r3, [r2, #0]
    pSrc++;
 800523c:	69fb      	ldr	r3, [r7, #28]
 800523e:	3301      	adds	r3, #1
 8005240:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8005242:	69fb      	ldr	r3, [r7, #28]
 8005244:	3301      	adds	r3, #1
 8005246:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8005248:	69fb      	ldr	r3, [r7, #28]
 800524a:	3301      	adds	r3, #1
 800524c:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800524e:	69fb      	ldr	r3, [r7, #28]
 8005250:	3301      	adds	r3, #1
 8005252:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8005254:	69bb      	ldr	r3, [r7, #24]
 8005256:	3301      	adds	r3, #1
 8005258:	61bb      	str	r3, [r7, #24]
 800525a:	69ba      	ldr	r2, [r7, #24]
 800525c:	693b      	ldr	r3, [r7, #16]
 800525e:	429a      	cmp	r2, r3
 8005260:	d3e2      	bcc.n	8005228 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 8005262:	2300      	movs	r3, #0
}
 8005264:	4618      	mov	r0, r3
 8005266:	3724      	adds	r7, #36	@ 0x24
 8005268:	46bd      	mov	sp, r7
 800526a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526e:	4770      	bx	lr

08005270 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005270:	b480      	push	{r7}
 8005272:	b08b      	sub	sp, #44	@ 0x2c
 8005274:	af00      	add	r7, sp, #0
 8005276:	60f8      	str	r0, [r7, #12]
 8005278:	60b9      	str	r1, [r7, #8]
 800527a:	4613      	mov	r3, r2
 800527c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005282:	68bb      	ldr	r3, [r7, #8]
 8005284:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005286:	88fb      	ldrh	r3, [r7, #6]
 8005288:	089b      	lsrs	r3, r3, #2
 800528a:	b29b      	uxth	r3, r3
 800528c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800528e:	88fb      	ldrh	r3, [r7, #6]
 8005290:	f003 0303 	and.w	r3, r3, #3
 8005294:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005296:	2300      	movs	r3, #0
 8005298:	623b      	str	r3, [r7, #32]
 800529a:	e014      	b.n	80052c6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800529c:	69bb      	ldr	r3, [r7, #24]
 800529e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80052a2:	681a      	ldr	r2, [r3, #0]
 80052a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052a6:	601a      	str	r2, [r3, #0]
    pDest++;
 80052a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052aa:	3301      	adds	r3, #1
 80052ac:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80052ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052b0:	3301      	adds	r3, #1
 80052b2:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80052b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052b6:	3301      	adds	r3, #1
 80052b8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80052ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052bc:	3301      	adds	r3, #1
 80052be:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80052c0:	6a3b      	ldr	r3, [r7, #32]
 80052c2:	3301      	adds	r3, #1
 80052c4:	623b      	str	r3, [r7, #32]
 80052c6:	6a3a      	ldr	r2, [r7, #32]
 80052c8:	697b      	ldr	r3, [r7, #20]
 80052ca:	429a      	cmp	r2, r3
 80052cc:	d3e6      	bcc.n	800529c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80052ce:	8bfb      	ldrh	r3, [r7, #30]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d01e      	beq.n	8005312 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80052d4:	2300      	movs	r3, #0
 80052d6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80052d8:	69bb      	ldr	r3, [r7, #24]
 80052da:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80052de:	461a      	mov	r2, r3
 80052e0:	f107 0310 	add.w	r3, r7, #16
 80052e4:	6812      	ldr	r2, [r2, #0]
 80052e6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80052e8:	693a      	ldr	r2, [r7, #16]
 80052ea:	6a3b      	ldr	r3, [r7, #32]
 80052ec:	b2db      	uxtb	r3, r3
 80052ee:	00db      	lsls	r3, r3, #3
 80052f0:	fa22 f303 	lsr.w	r3, r2, r3
 80052f4:	b2da      	uxtb	r2, r3
 80052f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052f8:	701a      	strb	r2, [r3, #0]
      i++;
 80052fa:	6a3b      	ldr	r3, [r7, #32]
 80052fc:	3301      	adds	r3, #1
 80052fe:	623b      	str	r3, [r7, #32]
      pDest++;
 8005300:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005302:	3301      	adds	r3, #1
 8005304:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8005306:	8bfb      	ldrh	r3, [r7, #30]
 8005308:	3b01      	subs	r3, #1
 800530a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800530c:	8bfb      	ldrh	r3, [r7, #30]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d1ea      	bne.n	80052e8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005312:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005314:	4618      	mov	r0, r3
 8005316:	372c      	adds	r7, #44	@ 0x2c
 8005318:	46bd      	mov	sp, r7
 800531a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531e:	4770      	bx	lr

08005320 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8005320:	b480      	push	{r7}
 8005322:	b085      	sub	sp, #20
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	695b      	ldr	r3, [r3, #20]
 800532c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	699b      	ldr	r3, [r3, #24]
 8005332:	68fa      	ldr	r2, [r7, #12]
 8005334:	4013      	ands	r3, r2
 8005336:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005338:	68fb      	ldr	r3, [r7, #12]
}
 800533a:	4618      	mov	r0, r3
 800533c:	3714      	adds	r7, #20
 800533e:	46bd      	mov	sp, r7
 8005340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005344:	4770      	bx	lr

08005346 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8005346:	b480      	push	{r7}
 8005348:	b085      	sub	sp, #20
 800534a:	af00      	add	r7, sp, #0
 800534c:	6078      	str	r0, [r7, #4]
 800534e:	460b      	mov	r3, r1
 8005350:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8005356:	78fb      	ldrb	r3, [r7, #3]
 8005358:	015a      	lsls	r2, r3, #5
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	4413      	add	r3, r2
 800535e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005362:	689b      	ldr	r3, [r3, #8]
 8005364:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8005366:	78fb      	ldrb	r3, [r7, #3]
 8005368:	015a      	lsls	r2, r3, #5
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	4413      	add	r3, r2
 800536e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005372:	68db      	ldr	r3, [r3, #12]
 8005374:	68ba      	ldr	r2, [r7, #8]
 8005376:	4013      	ands	r3, r2
 8005378:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800537a:	68bb      	ldr	r3, [r7, #8]
}
 800537c:	4618      	mov	r0, r3
 800537e:	3714      	adds	r7, #20
 8005380:	46bd      	mov	sp, r7
 8005382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005386:	4770      	bx	lr

08005388 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005388:	b480      	push	{r7}
 800538a:	b083      	sub	sp, #12
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	695b      	ldr	r3, [r3, #20]
 8005394:	f003 0301 	and.w	r3, r3, #1
}
 8005398:	4618      	mov	r0, r3
 800539a:	370c      	adds	r7, #12
 800539c:	46bd      	mov	sp, r7
 800539e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a2:	4770      	bx	lr

080053a4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80053a4:	b480      	push	{r7}
 80053a6:	b085      	sub	sp, #20
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80053ac:	2300      	movs	r3, #0
 80053ae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	3301      	adds	r3, #1
 80053b4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	4a13      	ldr	r2, [pc, #76]	@ (8005408 <USB_CoreReset+0x64>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d901      	bls.n	80053c2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80053be:	2303      	movs	r3, #3
 80053c0:	e01b      	b.n	80053fa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	691b      	ldr	r3, [r3, #16]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	daf2      	bge.n	80053b0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80053ca:	2300      	movs	r3, #0
 80053cc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	691b      	ldr	r3, [r3, #16]
 80053d2:	f043 0201 	orr.w	r2, r3, #1
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	3301      	adds	r3, #1
 80053de:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	4a09      	ldr	r2, [pc, #36]	@ (8005408 <USB_CoreReset+0x64>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d901      	bls.n	80053ec <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80053e8:	2303      	movs	r3, #3
 80053ea:	e006      	b.n	80053fa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	691b      	ldr	r3, [r3, #16]
 80053f0:	f003 0301 	and.w	r3, r3, #1
 80053f4:	2b01      	cmp	r3, #1
 80053f6:	d0f0      	beq.n	80053da <USB_CoreReset+0x36>

  return HAL_OK;
 80053f8:	2300      	movs	r3, #0
}
 80053fa:	4618      	mov	r0, r3
 80053fc:	3714      	adds	r7, #20
 80053fe:	46bd      	mov	sp, r7
 8005400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005404:	4770      	bx	lr
 8005406:	bf00      	nop
 8005408:	00030d40 	.word	0x00030d40

0800540c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800540c:	b084      	sub	sp, #16
 800540e:	b580      	push	{r7, lr}
 8005410:	b086      	sub	sp, #24
 8005412:	af00      	add	r7, sp, #0
 8005414:	6078      	str	r0, [r7, #4]
 8005416:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800541a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800541e:	2300      	movs	r3, #0
 8005420:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800542c:	461a      	mov	r2, r3
 800542e:	2300      	movs	r3, #0
 8005430:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005436:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005442:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Set default Max speed support */
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	68fa      	ldr	r2, [r7, #12]
 8005454:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005458:	f023 0304 	bic.w	r3, r3, #4
 800545c:	6013      	str	r3, [r2, #0]

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800545e:	2110      	movs	r1, #16
 8005460:	6878      	ldr	r0, [r7, #4]
 8005462:	f7ff fe67 	bl	8005134 <USB_FlushTxFifo>
 8005466:	4603      	mov	r3, r0
 8005468:	2b00      	cmp	r3, #0
 800546a:	d001      	beq.n	8005470 <USB_HostInit+0x64>
  {
    ret = HAL_ERROR;
 800546c:	2301      	movs	r3, #1
 800546e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005470:	6878      	ldr	r0, [r7, #4]
 8005472:	f7ff fe93 	bl	800519c <USB_FlushRxFifo>
 8005476:	4603      	mov	r3, r0
 8005478:	2b00      	cmp	r3, #0
 800547a:	d001      	beq.n	8005480 <USB_HostInit+0x74>
  {
    ret = HAL_ERROR;
 800547c:	2301      	movs	r3, #1
 800547e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005480:	2300      	movs	r3, #0
 8005482:	613b      	str	r3, [r7, #16]
 8005484:	e015      	b.n	80054b2 <USB_HostInit+0xa6>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8005486:	693b      	ldr	r3, [r7, #16]
 8005488:	015a      	lsls	r2, r3, #5
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	4413      	add	r3, r2
 800548e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005492:	461a      	mov	r2, r3
 8005494:	f04f 33ff 	mov.w	r3, #4294967295
 8005498:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800549a:	693b      	ldr	r3, [r7, #16]
 800549c:	015a      	lsls	r2, r3, #5
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	4413      	add	r3, r2
 80054a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80054a6:	461a      	mov	r2, r3
 80054a8:	2300      	movs	r3, #0
 80054aa:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80054ac:	693b      	ldr	r3, [r7, #16]
 80054ae:	3301      	adds	r3, #1
 80054b0:	613b      	str	r3, [r7, #16]
 80054b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054b4:	693a      	ldr	r2, [r7, #16]
 80054b6:	429a      	cmp	r2, r3
 80054b8:	d3e5      	bcc.n	8005486 <USB_HostInit+0x7a>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2200      	movs	r2, #0
 80054be:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	f04f 32ff 	mov.w	r2, #4294967295
 80054c6:	615a      	str	r2, [r3, #20]

  /* set Rx FIFO size */
  USBx->GRXFSIZ  = 0x80U;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2280      	movs	r2, #128	@ 0x80
 80054cc:	625a      	str	r2, [r3, #36]	@ 0x24
  USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	4a0c      	ldr	r2, [pc, #48]	@ (8005504 <USB_HostInit+0xf8>)
 80054d2:	629a      	str	r2, [r3, #40]	@ 0x28
  USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	4a0c      	ldr	r2, [pc, #48]	@ (8005508 <USB_HostInit+0xfc>)
 80054d8:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	699b      	ldr	r3, [r3, #24]
 80054e0:	f043 0210 	orr.w	r2, r3, #16
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	699a      	ldr	r2, [r3, #24]
 80054ec:	4b07      	ldr	r3, [pc, #28]	@ (800550c <USB_HostInit+0x100>)
 80054ee:	4313      	orrs	r3, r2
 80054f0:	687a      	ldr	r2, [r7, #4]
 80054f2:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 80054f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80054f6:	4618      	mov	r0, r3
 80054f8:	3718      	adds	r7, #24
 80054fa:	46bd      	mov	sp, r7
 80054fc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005500:	b004      	add	sp, #16
 8005502:	4770      	bx	lr
 8005504:	00600080 	.word	0x00600080
 8005508:	004000e0 	.word	0x004000e0
 800550c:	a3200008 	.word	0xa3200008

08005510 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005510:	b480      	push	{r7}
 8005512:	b085      	sub	sp, #20
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
 8005518:	460b      	mov	r3, r1
 800551a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	68fa      	ldr	r2, [r7, #12]
 800552a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800552e:	f023 0303 	bic.w	r3, r3, #3
 8005532:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800553a:	681a      	ldr	r2, [r3, #0]
 800553c:	78fb      	ldrb	r3, [r7, #3]
 800553e:	f003 0303 	and.w	r3, r3, #3
 8005542:	68f9      	ldr	r1, [r7, #12]
 8005544:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8005548:	4313      	orrs	r3, r2
 800554a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800554c:	78fb      	ldrb	r3, [r7, #3]
 800554e:	2b01      	cmp	r3, #1
 8005550:	d107      	bne.n	8005562 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005558:	461a      	mov	r2, r3
 800555a:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800555e:	6053      	str	r3, [r2, #4]
 8005560:	e00c      	b.n	800557c <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8005562:	78fb      	ldrb	r3, [r7, #3]
 8005564:	2b02      	cmp	r3, #2
 8005566:	d107      	bne.n	8005578 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800556e:	461a      	mov	r2, r3
 8005570:	f241 7370 	movw	r3, #6000	@ 0x1770
 8005574:	6053      	str	r3, [r2, #4]
 8005576:	e001      	b.n	800557c <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8005578:	2301      	movs	r3, #1
 800557a:	e000      	b.n	800557e <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 800557c:	2300      	movs	r3, #0
}
 800557e:	4618      	mov	r0, r3
 8005580:	3714      	adds	r7, #20
 8005582:	46bd      	mov	sp, r7
 8005584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005588:	4770      	bx	lr

0800558a <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800558a:	b580      	push	{r7, lr}
 800558c:	b084      	sub	sp, #16
 800558e:	af00      	add	r7, sp, #0
 8005590:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005596:	2300      	movs	r3, #0
 8005598:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80055aa:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	68fa      	ldr	r2, [r7, #12]
 80055b0:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80055b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80055b8:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80055ba:	2064      	movs	r0, #100	@ 0x64
 80055bc:	f7fb fc16 	bl	8000dec <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	68fa      	ldr	r2, [r7, #12]
 80055c4:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80055c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80055cc:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80055ce:	200a      	movs	r0, #10
 80055d0:	f7fb fc0c 	bl	8000dec <HAL_Delay>

  return HAL_OK;
 80055d4:	2300      	movs	r3, #0
}
 80055d6:	4618      	mov	r0, r3
 80055d8:	3710      	adds	r7, #16
 80055da:	46bd      	mov	sp, r7
 80055dc:	bd80      	pop	{r7, pc}

080055de <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80055de:	b480      	push	{r7}
 80055e0:	b085      	sub	sp, #20
 80055e2:	af00      	add	r7, sp, #0
 80055e4:	6078      	str	r0, [r7, #4]
 80055e6:	460b      	mov	r3, r1
 80055e8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80055ee:	2300      	movs	r3, #0
 80055f0:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8005602:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800560a:	2b00      	cmp	r3, #0
 800560c:	d109      	bne.n	8005622 <USB_DriveVbus+0x44>
 800560e:	78fb      	ldrb	r3, [r7, #3]
 8005610:	2b01      	cmp	r3, #1
 8005612:	d106      	bne.n	8005622 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005614:	68bb      	ldr	r3, [r7, #8]
 8005616:	68fa      	ldr	r2, [r7, #12]
 8005618:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800561c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005620:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005628:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800562c:	d109      	bne.n	8005642 <USB_DriveVbus+0x64>
 800562e:	78fb      	ldrb	r3, [r7, #3]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d106      	bne.n	8005642 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	68fa      	ldr	r2, [r7, #12]
 8005638:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800563c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005640:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005642:	2300      	movs	r3, #0
}
 8005644:	4618      	mov	r0, r3
 8005646:	3714      	adds	r7, #20
 8005648:	46bd      	mov	sp, r7
 800564a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564e:	4770      	bx	lr

08005650 <USB_GetHostSpeed>:
  *          This parameter can be one of these values:
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8005650:	b480      	push	{r7}
 8005652:	b085      	sub	sp, #20
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800565c:	2300      	movs	r3, #0
 800565e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800566a:	68bb      	ldr	r3, [r7, #8]
 800566c:	0c5b      	lsrs	r3, r3, #17
 800566e:	f003 0303 	and.w	r3, r3, #3
}
 8005672:	4618      	mov	r0, r3
 8005674:	3714      	adds	r7, #20
 8005676:	46bd      	mov	sp, r7
 8005678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567c:	4770      	bx	lr

0800567e <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 800567e:	b480      	push	{r7}
 8005680:	b085      	sub	sp, #20
 8005682:	af00      	add	r7, sp, #0
 8005684:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005690:	689b      	ldr	r3, [r3, #8]
 8005692:	b29b      	uxth	r3, r3
}
 8005694:	4618      	mov	r0, r3
 8005696:	3714      	adds	r7, #20
 8005698:	46bd      	mov	sp, r7
 800569a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569e:	4770      	bx	lr

080056a0 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b088      	sub	sp, #32
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
 80056a8:	4608      	mov	r0, r1
 80056aa:	4611      	mov	r1, r2
 80056ac:	461a      	mov	r2, r3
 80056ae:	4603      	mov	r3, r0
 80056b0:	70fb      	strb	r3, [r7, #3]
 80056b2:	460b      	mov	r3, r1
 80056b4:	70bb      	strb	r3, [r7, #2]
 80056b6:	4613      	mov	r3, r2
 80056b8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80056ba:	2300      	movs	r3, #0
 80056bc:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 80056c2:	78fb      	ldrb	r3, [r7, #3]
 80056c4:	015a      	lsls	r2, r3, #5
 80056c6:	693b      	ldr	r3, [r7, #16]
 80056c8:	4413      	add	r3, r2
 80056ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80056ce:	461a      	mov	r2, r3
 80056d0:	f04f 33ff 	mov.w	r3, #4294967295
 80056d4:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80056d6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80056da:	2b03      	cmp	r3, #3
 80056dc:	d867      	bhi.n	80057ae <USB_HC_Init+0x10e>
 80056de:	a201      	add	r2, pc, #4	@ (adr r2, 80056e4 <USB_HC_Init+0x44>)
 80056e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056e4:	080056f5 	.word	0x080056f5
 80056e8:	08005771 	.word	0x08005771
 80056ec:	080056f5 	.word	0x080056f5
 80056f0:	08005733 	.word	0x08005733
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80056f4:	78fb      	ldrb	r3, [r7, #3]
 80056f6:	015a      	lsls	r2, r3, #5
 80056f8:	693b      	ldr	r3, [r7, #16]
 80056fa:	4413      	add	r3, r2
 80056fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005700:	461a      	mov	r2, r3
 8005702:	f240 439d 	movw	r3, #1181	@ 0x49d
 8005706:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005708:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800570c:	2b00      	cmp	r3, #0
 800570e:	da51      	bge.n	80057b4 <USB_HC_Init+0x114>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005710:	78fb      	ldrb	r3, [r7, #3]
 8005712:	015a      	lsls	r2, r3, #5
 8005714:	693b      	ldr	r3, [r7, #16]
 8005716:	4413      	add	r3, r2
 8005718:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800571c:	68db      	ldr	r3, [r3, #12]
 800571e:	78fa      	ldrb	r2, [r7, #3]
 8005720:	0151      	lsls	r1, r2, #5
 8005722:	693a      	ldr	r2, [r7, #16]
 8005724:	440a      	add	r2, r1
 8005726:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800572a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800572e:	60d3      	str	r3, [r2, #12]
      }
      break;
 8005730:	e040      	b.n	80057b4 <USB_HC_Init+0x114>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005732:	78fb      	ldrb	r3, [r7, #3]
 8005734:	015a      	lsls	r2, r3, #5
 8005736:	693b      	ldr	r3, [r7, #16]
 8005738:	4413      	add	r3, r2
 800573a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800573e:	461a      	mov	r2, r3
 8005740:	f240 639d 	movw	r3, #1693	@ 0x69d
 8005744:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005746:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800574a:	2b00      	cmp	r3, #0
 800574c:	da34      	bge.n	80057b8 <USB_HC_Init+0x118>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800574e:	78fb      	ldrb	r3, [r7, #3]
 8005750:	015a      	lsls	r2, r3, #5
 8005752:	693b      	ldr	r3, [r7, #16]
 8005754:	4413      	add	r3, r2
 8005756:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800575a:	68db      	ldr	r3, [r3, #12]
 800575c:	78fa      	ldrb	r2, [r7, #3]
 800575e:	0151      	lsls	r1, r2, #5
 8005760:	693a      	ldr	r2, [r7, #16]
 8005762:	440a      	add	r2, r1
 8005764:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005768:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800576c:	60d3      	str	r3, [r2, #12]
      }

      break;
 800576e:	e023      	b.n	80057b8 <USB_HC_Init+0x118>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005770:	78fb      	ldrb	r3, [r7, #3]
 8005772:	015a      	lsls	r2, r3, #5
 8005774:	693b      	ldr	r3, [r7, #16]
 8005776:	4413      	add	r3, r2
 8005778:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800577c:	461a      	mov	r2, r3
 800577e:	f240 2325 	movw	r3, #549	@ 0x225
 8005782:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005784:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005788:	2b00      	cmp	r3, #0
 800578a:	da17      	bge.n	80057bc <USB_HC_Init+0x11c>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800578c:	78fb      	ldrb	r3, [r7, #3]
 800578e:	015a      	lsls	r2, r3, #5
 8005790:	693b      	ldr	r3, [r7, #16]
 8005792:	4413      	add	r3, r2
 8005794:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005798:	68db      	ldr	r3, [r3, #12]
 800579a:	78fa      	ldrb	r2, [r7, #3]
 800579c:	0151      	lsls	r1, r2, #5
 800579e:	693a      	ldr	r2, [r7, #16]
 80057a0:	440a      	add	r2, r1
 80057a2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80057a6:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 80057aa:	60d3      	str	r3, [r2, #12]
      }
      break;
 80057ac:	e006      	b.n	80057bc <USB_HC_Init+0x11c>

    default:
      ret = HAL_ERROR;
 80057ae:	2301      	movs	r3, #1
 80057b0:	77fb      	strb	r3, [r7, #31]
      break;
 80057b2:	e004      	b.n	80057be <USB_HC_Init+0x11e>
      break;
 80057b4:	bf00      	nop
 80057b6:	e002      	b.n	80057be <USB_HC_Init+0x11e>
      break;
 80057b8:	bf00      	nop
 80057ba:	e000      	b.n	80057be <USB_HC_Init+0x11e>
      break;
 80057bc:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 80057be:	78fb      	ldrb	r3, [r7, #3]
 80057c0:	015a      	lsls	r2, r3, #5
 80057c2:	693b      	ldr	r3, [r7, #16]
 80057c4:	4413      	add	r3, r2
 80057c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80057ca:	68db      	ldr	r3, [r3, #12]
 80057cc:	78fa      	ldrb	r2, [r7, #3]
 80057ce:	0151      	lsls	r1, r2, #5
 80057d0:	693a      	ldr	r2, [r7, #16]
 80057d2:	440a      	add	r2, r1
 80057d4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80057d8:	f043 0302 	orr.w	r3, r3, #2
 80057dc:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80057de:	693b      	ldr	r3, [r7, #16]
 80057e0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80057e4:	699a      	ldr	r2, [r3, #24]
 80057e6:	78fb      	ldrb	r3, [r7, #3]
 80057e8:	f003 030f 	and.w	r3, r3, #15
 80057ec:	2101      	movs	r1, #1
 80057ee:	fa01 f303 	lsl.w	r3, r1, r3
 80057f2:	6939      	ldr	r1, [r7, #16]
 80057f4:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80057f8:	4313      	orrs	r3, r2
 80057fa:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	699b      	ldr	r3, [r3, #24]
 8005800:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8005808:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800580c:	2b00      	cmp	r3, #0
 800580e:	da03      	bge.n	8005818 <USB_HC_Init+0x178>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8005810:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005814:	61bb      	str	r3, [r7, #24]
 8005816:	e001      	b.n	800581c <USB_HC_Init+0x17c>
  }
  else
  {
    HCcharEpDir = 0U;
 8005818:	2300      	movs	r3, #0
 800581a:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800581c:	6878      	ldr	r0, [r7, #4]
 800581e:	f7ff ff17 	bl	8005650 <USB_GetHostSpeed>
 8005822:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8005824:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005828:	2b02      	cmp	r3, #2
 800582a:	d106      	bne.n	800583a <USB_HC_Init+0x19a>
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	2b02      	cmp	r3, #2
 8005830:	d003      	beq.n	800583a <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8005832:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005836:	617b      	str	r3, [r7, #20]
 8005838:	e001      	b.n	800583e <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800583a:	2300      	movs	r3, #0
 800583c:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800583e:	787b      	ldrb	r3, [r7, #1]
 8005840:	059b      	lsls	r3, r3, #22
 8005842:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005846:	78bb      	ldrb	r3, [r7, #2]
 8005848:	02db      	lsls	r3, r3, #11
 800584a:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800584e:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005850:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005854:	049b      	lsls	r3, r3, #18
 8005856:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800585a:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 800585c:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800585e:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005862:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8005864:	69bb      	ldr	r3, [r7, #24]
 8005866:	431a      	orrs	r2, r3
 8005868:	697b      	ldr	r3, [r7, #20]
 800586a:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800586c:	78fa      	ldrb	r2, [r7, #3]
 800586e:	0151      	lsls	r1, r2, #5
 8005870:	693a      	ldr	r2, [r7, #16]
 8005872:	440a      	add	r2, r1
 8005874:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8005878:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800587c:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800587e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005882:	2b03      	cmp	r3, #3
 8005884:	d003      	beq.n	800588e <USB_HC_Init+0x1ee>
 8005886:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800588a:	2b01      	cmp	r3, #1
 800588c:	d10f      	bne.n	80058ae <USB_HC_Init+0x20e>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800588e:	78fb      	ldrb	r3, [r7, #3]
 8005890:	015a      	lsls	r2, r3, #5
 8005892:	693b      	ldr	r3, [r7, #16]
 8005894:	4413      	add	r3, r2
 8005896:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	78fa      	ldrb	r2, [r7, #3]
 800589e:	0151      	lsls	r1, r2, #5
 80058a0:	693a      	ldr	r2, [r7, #16]
 80058a2:	440a      	add	r2, r1
 80058a4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80058a8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80058ac:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80058ae:	7ffb      	ldrb	r3, [r7, #31]
}
 80058b0:	4618      	mov	r0, r3
 80058b2:	3720      	adds	r7, #32
 80058b4:	46bd      	mov	sp, r7
 80058b6:	bd80      	pop	{r7, pc}

080058b8 <USB_HC_StartXfer>:
  * @param  USBx  Selected device
  * @param  hc  pointer to host channel structure
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc)
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b088      	sub	sp, #32
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
 80058c0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	785b      	ldrb	r3, [r3, #1]
 80058ca:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 80058cc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80058d0:	827b      	strh	r3, [r7, #18]

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	699b      	ldr	r3, [r3, #24]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d018      	beq.n	800590c <USB_HC_StartXfer+0x54>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	699b      	ldr	r3, [r3, #24]
 80058de:	683a      	ldr	r2, [r7, #0]
 80058e0:	8952      	ldrh	r2, [r2, #10]
 80058e2:	4413      	add	r3, r2
 80058e4:	3b01      	subs	r3, #1
 80058e6:	683a      	ldr	r2, [r7, #0]
 80058e8:	8952      	ldrh	r2, [r2, #10]
 80058ea:	fbb3 f3f2 	udiv	r3, r3, r2
 80058ee:	83fb      	strh	r3, [r7, #30]

    if (num_packets > max_hc_pkt_count)
 80058f0:	8bfa      	ldrh	r2, [r7, #30]
 80058f2:	8a7b      	ldrh	r3, [r7, #18]
 80058f4:	429a      	cmp	r2, r3
 80058f6:	d90b      	bls.n	8005910 <USB_HC_StartXfer+0x58>
    {
      num_packets = max_hc_pkt_count;
 80058f8:	8a7b      	ldrh	r3, [r7, #18]
 80058fa:	83fb      	strh	r3, [r7, #30]
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80058fc:	8bfb      	ldrh	r3, [r7, #30]
 80058fe:	683a      	ldr	r2, [r7, #0]
 8005900:	8952      	ldrh	r2, [r2, #10]
 8005902:	fb03 f202 	mul.w	r2, r3, r2
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	615a      	str	r2, [r3, #20]
 800590a:	e001      	b.n	8005910 <USB_HC_StartXfer+0x58>
    }
  }
  else
  {
    num_packets = 1U;
 800590c:	2301      	movs	r3, #1
 800590e:	83fb      	strh	r3, [r7, #30]

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	78db      	ldrb	r3, [r3, #3]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d007      	beq.n	8005928 <USB_HC_StartXfer+0x70>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005918:	8bfb      	ldrh	r3, [r7, #30]
 800591a:	683a      	ldr	r2, [r7, #0]
 800591c:	8952      	ldrh	r2, [r2, #10]
 800591e:	fb03 f202 	mul.w	r2, r3, r2
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	615a      	str	r2, [r3, #20]
 8005926:	e003      	b.n	8005930 <USB_HC_StartXfer+0x78>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	699a      	ldr	r2, [r3, #24]
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	615a      	str	r2, [r3, #20]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	695b      	ldr	r3, [r3, #20]
 8005934:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005938:	8bfb      	ldrh	r3, [r7, #30]
 800593a:	04d9      	lsls	r1, r3, #19
 800593c:	4b59      	ldr	r3, [pc, #356]	@ (8005aa4 <USB_HC_StartXfer+0x1ec>)
 800593e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005940:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	7b1b      	ldrb	r3, [r3, #12]
 8005946:	075b      	lsls	r3, r3, #29
 8005948:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800594c:	6979      	ldr	r1, [r7, #20]
 800594e:	0148      	lsls	r0, r1, #5
 8005950:	69b9      	ldr	r1, [r7, #24]
 8005952:	4401      	add	r1, r0
 8005954:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005958:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800595a:	610b      	str	r3, [r1, #16]

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800595c:	69bb      	ldr	r3, [r7, #24]
 800595e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005962:	689b      	ldr	r3, [r3, #8]
 8005964:	f003 0301 	and.w	r3, r3, #1
 8005968:	2b00      	cmp	r3, #0
 800596a:	bf0c      	ite	eq
 800596c:	2301      	moveq	r3, #1
 800596e:	2300      	movne	r3, #0
 8005970:	b2db      	uxtb	r3, r3
 8005972:	747b      	strb	r3, [r7, #17]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8005974:	697b      	ldr	r3, [r7, #20]
 8005976:	015a      	lsls	r2, r3, #5
 8005978:	69bb      	ldr	r3, [r7, #24]
 800597a:	4413      	add	r3, r2
 800597c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	697a      	ldr	r2, [r7, #20]
 8005984:	0151      	lsls	r1, r2, #5
 8005986:	69ba      	ldr	r2, [r7, #24]
 8005988:	440a      	add	r2, r1
 800598a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800598e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005992:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8005994:	697b      	ldr	r3, [r7, #20]
 8005996:	015a      	lsls	r2, r3, #5
 8005998:	69bb      	ldr	r3, [r7, #24]
 800599a:	4413      	add	r3, r2
 800599c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80059a0:	681a      	ldr	r2, [r3, #0]
 80059a2:	7c7b      	ldrb	r3, [r7, #17]
 80059a4:	075b      	lsls	r3, r3, #29
 80059a6:	6979      	ldr	r1, [r7, #20]
 80059a8:	0148      	lsls	r0, r1, #5
 80059aa:	69b9      	ldr	r1, [r7, #24]
 80059ac:	4401      	add	r1, r0
 80059ae:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 80059b2:	4313      	orrs	r3, r2
 80059b4:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80059b6:	697b      	ldr	r3, [r7, #20]
 80059b8:	015a      	lsls	r2, r3, #5
 80059ba:	69bb      	ldr	r3, [r7, #24]
 80059bc:	4413      	add	r3, r2
 80059be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80059c6:	68bb      	ldr	r3, [r7, #8]
 80059c8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80059cc:	60bb      	str	r3, [r7, #8]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	78db      	ldrb	r3, [r3, #3]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d004      	beq.n	80059e0 <USB_HC_StartXfer+0x128>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80059d6:	68bb      	ldr	r3, [r7, #8]
 80059d8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80059dc:	60bb      	str	r3, [r7, #8]
 80059de:	e003      	b.n	80059e8 <USB_HC_StartXfer+0x130>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80059e0:	68bb      	ldr	r3, [r7, #8]
 80059e2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80059e6:	60bb      	str	r3, [r7, #8]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80059ee:	60bb      	str	r3, [r7, #8]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80059f0:	697b      	ldr	r3, [r7, #20]
 80059f2:	015a      	lsls	r2, r3, #5
 80059f4:	69bb      	ldr	r3, [r7, #24]
 80059f6:	4413      	add	r3, r2
 80059f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80059fc:	461a      	mov	r2, r3
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	6013      	str	r3, [r2, #0]

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	78db      	ldrb	r3, [r3, #3]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d147      	bne.n	8005a9a <USB_HC_StartXfer+0x1e2>
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	699b      	ldr	r3, [r3, #24]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d043      	beq.n	8005a9a <USB_HC_StartXfer+0x1e2>
  {
    switch (hc->ep_type)
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	7a1b      	ldrb	r3, [r3, #8]
 8005a16:	2b03      	cmp	r3, #3
 8005a18:	d830      	bhi.n	8005a7c <USB_HC_StartXfer+0x1c4>
 8005a1a:	a201      	add	r2, pc, #4	@ (adr r2, 8005a20 <USB_HC_StartXfer+0x168>)
 8005a1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a20:	08005a31 	.word	0x08005a31
 8005a24:	08005a55 	.word	0x08005a55
 8005a28:	08005a31 	.word	0x08005a31
 8005a2c:	08005a55 	.word	0x08005a55
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	699b      	ldr	r3, [r3, #24]
 8005a34:	3303      	adds	r3, #3
 8005a36:	089b      	lsrs	r3, r3, #2
 8005a38:	81fb      	strh	r3, [r7, #14]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8005a3a:	89fa      	ldrh	r2, [r7, #14]
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a40:	b29b      	uxth	r3, r3
 8005a42:	429a      	cmp	r2, r3
 8005a44:	d91c      	bls.n	8005a80 <USB_HC_StartXfer+0x1c8>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	699b      	ldr	r3, [r3, #24]
 8005a4a:	f043 0220 	orr.w	r2, r3, #32
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	619a      	str	r2, [r3, #24]
        }
        break;
 8005a52:	e015      	b.n	8005a80 <USB_HC_StartXfer+0x1c8>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	699b      	ldr	r3, [r3, #24]
 8005a58:	3303      	adds	r3, #3
 8005a5a:	089b      	lsrs	r3, r3, #2
 8005a5c:	81fb      	strh	r3, [r7, #14]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8005a5e:	89fa      	ldrh	r2, [r7, #14]
 8005a60:	69bb      	ldr	r3, [r7, #24]
 8005a62:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005a66:	691b      	ldr	r3, [r3, #16]
 8005a68:	b29b      	uxth	r3, r3
 8005a6a:	429a      	cmp	r2, r3
 8005a6c:	d90a      	bls.n	8005a84 <USB_HC_StartXfer+0x1cc>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	699b      	ldr	r3, [r3, #24]
 8005a72:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	619a      	str	r2, [r3, #24]
        }
        break;
 8005a7a:	e003      	b.n	8005a84 <USB_HC_StartXfer+0x1cc>

      default:
        break;
 8005a7c:	bf00      	nop
 8005a7e:	e002      	b.n	8005a86 <USB_HC_StartXfer+0x1ce>
        break;
 8005a80:	bf00      	nop
 8005a82:	e000      	b.n	8005a86 <USB_HC_StartXfer+0x1ce>
        break;
 8005a84:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len);
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	6919      	ldr	r1, [r3, #16]
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	785a      	ldrb	r2, [r3, #1]
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	699b      	ldr	r3, [r3, #24]
 8005a92:	b29b      	uxth	r3, r3
 8005a94:	6878      	ldr	r0, [r7, #4]
 8005a96:	f7ff fbb1 	bl	80051fc <USB_WritePacket>
  }

  return HAL_OK;
 8005a9a:	2300      	movs	r3, #0
}
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	3720      	adds	r7, #32
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	bd80      	pop	{r7, pc}
 8005aa4:	1ff80000 	.word	0x1ff80000

08005aa8 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	b085      	sub	sp, #20
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005aba:	695b      	ldr	r3, [r3, #20]
 8005abc:	b29b      	uxth	r3, r3
}
 8005abe:	4618      	mov	r0, r3
 8005ac0:	3714      	adds	r7, #20
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac8:	4770      	bx	lr

08005aca <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8005aca:	b480      	push	{r7}
 8005acc:	b089      	sub	sp, #36	@ 0x24
 8005ace:	af00      	add	r7, sp, #0
 8005ad0:	6078      	str	r0, [r7, #4]
 8005ad2:	460b      	mov	r3, r1
 8005ad4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8005ada:	78fb      	ldrb	r3, [r7, #3]
 8005adc:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8005ade:	2300      	movs	r3, #0
 8005ae0:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8005ae2:	69bb      	ldr	r3, [r7, #24]
 8005ae4:	015a      	lsls	r2, r3, #5
 8005ae6:	69fb      	ldr	r3, [r7, #28]
 8005ae8:	4413      	add	r3, r2
 8005aea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	0c9b      	lsrs	r3, r3, #18
 8005af2:	f003 0303 	and.w	r3, r3, #3
 8005af6:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8005af8:	69bb      	ldr	r3, [r7, #24]
 8005afa:	015a      	lsls	r2, r3, #5
 8005afc:	69fb      	ldr	r3, [r7, #28]
 8005afe:	4413      	add	r3, r2
 8005b00:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	0fdb      	lsrs	r3, r3, #31
 8005b08:	f003 0301 	and.w	r3, r3, #1
 8005b0c:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8005b0e:	69bb      	ldr	r3, [r7, #24]
 8005b10:	015a      	lsls	r2, r3, #5
 8005b12:	69fb      	ldr	r3, [r7, #28]
 8005b14:	4413      	add	r3, r2
 8005b16:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b1a:	685b      	ldr	r3, [r3, #4]
 8005b1c:	0fdb      	lsrs	r3, r3, #31
 8005b1e:	f003 0301 	and.w	r3, r3, #1
 8005b22:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	689b      	ldr	r3, [r3, #8]
 8005b28:	f003 0320 	and.w	r3, r3, #32
 8005b2c:	2b20      	cmp	r3, #32
 8005b2e:	d10d      	bne.n	8005b4c <USB_HC_Halt+0x82>
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d10a      	bne.n	8005b4c <USB_HC_Halt+0x82>
 8005b36:	693b      	ldr	r3, [r7, #16]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d005      	beq.n	8005b48 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8005b3c:	697b      	ldr	r3, [r7, #20]
 8005b3e:	2b01      	cmp	r3, #1
 8005b40:	d002      	beq.n	8005b48 <USB_HC_Halt+0x7e>
 8005b42:	697b      	ldr	r3, [r7, #20]
 8005b44:	2b03      	cmp	r3, #3
 8005b46:	d101      	bne.n	8005b4c <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8005b48:	2300      	movs	r3, #0
 8005b4a:	e0d8      	b.n	8005cfe <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8005b4c:	697b      	ldr	r3, [r7, #20]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d002      	beq.n	8005b58 <USB_HC_Halt+0x8e>
 8005b52:	697b      	ldr	r3, [r7, #20]
 8005b54:	2b02      	cmp	r3, #2
 8005b56:	d173      	bne.n	8005c40 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005b58:	69bb      	ldr	r3, [r7, #24]
 8005b5a:	015a      	lsls	r2, r3, #5
 8005b5c:	69fb      	ldr	r3, [r7, #28]
 8005b5e:	4413      	add	r3, r2
 8005b60:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	69ba      	ldr	r2, [r7, #24]
 8005b68:	0151      	lsls	r1, r2, #5
 8005b6a:	69fa      	ldr	r2, [r7, #28]
 8005b6c:	440a      	add	r2, r1
 8005b6e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005b72:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005b76:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	689b      	ldr	r3, [r3, #8]
 8005b7c:	f003 0320 	and.w	r3, r3, #32
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d14a      	bne.n	8005c1a <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b88:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d133      	bne.n	8005bf8 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005b90:	69bb      	ldr	r3, [r7, #24]
 8005b92:	015a      	lsls	r2, r3, #5
 8005b94:	69fb      	ldr	r3, [r7, #28]
 8005b96:	4413      	add	r3, r2
 8005b98:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	69ba      	ldr	r2, [r7, #24]
 8005ba0:	0151      	lsls	r1, r2, #5
 8005ba2:	69fa      	ldr	r2, [r7, #28]
 8005ba4:	440a      	add	r2, r1
 8005ba6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005baa:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005bae:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005bb0:	69bb      	ldr	r3, [r7, #24]
 8005bb2:	015a      	lsls	r2, r3, #5
 8005bb4:	69fb      	ldr	r3, [r7, #28]
 8005bb6:	4413      	add	r3, r2
 8005bb8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	69ba      	ldr	r2, [r7, #24]
 8005bc0:	0151      	lsls	r1, r2, #5
 8005bc2:	69fa      	ldr	r2, [r7, #28]
 8005bc4:	440a      	add	r2, r1
 8005bc6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005bca:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005bce:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	3301      	adds	r3, #1
 8005bd4:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8005bd6:	68bb      	ldr	r3, [r7, #8]
 8005bd8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005bdc:	d82e      	bhi.n	8005c3c <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005bde:	69bb      	ldr	r3, [r7, #24]
 8005be0:	015a      	lsls	r2, r3, #5
 8005be2:	69fb      	ldr	r3, [r7, #28]
 8005be4:	4413      	add	r3, r2
 8005be6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005bf0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005bf4:	d0ec      	beq.n	8005bd0 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005bf6:	e081      	b.n	8005cfc <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005bf8:	69bb      	ldr	r3, [r7, #24]
 8005bfa:	015a      	lsls	r2, r3, #5
 8005bfc:	69fb      	ldr	r3, [r7, #28]
 8005bfe:	4413      	add	r3, r2
 8005c00:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	69ba      	ldr	r2, [r7, #24]
 8005c08:	0151      	lsls	r1, r2, #5
 8005c0a:	69fa      	ldr	r2, [r7, #28]
 8005c0c:	440a      	add	r2, r1
 8005c0e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005c12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005c16:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005c18:	e070      	b.n	8005cfc <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005c1a:	69bb      	ldr	r3, [r7, #24]
 8005c1c:	015a      	lsls	r2, r3, #5
 8005c1e:	69fb      	ldr	r3, [r7, #28]
 8005c20:	4413      	add	r3, r2
 8005c22:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	69ba      	ldr	r2, [r7, #24]
 8005c2a:	0151      	lsls	r1, r2, #5
 8005c2c:	69fa      	ldr	r2, [r7, #28]
 8005c2e:	440a      	add	r2, r1
 8005c30:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005c34:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005c38:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005c3a:	e05f      	b.n	8005cfc <USB_HC_Halt+0x232>
            break;
 8005c3c:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005c3e:	e05d      	b.n	8005cfc <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005c40:	69bb      	ldr	r3, [r7, #24]
 8005c42:	015a      	lsls	r2, r3, #5
 8005c44:	69fb      	ldr	r3, [r7, #28]
 8005c46:	4413      	add	r3, r2
 8005c48:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	69ba      	ldr	r2, [r7, #24]
 8005c50:	0151      	lsls	r1, r2, #5
 8005c52:	69fa      	ldr	r2, [r7, #28]
 8005c54:	440a      	add	r2, r1
 8005c56:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005c5a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005c5e:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8005c60:	69fb      	ldr	r3, [r7, #28]
 8005c62:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005c66:	691b      	ldr	r3, [r3, #16]
 8005c68:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d133      	bne.n	8005cd8 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005c70:	69bb      	ldr	r3, [r7, #24]
 8005c72:	015a      	lsls	r2, r3, #5
 8005c74:	69fb      	ldr	r3, [r7, #28]
 8005c76:	4413      	add	r3, r2
 8005c78:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	69ba      	ldr	r2, [r7, #24]
 8005c80:	0151      	lsls	r1, r2, #5
 8005c82:	69fa      	ldr	r2, [r7, #28]
 8005c84:	440a      	add	r2, r1
 8005c86:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005c8a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005c8e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005c90:	69bb      	ldr	r3, [r7, #24]
 8005c92:	015a      	lsls	r2, r3, #5
 8005c94:	69fb      	ldr	r3, [r7, #28]
 8005c96:	4413      	add	r3, r2
 8005c98:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	69ba      	ldr	r2, [r7, #24]
 8005ca0:	0151      	lsls	r1, r2, #5
 8005ca2:	69fa      	ldr	r2, [r7, #28]
 8005ca4:	440a      	add	r2, r1
 8005ca6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005caa:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005cae:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8005cb0:	68bb      	ldr	r3, [r7, #8]
 8005cb2:	3301      	adds	r3, #1
 8005cb4:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005cbc:	d81d      	bhi.n	8005cfa <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005cbe:	69bb      	ldr	r3, [r7, #24]
 8005cc0:	015a      	lsls	r2, r3, #5
 8005cc2:	69fb      	ldr	r3, [r7, #28]
 8005cc4:	4413      	add	r3, r2
 8005cc6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005cd0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005cd4:	d0ec      	beq.n	8005cb0 <USB_HC_Halt+0x1e6>
 8005cd6:	e011      	b.n	8005cfc <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005cd8:	69bb      	ldr	r3, [r7, #24]
 8005cda:	015a      	lsls	r2, r3, #5
 8005cdc:	69fb      	ldr	r3, [r7, #28]
 8005cde:	4413      	add	r3, r2
 8005ce0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	69ba      	ldr	r2, [r7, #24]
 8005ce8:	0151      	lsls	r1, r2, #5
 8005cea:	69fa      	ldr	r2, [r7, #28]
 8005cec:	440a      	add	r2, r1
 8005cee:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005cf2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005cf6:	6013      	str	r3, [r2, #0]
 8005cf8:	e000      	b.n	8005cfc <USB_HC_Halt+0x232>
          break;
 8005cfa:	bf00      	nop
    }
  }

  return HAL_OK;
 8005cfc:	2300      	movs	r3, #0
}
 8005cfe:	4618      	mov	r0, r3
 8005d00:	3724      	adds	r7, #36	@ 0x24
 8005d02:	46bd      	mov	sp, r7
 8005d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d08:	4770      	bx	lr

08005d0a <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8005d0a:	b580      	push	{r7, lr}
 8005d0c:	b088      	sub	sp, #32
 8005d0e:	af00      	add	r7, sp, #0
 8005d10:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8005d12:	2300      	movs	r3, #0
 8005d14:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8005d1e:	6878      	ldr	r0, [r7, #4]
 8005d20:	f7ff f9aa 	bl	8005078 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005d24:	2110      	movs	r1, #16
 8005d26:	6878      	ldr	r0, [r7, #4]
 8005d28:	f7ff fa04 	bl	8005134 <USB_FlushTxFifo>
 8005d2c:	4603      	mov	r3, r0
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d001      	beq.n	8005d36 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8005d32:	2301      	movs	r3, #1
 8005d34:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005d36:	6878      	ldr	r0, [r7, #4]
 8005d38:	f7ff fa30 	bl	800519c <USB_FlushRxFifo>
 8005d3c:	4603      	mov	r3, r0
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d001      	beq.n	8005d46 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8005d42:	2301      	movs	r3, #1
 8005d44:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8005d46:	2300      	movs	r3, #0
 8005d48:	61bb      	str	r3, [r7, #24]
 8005d4a:	e01f      	b.n	8005d8c <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8005d4c:	69bb      	ldr	r3, [r7, #24]
 8005d4e:	015a      	lsls	r2, r3, #5
 8005d50:	697b      	ldr	r3, [r7, #20]
 8005d52:	4413      	add	r3, r2
 8005d54:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8005d5c:	693b      	ldr	r3, [r7, #16]
 8005d5e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005d62:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8005d64:	693b      	ldr	r3, [r7, #16]
 8005d66:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005d6a:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005d6c:	693b      	ldr	r3, [r7, #16]
 8005d6e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005d72:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8005d74:	69bb      	ldr	r3, [r7, #24]
 8005d76:	015a      	lsls	r2, r3, #5
 8005d78:	697b      	ldr	r3, [r7, #20]
 8005d7a:	4413      	add	r3, r2
 8005d7c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005d80:	461a      	mov	r2, r3
 8005d82:	693b      	ldr	r3, [r7, #16]
 8005d84:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8005d86:	69bb      	ldr	r3, [r7, #24]
 8005d88:	3301      	adds	r3, #1
 8005d8a:	61bb      	str	r3, [r7, #24]
 8005d8c:	69bb      	ldr	r3, [r7, #24]
 8005d8e:	2b0f      	cmp	r3, #15
 8005d90:	d9dc      	bls.n	8005d4c <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8005d92:	2300      	movs	r3, #0
 8005d94:	61bb      	str	r3, [r7, #24]
 8005d96:	e034      	b.n	8005e02 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8005d98:	69bb      	ldr	r3, [r7, #24]
 8005d9a:	015a      	lsls	r2, r3, #5
 8005d9c:	697b      	ldr	r3, [r7, #20]
 8005d9e:	4413      	add	r3, r2
 8005da0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8005da8:	693b      	ldr	r3, [r7, #16]
 8005daa:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005dae:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8005db0:	693b      	ldr	r3, [r7, #16]
 8005db2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005db6:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005db8:	693b      	ldr	r3, [r7, #16]
 8005dba:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005dbe:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8005dc0:	69bb      	ldr	r3, [r7, #24]
 8005dc2:	015a      	lsls	r2, r3, #5
 8005dc4:	697b      	ldr	r3, [r7, #20]
 8005dc6:	4413      	add	r3, r2
 8005dc8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005dcc:	461a      	mov	r2, r3
 8005dce:	693b      	ldr	r3, [r7, #16]
 8005dd0:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	3301      	adds	r3, #1
 8005dd6:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005dde:	d80c      	bhi.n	8005dfa <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005de0:	69bb      	ldr	r3, [r7, #24]
 8005de2:	015a      	lsls	r2, r3, #5
 8005de4:	697b      	ldr	r3, [r7, #20]
 8005de6:	4413      	add	r3, r2
 8005de8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005df2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005df6:	d0ec      	beq.n	8005dd2 <USB_StopHost+0xc8>
 8005df8:	e000      	b.n	8005dfc <USB_StopHost+0xf2>
        break;
 8005dfa:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8005dfc:	69bb      	ldr	r3, [r7, #24]
 8005dfe:	3301      	adds	r3, #1
 8005e00:	61bb      	str	r3, [r7, #24]
 8005e02:	69bb      	ldr	r3, [r7, #24]
 8005e04:	2b0f      	cmp	r3, #15
 8005e06:	d9c7      	bls.n	8005d98 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8005e08:	697b      	ldr	r3, [r7, #20]
 8005e0a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005e0e:	461a      	mov	r2, r3
 8005e10:	f04f 33ff 	mov.w	r3, #4294967295
 8005e14:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	f04f 32ff 	mov.w	r2, #4294967295
 8005e1c:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8005e1e:	6878      	ldr	r0, [r7, #4]
 8005e20:	f7ff f919 	bl	8005056 <USB_EnableGlobalInt>

  return ret;
 8005e24:	7ffb      	ldrb	r3, [r7, #31]
}
 8005e26:	4618      	mov	r0, r3
 8005e28:	3720      	adds	r7, #32
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	bd80      	pop	{r7, pc}
	...

08005e30 <USBH_HID_InterfaceInit>:
  *         The function init the HID class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8005e30:	b590      	push	{r4, r7, lr}
 8005e32:	b091      	sub	sp, #68	@ 0x44
 8005e34:	af04      	add	r7, sp, #16
 8005e36:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  HID_HandleTypeDef *HID_Handle;
  uint16_t ep_mps;
  uint8_t max_ep;
  uint8_t num = 0U;
 8005e38:	2300      	movs	r3, #0
 8005e3a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint8_t interface;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, HID_BOOT_CODE, 0xFFU);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8005e44:	7919      	ldrb	r1, [r3, #4]
 8005e46:	23ff      	movs	r3, #255	@ 0xff
 8005e48:	2201      	movs	r2, #1
 8005e4a:	6878      	ldr	r0, [r7, #4]
 8005e4c:	f001 fa90 	bl	8007370 <USBH_FindInterface>
 8005e50:	4603      	mov	r3, r0
 8005e52:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  if (interface == 0xFFU) {
 8005e56:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005e5a:	2bff      	cmp	r3, #255	@ 0xff
 8005e5c:	d10b      	bne.n	8005e76 <USBH_HID_InterfaceInit+0x46>
	  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, 0xFFU, 0xFFU);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8005e64:	7919      	ldrb	r1, [r3, #4]
 8005e66:	23ff      	movs	r3, #255	@ 0xff
 8005e68:	22ff      	movs	r2, #255	@ 0xff
 8005e6a:	6878      	ldr	r0, [r7, #4]
 8005e6c:	f001 fa80 	bl	8007370 <USBH_FindInterface>
 8005e70:	4603      	mov	r3, r0
 8005e72:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  }

  USBH_DbgLog("%d %d", interface, USBH_MAX_NUM_INTERFACES);
 8005e76:	2300      	movs	r3, #0
 8005e78:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005e7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e7c:	4a93      	ldr	r2, [pc, #588]	@ (80060cc <USBH_HID_InterfaceInit+0x29c>)
 8005e7e:	4413      	add	r3, r2
 8005e80:	4993      	ldr	r1, [pc, #588]	@ (80060d0 <USBH_HID_InterfaceInit+0x2a0>)
 8005e82:	4618      	mov	r0, r3
 8005e84:	f004 f97c 	bl	800a180 <siprintf>
 8005e88:	4602      	mov	r2, r0
 8005e8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e8c:	4413      	add	r3, r2
 8005e8e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005e90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e92:	4a8e      	ldr	r2, [pc, #568]	@ (80060cc <USBH_HID_InterfaceInit+0x29c>)
 8005e94:	1898      	adds	r0, r3, r2
 8005e96:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 8005e9a:	2302      	movs	r3, #2
 8005e9c:	498d      	ldr	r1, [pc, #564]	@ (80060d4 <USBH_HID_InterfaceInit+0x2a4>)
 8005e9e:	f004 f96f 	bl	800a180 <siprintf>
 8005ea2:	4602      	mov	r2, r0
 8005ea4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ea6:	4413      	add	r3, r2
 8005ea8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005eaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005eac:	4a87      	ldr	r2, [pc, #540]	@ (80060cc <USBH_HID_InterfaceInit+0x29c>)
 8005eae:	4413      	add	r3, r2
 8005eb0:	4989      	ldr	r1, [pc, #548]	@ (80060d8 <USBH_HID_InterfaceInit+0x2a8>)
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	f004 f964 	bl	800a180 <siprintf>
 8005eb8:	4602      	mov	r2, r0
 8005eba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ebc:	4413      	add	r3, r2
 8005ebe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005ec0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ec2:	b29a      	uxth	r2, r3
 8005ec4:	2364      	movs	r3, #100	@ 0x64
 8005ec6:	4981      	ldr	r1, [pc, #516]	@ (80060cc <USBH_HID_InterfaceInit+0x29c>)
 8005ec8:	4884      	ldr	r0, [pc, #528]	@ (80060dc <USBH_HID_InterfaceInit+0x2ac>)
 8005eca:	f7fe fb41 	bl	8004550 <HAL_UART_Transmit>
  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8005ece:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005ed2:	2bff      	cmp	r3, #255	@ 0xff
 8005ed4:	d003      	beq.n	8005ede <USBH_HID_InterfaceInit+0xae>
 8005ed6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005eda:	2b01      	cmp	r3, #1
 8005edc:	d92f      	bls.n	8005f3e <USBH_HID_InterfaceInit+0x10e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
 8005ede:	2300      	movs	r3, #0
 8005ee0:	60bb      	str	r3, [r7, #8]
 8005ee2:	68bb      	ldr	r3, [r7, #8]
 8005ee4:	4a79      	ldr	r2, [pc, #484]	@ (80060cc <USBH_HID_InterfaceInit+0x29c>)
 8005ee6:	4413      	add	r3, r2
 8005ee8:	4979      	ldr	r1, [pc, #484]	@ (80060d0 <USBH_HID_InterfaceInit+0x2a0>)
 8005eea:	4618      	mov	r0, r3
 8005eec:	f004 f948 	bl	800a180 <siprintf>
 8005ef0:	4602      	mov	r2, r0
 8005ef2:	68bb      	ldr	r3, [r7, #8]
 8005ef4:	4413      	add	r3, r2
 8005ef6:	60bb      	str	r3, [r7, #8]
 8005ef8:	68bb      	ldr	r3, [r7, #8]
 8005efa:	4a74      	ldr	r2, [pc, #464]	@ (80060cc <USBH_HID_InterfaceInit+0x29c>)
 8005efc:	1898      	adds	r0, r3, r2
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	461a      	mov	r2, r3
 8005f08:	4975      	ldr	r1, [pc, #468]	@ (80060e0 <USBH_HID_InterfaceInit+0x2b0>)
 8005f0a:	f004 f939 	bl	800a180 <siprintf>
 8005f0e:	4602      	mov	r2, r0
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	4413      	add	r3, r2
 8005f14:	60bb      	str	r3, [r7, #8]
 8005f16:	68bb      	ldr	r3, [r7, #8]
 8005f18:	4a6c      	ldr	r2, [pc, #432]	@ (80060cc <USBH_HID_InterfaceInit+0x29c>)
 8005f1a:	4413      	add	r3, r2
 8005f1c:	496e      	ldr	r1, [pc, #440]	@ (80060d8 <USBH_HID_InterfaceInit+0x2a8>)
 8005f1e:	4618      	mov	r0, r3
 8005f20:	f004 f92e 	bl	800a180 <siprintf>
 8005f24:	4602      	mov	r2, r0
 8005f26:	68bb      	ldr	r3, [r7, #8]
 8005f28:	4413      	add	r3, r2
 8005f2a:	60bb      	str	r3, [r7, #8]
 8005f2c:	68bb      	ldr	r3, [r7, #8]
 8005f2e:	b29a      	uxth	r2, r3
 8005f30:	2364      	movs	r3, #100	@ 0x64
 8005f32:	4966      	ldr	r1, [pc, #408]	@ (80060cc <USBH_HID_InterfaceInit+0x29c>)
 8005f34:	4869      	ldr	r0, [pc, #420]	@ (80060dc <USBH_HID_InterfaceInit+0x2ac>)
 8005f36:	f7fe fb0b 	bl	8004550 <HAL_UART_Transmit>
    return USBH_FAIL;
 8005f3a:	2302      	movs	r3, #2
 8005f3c:	e1fa      	b.n	8006334 <USBH_HID_InterfaceInit+0x504>
  }

  status = USBH_SelectInterface(phost, interface);
 8005f3e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005f42:	4619      	mov	r1, r3
 8005f44:	6878      	ldr	r0, [r7, #4]
 8005f46:	f001 f917 	bl	8007178 <USBH_SelectInterface>
 8005f4a:	4603      	mov	r3, r0
 8005f4c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  if (status != USBH_OK)
 8005f50:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d001      	beq.n	8005f5c <USBH_HID_InterfaceInit+0x12c>
  {
    return USBH_FAIL;
 8005f58:	2302      	movs	r3, #2
 8005f5a:	e1eb      	b.n	8006334 <USBH_HID_InterfaceInit+0x504>
  }

  phost->pActiveClass->pData = (HID_HandleTypeDef *)USBH_malloc(sizeof(HID_HandleTypeDef));
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 8005f62:	2034      	movs	r0, #52	@ 0x34
 8005f64:	f003 ff72 	bl	8009e4c <malloc>
 8005f68:	4603      	mov	r3, r0
 8005f6a:	61e3      	str	r3, [r4, #28]
  HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8005f72:	69db      	ldr	r3, [r3, #28]
 8005f74:	623b      	str	r3, [r7, #32]

  if (HID_Handle == NULL)
 8005f76:	6a3b      	ldr	r3, [r7, #32]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d12b      	bne.n	8005fd4 <USBH_HID_InterfaceInit+0x1a4>
  {
    USBH_DbgLog("Cannot allocate memory for HID Handle");
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	60fb      	str	r3, [r7, #12]
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	4a52      	ldr	r2, [pc, #328]	@ (80060cc <USBH_HID_InterfaceInit+0x29c>)
 8005f84:	4413      	add	r3, r2
 8005f86:	4952      	ldr	r1, [pc, #328]	@ (80060d0 <USBH_HID_InterfaceInit+0x2a0>)
 8005f88:	4618      	mov	r0, r3
 8005f8a:	f004 f8f9 	bl	800a180 <siprintf>
 8005f8e:	4602      	mov	r2, r0
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	4413      	add	r3, r2
 8005f94:	60fb      	str	r3, [r7, #12]
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	4a4c      	ldr	r2, [pc, #304]	@ (80060cc <USBH_HID_InterfaceInit+0x29c>)
 8005f9a:	4413      	add	r3, r2
 8005f9c:	4951      	ldr	r1, [pc, #324]	@ (80060e4 <USBH_HID_InterfaceInit+0x2b4>)
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	f004 f8ee 	bl	800a180 <siprintf>
 8005fa4:	4602      	mov	r2, r0
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	4413      	add	r3, r2
 8005faa:	60fb      	str	r3, [r7, #12]
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	4a47      	ldr	r2, [pc, #284]	@ (80060cc <USBH_HID_InterfaceInit+0x29c>)
 8005fb0:	4413      	add	r3, r2
 8005fb2:	4949      	ldr	r1, [pc, #292]	@ (80060d8 <USBH_HID_InterfaceInit+0x2a8>)
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	f004 f8e3 	bl	800a180 <siprintf>
 8005fba:	4602      	mov	r2, r0
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	4413      	add	r3, r2
 8005fc0:	60fb      	str	r3, [r7, #12]
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	b29a      	uxth	r2, r3
 8005fc6:	2364      	movs	r3, #100	@ 0x64
 8005fc8:	4940      	ldr	r1, [pc, #256]	@ (80060cc <USBH_HID_InterfaceInit+0x29c>)
 8005fca:	4844      	ldr	r0, [pc, #272]	@ (80060dc <USBH_HID_InterfaceInit+0x2ac>)
 8005fcc:	f7fe fac0 	bl	8004550 <HAL_UART_Transmit>
    return USBH_FAIL;
 8005fd0:	2302      	movs	r3, #2
 8005fd2:	e1af      	b.n	8006334 <USBH_HID_InterfaceInit+0x504>
  }

  /* Initialize hid handler */
  (void)USBH_memset(HID_Handle, 0, sizeof(HID_HandleTypeDef));
 8005fd4:	2234      	movs	r2, #52	@ 0x34
 8005fd6:	2100      	movs	r1, #0
 8005fd8:	6a38      	ldr	r0, [r7, #32]
 8005fda:	f004 f934 	bl	800a246 <memset>

  HID_Handle->state = USBH_HID_ERROR;
 8005fde:	6a3b      	ldr	r3, [r7, #32]
 8005fe0:	2207      	movs	r2, #7
 8005fe2:	709a      	strb	r2, [r3, #2]

  /*Decode Bootclass Protocol: Mouse or Keyboard*/
  if (phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol == HID_KEYBRD_BOOT_CODE)
 8005fe4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005fe8:	687a      	ldr	r2, [r7, #4]
 8005fea:	211a      	movs	r1, #26
 8005fec:	fb01 f303 	mul.w	r3, r1, r3
 8005ff0:	4413      	add	r3, r2
 8005ff2:	f203 3349 	addw	r3, r3, #841	@ 0x349
 8005ff6:	781b      	ldrb	r3, [r3, #0]
 8005ff8:	2b01      	cmp	r3, #1
 8005ffa:	d12d      	bne.n	8006058 <USBH_HID_InterfaceInit+0x228>
  {
    USBH_UsrLog("KeyBoard device found!");
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	617b      	str	r3, [r7, #20]
 8006000:	697b      	ldr	r3, [r7, #20]
 8006002:	4a32      	ldr	r2, [pc, #200]	@ (80060cc <USBH_HID_InterfaceInit+0x29c>)
 8006004:	4413      	add	r3, r2
 8006006:	4938      	ldr	r1, [pc, #224]	@ (80060e8 <USBH_HID_InterfaceInit+0x2b8>)
 8006008:	4618      	mov	r0, r3
 800600a:	f004 f8b9 	bl	800a180 <siprintf>
 800600e:	4602      	mov	r2, r0
 8006010:	697b      	ldr	r3, [r7, #20]
 8006012:	4413      	add	r3, r2
 8006014:	617b      	str	r3, [r7, #20]
 8006016:	697b      	ldr	r3, [r7, #20]
 8006018:	4a2c      	ldr	r2, [pc, #176]	@ (80060cc <USBH_HID_InterfaceInit+0x29c>)
 800601a:	4413      	add	r3, r2
 800601c:	4933      	ldr	r1, [pc, #204]	@ (80060ec <USBH_HID_InterfaceInit+0x2bc>)
 800601e:	4618      	mov	r0, r3
 8006020:	f004 f8ae 	bl	800a180 <siprintf>
 8006024:	4602      	mov	r2, r0
 8006026:	697b      	ldr	r3, [r7, #20]
 8006028:	4413      	add	r3, r2
 800602a:	617b      	str	r3, [r7, #20]
 800602c:	697b      	ldr	r3, [r7, #20]
 800602e:	4a27      	ldr	r2, [pc, #156]	@ (80060cc <USBH_HID_InterfaceInit+0x29c>)
 8006030:	4413      	add	r3, r2
 8006032:	4929      	ldr	r1, [pc, #164]	@ (80060d8 <USBH_HID_InterfaceInit+0x2a8>)
 8006034:	4618      	mov	r0, r3
 8006036:	f004 f8a3 	bl	800a180 <siprintf>
 800603a:	4602      	mov	r2, r0
 800603c:	697b      	ldr	r3, [r7, #20]
 800603e:	4413      	add	r3, r2
 8006040:	617b      	str	r3, [r7, #20]
 8006042:	697b      	ldr	r3, [r7, #20]
 8006044:	b29a      	uxth	r2, r3
 8006046:	2364      	movs	r3, #100	@ 0x64
 8006048:	4920      	ldr	r1, [pc, #128]	@ (80060cc <USBH_HID_InterfaceInit+0x29c>)
 800604a:	4824      	ldr	r0, [pc, #144]	@ (80060dc <USBH_HID_InterfaceInit+0x2ac>)
 800604c:	f7fe fa80 	bl	8004550 <HAL_UART_Transmit>
    HID_Handle->Init = USBH_HID_KeybdInit;
 8006050:	6a3b      	ldr	r3, [r7, #32]
 8006052:	4a27      	ldr	r2, [pc, #156]	@ (80060f0 <USBH_HID_InterfaceInit+0x2c0>)
 8006054:	631a      	str	r2, [r3, #48]	@ 0x30
 8006056:	e07e      	b.n	8006156 <USBH_HID_InterfaceInit+0x326>
  }
  else if (phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol  == HID_MOUSE_BOOT_CODE)
 8006058:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800605c:	687a      	ldr	r2, [r7, #4]
 800605e:	211a      	movs	r1, #26
 8006060:	fb01 f303 	mul.w	r3, r1, r3
 8006064:	4413      	add	r3, r2
 8006066:	f203 3349 	addw	r3, r3, #841	@ 0x349
 800606a:	781b      	ldrb	r3, [r3, #0]
 800606c:	2b02      	cmp	r3, #2
 800606e:	d145      	bne.n	80060fc <USBH_HID_InterfaceInit+0x2cc>
  {
    USBH_UsrLog("Mouse device found!");
 8006070:	2300      	movs	r3, #0
 8006072:	61bb      	str	r3, [r7, #24]
 8006074:	69bb      	ldr	r3, [r7, #24]
 8006076:	4a15      	ldr	r2, [pc, #84]	@ (80060cc <USBH_HID_InterfaceInit+0x29c>)
 8006078:	4413      	add	r3, r2
 800607a:	491b      	ldr	r1, [pc, #108]	@ (80060e8 <USBH_HID_InterfaceInit+0x2b8>)
 800607c:	4618      	mov	r0, r3
 800607e:	f004 f87f 	bl	800a180 <siprintf>
 8006082:	4602      	mov	r2, r0
 8006084:	69bb      	ldr	r3, [r7, #24]
 8006086:	4413      	add	r3, r2
 8006088:	61bb      	str	r3, [r7, #24]
 800608a:	69bb      	ldr	r3, [r7, #24]
 800608c:	4a0f      	ldr	r2, [pc, #60]	@ (80060cc <USBH_HID_InterfaceInit+0x29c>)
 800608e:	4413      	add	r3, r2
 8006090:	4918      	ldr	r1, [pc, #96]	@ (80060f4 <USBH_HID_InterfaceInit+0x2c4>)
 8006092:	4618      	mov	r0, r3
 8006094:	f004 f874 	bl	800a180 <siprintf>
 8006098:	4602      	mov	r2, r0
 800609a:	69bb      	ldr	r3, [r7, #24]
 800609c:	4413      	add	r3, r2
 800609e:	61bb      	str	r3, [r7, #24]
 80060a0:	69bb      	ldr	r3, [r7, #24]
 80060a2:	4a0a      	ldr	r2, [pc, #40]	@ (80060cc <USBH_HID_InterfaceInit+0x29c>)
 80060a4:	4413      	add	r3, r2
 80060a6:	490c      	ldr	r1, [pc, #48]	@ (80060d8 <USBH_HID_InterfaceInit+0x2a8>)
 80060a8:	4618      	mov	r0, r3
 80060aa:	f004 f869 	bl	800a180 <siprintf>
 80060ae:	4602      	mov	r2, r0
 80060b0:	69bb      	ldr	r3, [r7, #24]
 80060b2:	4413      	add	r3, r2
 80060b4:	61bb      	str	r3, [r7, #24]
 80060b6:	69bb      	ldr	r3, [r7, #24]
 80060b8:	b29a      	uxth	r2, r3
 80060ba:	2364      	movs	r3, #100	@ 0x64
 80060bc:	4903      	ldr	r1, [pc, #12]	@ (80060cc <USBH_HID_InterfaceInit+0x29c>)
 80060be:	4807      	ldr	r0, [pc, #28]	@ (80060dc <USBH_HID_InterfaceInit+0x2ac>)
 80060c0:	f7fe fa46 	bl	8004550 <HAL_UART_Transmit>
    HID_Handle->Init = USBH_HID_MouseInit;
 80060c4:	6a3b      	ldr	r3, [r7, #32]
 80060c6:	4a0c      	ldr	r2, [pc, #48]	@ (80060f8 <USBH_HID_InterfaceInit+0x2c8>)
 80060c8:	631a      	str	r2, [r3, #48]	@ 0x30
 80060ca:	e044      	b.n	8006156 <USBH_HID_InterfaceInit+0x326>
 80060cc:	2000012c 	.word	0x2000012c
 80060d0:	0800b17c 	.word	0x0800b17c
 80060d4:	0800b188 	.word	0x0800b188
 80060d8:	0800b190 	.word	0x0800b190
 80060dc:	200000a4 	.word	0x200000a4
 80060e0:	0800b194 	.word	0x0800b194
 80060e4:	0800b1bc 	.word	0x0800b1bc
 80060e8:	0800b1e4 	.word	0x0800b1e4
 80060ec:	0800b1ec 	.word	0x0800b1ec
 80060f0:	08006ae1 	.word	0x08006ae1
 80060f4:	0800b204 	.word	0x0800b204
 80060f8:	08006b89 	.word	0x08006b89
  } else //if (phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol  == HID_PEDAL_BOOT_CODE)
  {
	USBH_UsrLog("Pedal device found!");
 80060fc:	2300      	movs	r3, #0
 80060fe:	61fb      	str	r3, [r7, #28]
 8006100:	69fb      	ldr	r3, [r7, #28]
 8006102:	4a8e      	ldr	r2, [pc, #568]	@ (800633c <USBH_HID_InterfaceInit+0x50c>)
 8006104:	4413      	add	r3, r2
 8006106:	498e      	ldr	r1, [pc, #568]	@ (8006340 <USBH_HID_InterfaceInit+0x510>)
 8006108:	4618      	mov	r0, r3
 800610a:	f004 f839 	bl	800a180 <siprintf>
 800610e:	4602      	mov	r2, r0
 8006110:	69fb      	ldr	r3, [r7, #28]
 8006112:	4413      	add	r3, r2
 8006114:	61fb      	str	r3, [r7, #28]
 8006116:	69fb      	ldr	r3, [r7, #28]
 8006118:	4a88      	ldr	r2, [pc, #544]	@ (800633c <USBH_HID_InterfaceInit+0x50c>)
 800611a:	4413      	add	r3, r2
 800611c:	4989      	ldr	r1, [pc, #548]	@ (8006344 <USBH_HID_InterfaceInit+0x514>)
 800611e:	4618      	mov	r0, r3
 8006120:	f004 f82e 	bl	800a180 <siprintf>
 8006124:	4602      	mov	r2, r0
 8006126:	69fb      	ldr	r3, [r7, #28]
 8006128:	4413      	add	r3, r2
 800612a:	61fb      	str	r3, [r7, #28]
 800612c:	69fb      	ldr	r3, [r7, #28]
 800612e:	4a83      	ldr	r2, [pc, #524]	@ (800633c <USBH_HID_InterfaceInit+0x50c>)
 8006130:	4413      	add	r3, r2
 8006132:	4985      	ldr	r1, [pc, #532]	@ (8006348 <USBH_HID_InterfaceInit+0x518>)
 8006134:	4618      	mov	r0, r3
 8006136:	f004 f823 	bl	800a180 <siprintf>
 800613a:	4602      	mov	r2, r0
 800613c:	69fb      	ldr	r3, [r7, #28]
 800613e:	4413      	add	r3, r2
 8006140:	61fb      	str	r3, [r7, #28]
 8006142:	69fb      	ldr	r3, [r7, #28]
 8006144:	b29a      	uxth	r2, r3
 8006146:	2364      	movs	r3, #100	@ 0x64
 8006148:	497c      	ldr	r1, [pc, #496]	@ (800633c <USBH_HID_InterfaceInit+0x50c>)
 800614a:	4880      	ldr	r0, [pc, #512]	@ (800634c <USBH_HID_InterfaceInit+0x51c>)
 800614c:	f7fe fa00 	bl	8004550 <HAL_UART_Transmit>
	HID_Handle->Init = USBH_HID_PedalInit;
 8006150:	6a3b      	ldr	r3, [r7, #32]
 8006152:	4a7f      	ldr	r2, [pc, #508]	@ (8006350 <USBH_HID_InterfaceInit+0x520>)
 8006154:	631a      	str	r2, [r3, #48]	@ 0x30
  //{
  //  USBH_UsrLog("Protocol not supported.");
  //  return USBH_FAIL;
  //}

  HID_Handle->state     = USBH_HID_INIT;
 8006156:	6a3b      	ldr	r3, [r7, #32]
 8006158:	2200      	movs	r2, #0
 800615a:	709a      	strb	r2, [r3, #2]
  HID_Handle->ctl_state = USBH_HID_REQ_INIT;
 800615c:	6a3b      	ldr	r3, [r7, #32]
 800615e:	2200      	movs	r2, #0
 8006160:	715a      	strb	r2, [r3, #5]
  HID_Handle->ep_addr   = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006162:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006166:	687a      	ldr	r2, [r7, #4]
 8006168:	211a      	movs	r1, #26
 800616a:	fb01 f303 	mul.w	r3, r1, r3
 800616e:	4413      	add	r3, r2
 8006170:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006174:	781a      	ldrb	r2, [r3, #0]
 8006176:	6a3b      	ldr	r3, [r7, #32]
 8006178:	769a      	strb	r2, [r3, #26]
  HID_Handle->length    = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800617a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800617e:	687a      	ldr	r2, [r7, #4]
 8006180:	211a      	movs	r1, #26
 8006182:	fb01 f303 	mul.w	r3, r1, r3
 8006186:	4413      	add	r3, r2
 8006188:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800618c:	881a      	ldrh	r2, [r3, #0]
 800618e:	6a3b      	ldr	r3, [r7, #32]
 8006190:	831a      	strh	r2, [r3, #24]
  HID_Handle->poll      = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bInterval;
 8006192:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006196:	687a      	ldr	r2, [r7, #4]
 8006198:	211a      	movs	r1, #26
 800619a:	fb01 f303 	mul.w	r3, r1, r3
 800619e:	4413      	add	r3, r2
 80061a0:	f203 3352 	addw	r3, r3, #850	@ 0x352
 80061a4:	781b      	ldrb	r3, [r3, #0]
 80061a6:	461a      	mov	r2, r3
 80061a8:	6a3b      	ldr	r3, [r7, #32]
 80061aa:	839a      	strh	r2, [r3, #28]

  if (HID_Handle->poll < HID_MIN_POLL)
 80061ac:	6a3b      	ldr	r3, [r7, #32]
 80061ae:	8b9b      	ldrh	r3, [r3, #28]
 80061b0:	2b09      	cmp	r3, #9
 80061b2:	d802      	bhi.n	80061ba <USBH_HID_InterfaceInit+0x38a>
  {
    HID_Handle->poll = HID_MIN_POLL;
 80061b4:	6a3b      	ldr	r3, [r7, #32]
 80061b6:	220a      	movs	r2, #10
 80061b8:	839a      	strh	r2, [r3, #28]
  }

  /* Check of available number of endpoints */
  /* Find the number of EPs in the Interface Descriptor */
  /* Choose the lower number in order not to overrun the buffer allocated */
  max_ep = ((phost->device.CfgDesc.Itf_Desc[interface].bNumEndpoints <= USBH_MAX_NUM_ENDPOINTS) ?
 80061ba:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80061be:	687a      	ldr	r2, [r7, #4]
 80061c0:	211a      	movs	r1, #26
 80061c2:	fb01 f303 	mul.w	r3, r1, r3
 80061c6:	4413      	add	r3, r2
 80061c8:	f203 3346 	addw	r3, r3, #838	@ 0x346
 80061cc:	781b      	ldrb	r3, [r3, #0]
 80061ce:	2b02      	cmp	r3, #2
 80061d0:	bf28      	it	cs
 80061d2:	2302      	movcs	r3, #2
 80061d4:	74fb      	strb	r3, [r7, #19]
            phost->device.CfgDesc.Itf_Desc[interface].bNumEndpoints : USBH_MAX_NUM_ENDPOINTS);


  /* Decode endpoint IN and OUT address from interface descriptor */
  for (num = 0U; num < max_ep; num++)
 80061d6:	2300      	movs	r3, #0
 80061d8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80061dc:	e0a3      	b.n	8006326 <USBH_HID_InterfaceInit+0x4f6>
  {
    if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].bEndpointAddress & 0x80U) != 0U)
 80061de:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80061e2:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 80061e6:	687a      	ldr	r2, [r7, #4]
 80061e8:	3101      	adds	r1, #1
 80061ea:	00c9      	lsls	r1, r1, #3
 80061ec:	201a      	movs	r0, #26
 80061ee:	fb00 f303 	mul.w	r3, r0, r3
 80061f2:	440b      	add	r3, r1
 80061f4:	4413      	add	r3, r2
 80061f6:	f203 3346 	addw	r3, r3, #838	@ 0x346
 80061fa:	781b      	ldrb	r3, [r3, #0]
 80061fc:	b25b      	sxtb	r3, r3
 80061fe:	2b00      	cmp	r3, #0
 8006200:	da46      	bge.n	8006290 <USBH_HID_InterfaceInit+0x460>
    {
      HID_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].bEndpointAddress);
 8006202:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006206:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 800620a:	687a      	ldr	r2, [r7, #4]
 800620c:	3101      	adds	r1, #1
 800620e:	00c9      	lsls	r1, r1, #3
 8006210:	201a      	movs	r0, #26
 8006212:	fb00 f303 	mul.w	r3, r0, r3
 8006216:	440b      	add	r3, r1
 8006218:	4413      	add	r3, r2
 800621a:	f203 3346 	addw	r3, r3, #838	@ 0x346
 800621e:	781a      	ldrb	r2, [r3, #0]
 8006220:	6a3b      	ldr	r3, [r7, #32]
 8006222:	711a      	strb	r2, [r3, #4]
      HID_Handle->InPipe = USBH_AllocPipe(phost, HID_Handle->InEp);
 8006224:	6a3b      	ldr	r3, [r7, #32]
 8006226:	791b      	ldrb	r3, [r3, #4]
 8006228:	4619      	mov	r1, r3
 800622a:	6878      	ldr	r0, [r7, #4]
 800622c:	f003 fa71 	bl	8009712 <USBH_AllocPipe>
 8006230:	4603      	mov	r3, r0
 8006232:	461a      	mov	r2, r3
 8006234:	6a3b      	ldr	r3, [r7, #32]
 8006236:	705a      	strb	r2, [r3, #1]
      ep_mps = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].wMaxPacketSize;
 8006238:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800623c:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 8006240:	687a      	ldr	r2, [r7, #4]
 8006242:	3101      	adds	r1, #1
 8006244:	00c9      	lsls	r1, r1, #3
 8006246:	201a      	movs	r0, #26
 8006248:	fb00 f303 	mul.w	r3, r0, r3
 800624c:	440b      	add	r3, r1
 800624e:	4413      	add	r3, r2
 8006250:	f503 7352 	add.w	r3, r3, #840	@ 0x348
 8006254:	881b      	ldrh	r3, [r3, #0]
 8006256:	823b      	strh	r3, [r7, #16]

      /* Open pipe for IN endpoint */
      (void)USBH_OpenPipe(phost, HID_Handle->InPipe, HID_Handle->InEp, phost->device.address,
 8006258:	6a3b      	ldr	r3, [r7, #32]
 800625a:	7859      	ldrb	r1, [r3, #1]
 800625c:	6a3b      	ldr	r3, [r7, #32]
 800625e:	7918      	ldrb	r0, [r3, #4]
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800626c:	8a3a      	ldrh	r2, [r7, #16]
 800626e:	9202      	str	r2, [sp, #8]
 8006270:	2203      	movs	r2, #3
 8006272:	9201      	str	r2, [sp, #4]
 8006274:	9300      	str	r3, [sp, #0]
 8006276:	4623      	mov	r3, r4
 8006278:	4602      	mov	r2, r0
 800627a:	6878      	ldr	r0, [r7, #4]
 800627c:	f003 fa1a 	bl	80096b4 <USBH_OpenPipe>
                          phost->device.speed, USB_EP_TYPE_INTR, ep_mps);

      (void)USBH_LL_SetToggle(phost, HID_Handle->InPipe, 0U);
 8006280:	6a3b      	ldr	r3, [r7, #32]
 8006282:	785b      	ldrb	r3, [r3, #1]
 8006284:	2200      	movs	r2, #0
 8006286:	4619      	mov	r1, r3
 8006288:	6878      	ldr	r0, [r7, #4]
 800628a:	f003 fd59 	bl	8009d40 <USBH_LL_SetToggle>
 800628e:	e045      	b.n	800631c <USBH_HID_InterfaceInit+0x4ec>
    }
    else
    {
      HID_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].bEndpointAddress);
 8006290:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006294:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 8006298:	687a      	ldr	r2, [r7, #4]
 800629a:	3101      	adds	r1, #1
 800629c:	00c9      	lsls	r1, r1, #3
 800629e:	201a      	movs	r0, #26
 80062a0:	fb00 f303 	mul.w	r3, r0, r3
 80062a4:	440b      	add	r3, r1
 80062a6:	4413      	add	r3, r2
 80062a8:	f203 3346 	addw	r3, r3, #838	@ 0x346
 80062ac:	781a      	ldrb	r2, [r3, #0]
 80062ae:	6a3b      	ldr	r3, [r7, #32]
 80062b0:	70da      	strb	r2, [r3, #3]
      HID_Handle->OutPipe = USBH_AllocPipe(phost, HID_Handle->OutEp);
 80062b2:	6a3b      	ldr	r3, [r7, #32]
 80062b4:	78db      	ldrb	r3, [r3, #3]
 80062b6:	4619      	mov	r1, r3
 80062b8:	6878      	ldr	r0, [r7, #4]
 80062ba:	f003 fa2a 	bl	8009712 <USBH_AllocPipe>
 80062be:	4603      	mov	r3, r0
 80062c0:	461a      	mov	r2, r3
 80062c2:	6a3b      	ldr	r3, [r7, #32]
 80062c4:	701a      	strb	r2, [r3, #0]
      ep_mps = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].wMaxPacketSize;
 80062c6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80062ca:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 80062ce:	687a      	ldr	r2, [r7, #4]
 80062d0:	3101      	adds	r1, #1
 80062d2:	00c9      	lsls	r1, r1, #3
 80062d4:	201a      	movs	r0, #26
 80062d6:	fb00 f303 	mul.w	r3, r0, r3
 80062da:	440b      	add	r3, r1
 80062dc:	4413      	add	r3, r2
 80062de:	f503 7352 	add.w	r3, r3, #840	@ 0x348
 80062e2:	881b      	ldrh	r3, [r3, #0]
 80062e4:	823b      	strh	r3, [r7, #16]

      /* Open pipe for OUT endpoint */
      (void)USBH_OpenPipe(phost, HID_Handle->OutPipe, HID_Handle->OutEp, phost->device.address,
 80062e6:	6a3b      	ldr	r3, [r7, #32]
 80062e8:	7819      	ldrb	r1, [r3, #0]
 80062ea:	6a3b      	ldr	r3, [r7, #32]
 80062ec:	78d8      	ldrb	r0, [r3, #3]
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80062fa:	8a3a      	ldrh	r2, [r7, #16]
 80062fc:	9202      	str	r2, [sp, #8]
 80062fe:	2203      	movs	r2, #3
 8006300:	9201      	str	r2, [sp, #4]
 8006302:	9300      	str	r3, [sp, #0]
 8006304:	4623      	mov	r3, r4
 8006306:	4602      	mov	r2, r0
 8006308:	6878      	ldr	r0, [r7, #4]
 800630a:	f003 f9d3 	bl	80096b4 <USBH_OpenPipe>
                          phost->device.speed, USB_EP_TYPE_INTR, ep_mps);

      (void)USBH_LL_SetToggle(phost, HID_Handle->OutPipe, 0U);
 800630e:	6a3b      	ldr	r3, [r7, #32]
 8006310:	781b      	ldrb	r3, [r3, #0]
 8006312:	2200      	movs	r2, #0
 8006314:	4619      	mov	r1, r3
 8006316:	6878      	ldr	r0, [r7, #4]
 8006318:	f003 fd12 	bl	8009d40 <USBH_LL_SetToggle>
  for (num = 0U; num < max_ep; num++)
 800631c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006320:	3301      	adds	r3, #1
 8006322:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8006326:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800632a:	7cfb      	ldrb	r3, [r7, #19]
 800632c:	429a      	cmp	r2, r3
 800632e:	f4ff af56 	bcc.w	80061de <USBH_HID_InterfaceInit+0x3ae>
    }
  }

  return USBH_OK;
 8006332:	2300      	movs	r3, #0
}
 8006334:	4618      	mov	r0, r3
 8006336:	3734      	adds	r7, #52	@ 0x34
 8006338:	46bd      	mov	sp, r7
 800633a:	bd90      	pop	{r4, r7, pc}
 800633c:	2000012c 	.word	0x2000012c
 8006340:	0800b1e4 	.word	0x0800b1e4
 8006344:	0800b218 	.word	0x0800b218
 8006348:	0800b190 	.word	0x0800b190
 800634c:	200000a4 	.word	0x200000a4
 8006350:	08006e39 	.word	0x08006e39

08006354 <USBH_HID_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the HID class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006354:	b580      	push	{r7, lr}
 8006356:	b084      	sub	sp, #16
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006362:	69db      	ldr	r3, [r3, #28]
 8006364:	60fb      	str	r3, [r7, #12]

  if (HID_Handle->InPipe != 0x00U)
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	785b      	ldrb	r3, [r3, #1]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d00e      	beq.n	800638c <USBH_HID_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, HID_Handle->InPipe);
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	785b      	ldrb	r3, [r3, #1]
 8006372:	4619      	mov	r1, r3
 8006374:	6878      	ldr	r0, [r7, #4]
 8006376:	f003 f9bc 	bl	80096f2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, HID_Handle->InPipe);
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	785b      	ldrb	r3, [r3, #1]
 800637e:	4619      	mov	r1, r3
 8006380:	6878      	ldr	r0, [r7, #4]
 8006382:	f003 f9e7 	bl	8009754 <USBH_FreePipe>
    HID_Handle->InPipe = 0U;     /* Reset the pipe as Free */
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	2200      	movs	r2, #0
 800638a:	705a      	strb	r2, [r3, #1]
  }

  if (HID_Handle->OutPipe != 0x00U)
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	781b      	ldrb	r3, [r3, #0]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d00e      	beq.n	80063b2 <USBH_HID_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, HID_Handle->OutPipe);
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	781b      	ldrb	r3, [r3, #0]
 8006398:	4619      	mov	r1, r3
 800639a:	6878      	ldr	r0, [r7, #4]
 800639c:	f003 f9a9 	bl	80096f2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, HID_Handle->OutPipe);
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	781b      	ldrb	r3, [r3, #0]
 80063a4:	4619      	mov	r1, r3
 80063a6:	6878      	ldr	r0, [r7, #4]
 80063a8:	f003 f9d4 	bl	8009754 <USBH_FreePipe>
    HID_Handle->OutPipe = 0U;     /* Reset the pipe as Free */
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	2200      	movs	r2, #0
 80063b0:	701a      	strb	r2, [r3, #0]
  }

  if ((phost->pActiveClass->pData) != NULL)
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80063b8:	69db      	ldr	r3, [r3, #28]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d00b      	beq.n	80063d6 <USBH_HID_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80063c4:	69db      	ldr	r3, [r3, #28]
 80063c6:	4618      	mov	r0, r3
 80063c8:	f003 fd48 	bl	8009e5c <free>
    phost->pActiveClass->pData = 0U;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80063d2:	2200      	movs	r2, #0
 80063d4:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80063d6:	2300      	movs	r3, #0
}
 80063d8:	4618      	mov	r0, r3
 80063da:	3710      	adds	r7, #16
 80063dc:	46bd      	mov	sp, r7
 80063de:	bd80      	pop	{r7, pc}

080063e0 <USBH_HID_ClassRequest>:
  *         for HID class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_ClassRequest(USBH_HandleTypeDef *phost)
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b084      	sub	sp, #16
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status         = USBH_BUSY;
 80063e8:	2301      	movs	r3, #1
 80063ea:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef classReqStatus = USBH_BUSY;
 80063ec:	2301      	movs	r3, #1
 80063ee:	73bb      	strb	r3, [r7, #14]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80063f6:	69db      	ldr	r3, [r3, #28]
 80063f8:	60bb      	str	r3, [r7, #8]

  /* Switch HID state machine */
  switch (HID_Handle->ctl_state)
 80063fa:	68bb      	ldr	r3, [r7, #8]
 80063fc:	795b      	ldrb	r3, [r3, #5]
 80063fe:	2b05      	cmp	r3, #5
 8006400:	d872      	bhi.n	80064e8 <USBH_HID_ClassRequest+0x108>
 8006402:	a201      	add	r2, pc, #4	@ (adr r2, 8006408 <USBH_HID_ClassRequest+0x28>)
 8006404:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006408:	08006421 	.word	0x08006421
 800640c:	080064e9 	.word	0x080064e9
 8006410:	0800643b 	.word	0x0800643b
 8006414:	08006421 	.word	0x08006421
 8006418:	08006477 	.word	0x08006477
 800641c:	080064a1 	.word	0x080064a1
  {
    case USBH_HID_REQ_INIT:
    case USBH_HID_REQ_GET_HID_DESC:

      USBH_HID_ParseHIDDesc(&HID_Handle->HID_Desc, phost->device.CfgDesc_Raw);
 8006420:	68bb      	ldr	r3, [r7, #8]
 8006422:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	331c      	adds	r3, #28
 800642a:	4619      	mov	r1, r3
 800642c:	4610      	mov	r0, r2
 800642e:	f000 fa15 	bl	800685c <USBH_HID_ParseHIDDesc>

      HID_Handle->ctl_state = USBH_HID_REQ_GET_REPORT_DESC;
 8006432:	68bb      	ldr	r3, [r7, #8]
 8006434:	2202      	movs	r2, #2
 8006436:	715a      	strb	r2, [r3, #5]

      break;
 8006438:	e05d      	b.n	80064f6 <USBH_HID_ClassRequest+0x116>
    case USBH_HID_REQ_GET_REPORT_DESC:

      /* Get Report Desc */
      classReqStatus = USBH_HID_GetHIDReportDescriptor(phost, HID_Handle->HID_Desc.wItemLength);
 800643a:	68bb      	ldr	r3, [r7, #8]
 800643c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800643e:	4619      	mov	r1, r3
 8006440:	6878      	ldr	r0, [r7, #4]
 8006442:	f000 f965 	bl	8006710 <USBH_HID_GetHIDReportDescriptor>
 8006446:	4603      	mov	r3, r0
 8006448:	73bb      	strb	r3, [r7, #14]
      if (classReqStatus == USBH_OK)
 800644a:	7bbb      	ldrb	r3, [r7, #14]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d103      	bne.n	8006458 <USBH_HID_ClassRequest+0x78>
      {
        /* The descriptor is available in phost->device.Data */
        HID_Handle->ctl_state = USBH_HID_REQ_SET_IDLE;
 8006450:	68bb      	ldr	r3, [r7, #8]
 8006452:	2204      	movs	r2, #4
 8006454:	715a      	strb	r2, [r3, #5]
      else
      {
        /* .. */
      }

      break;
 8006456:	e049      	b.n	80064ec <USBH_HID_ClassRequest+0x10c>
      else if (classReqStatus == USBH_NOT_SUPPORTED)
 8006458:	7bbb      	ldrb	r3, [r7, #14]
 800645a:	2b03      	cmp	r3, #3
 800645c:	d146      	bne.n	80064ec <USBH_HID_ClassRequest+0x10c>
        USBH_ErrLog("Control error: HID: Device Get Report Descriptor request failed");
 800645e:	4828      	ldr	r0, [pc, #160]	@ (8006500 <USBH_HID_ClassRequest+0x120>)
 8006460:	f003 fe74 	bl	800a14c <iprintf>
 8006464:	4827      	ldr	r0, [pc, #156]	@ (8006504 <USBH_HID_ClassRequest+0x124>)
 8006466:	f003 fe71 	bl	800a14c <iprintf>
 800646a:	200a      	movs	r0, #10
 800646c:	f003 fe80 	bl	800a170 <putchar>
        status = USBH_FAIL;
 8006470:	2302      	movs	r3, #2
 8006472:	73fb      	strb	r3, [r7, #15]
      break;
 8006474:	e03a      	b.n	80064ec <USBH_HID_ClassRequest+0x10c>

    case USBH_HID_REQ_SET_IDLE:

      classReqStatus = USBH_HID_SetIdle(phost, 0U, 0U);
 8006476:	2200      	movs	r2, #0
 8006478:	2100      	movs	r1, #0
 800647a:	6878      	ldr	r0, [r7, #4]
 800647c:	f000 f974 	bl	8006768 <USBH_HID_SetIdle>
 8006480:	4603      	mov	r3, r0
 8006482:	73bb      	strb	r3, [r7, #14]

      /* set Idle */
      if (classReqStatus == USBH_OK)
 8006484:	7bbb      	ldrb	r3, [r7, #14]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d103      	bne.n	8006492 <USBH_HID_ClassRequest+0xb2>
      {
        HID_Handle->ctl_state = USBH_HID_REQ_SET_PROTOCOL;
 800648a:	68bb      	ldr	r3, [r7, #8]
 800648c:	2205      	movs	r2, #5
 800648e:	715a      	strb	r2, [r3, #5]
        if (classReqStatus == USBH_NOT_SUPPORTED)
        {
          HID_Handle->ctl_state = USBH_HID_REQ_SET_PROTOCOL;
        }
      }
      break;
 8006490:	e02e      	b.n	80064f0 <USBH_HID_ClassRequest+0x110>
        if (classReqStatus == USBH_NOT_SUPPORTED)
 8006492:	7bbb      	ldrb	r3, [r7, #14]
 8006494:	2b03      	cmp	r3, #3
 8006496:	d12b      	bne.n	80064f0 <USBH_HID_ClassRequest+0x110>
          HID_Handle->ctl_state = USBH_HID_REQ_SET_PROTOCOL;
 8006498:	68bb      	ldr	r3, [r7, #8]
 800649a:	2205      	movs	r2, #5
 800649c:	715a      	strb	r2, [r3, #5]
      break;
 800649e:	e027      	b.n	80064f0 <USBH_HID_ClassRequest+0x110>

    case USBH_HID_REQ_SET_PROTOCOL:
      /* set protocol */
      classReqStatus = USBH_HID_SetProtocol(phost, 0U);
 80064a0:	2100      	movs	r1, #0
 80064a2:	6878      	ldr	r0, [r7, #4]
 80064a4:	f000 f9b4 	bl	8006810 <USBH_HID_SetProtocol>
 80064a8:	4603      	mov	r3, r0
 80064aa:	73bb      	strb	r3, [r7, #14]
      if (classReqStatus == USBH_OK)
 80064ac:	7bbb      	ldrb	r3, [r7, #14]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d10b      	bne.n	80064ca <USBH_HID_ClassRequest+0xea>
      {
        HID_Handle->ctl_state = USBH_HID_REQ_IDLE;
 80064b2:	68bb      	ldr	r3, [r7, #8]
 80064b4:	2201      	movs	r2, #1
 80064b6:	715a      	strb	r2, [r3, #5]

        /* all requests performed */
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80064be:	2102      	movs	r1, #2
 80064c0:	6878      	ldr	r0, [r7, #4]
 80064c2:	4798      	blx	r3
        status = USBH_OK;
 80064c4:	2300      	movs	r3, #0
 80064c6:	73fb      	strb	r3, [r7, #15]
      }
      else
      {
        /* .. */
      }
      break;
 80064c8:	e014      	b.n	80064f4 <USBH_HID_ClassRequest+0x114>
      else if (classReqStatus == USBH_NOT_SUPPORTED)
 80064ca:	7bbb      	ldrb	r3, [r7, #14]
 80064cc:	2b03      	cmp	r3, #3
 80064ce:	d111      	bne.n	80064f4 <USBH_HID_ClassRequest+0x114>
        USBH_ErrLog("Control error: HID: Device Set protocol request failed");
 80064d0:	480b      	ldr	r0, [pc, #44]	@ (8006500 <USBH_HID_ClassRequest+0x120>)
 80064d2:	f003 fe3b 	bl	800a14c <iprintf>
 80064d6:	480c      	ldr	r0, [pc, #48]	@ (8006508 <USBH_HID_ClassRequest+0x128>)
 80064d8:	f003 fe38 	bl	800a14c <iprintf>
 80064dc:	200a      	movs	r0, #10
 80064de:	f003 fe47 	bl	800a170 <putchar>
        status = USBH_FAIL;
 80064e2:	2302      	movs	r3, #2
 80064e4:	73fb      	strb	r3, [r7, #15]
      break;
 80064e6:	e005      	b.n	80064f4 <USBH_HID_ClassRequest+0x114>

    case USBH_HID_REQ_IDLE:
    default:
      break;
 80064e8:	bf00      	nop
 80064ea:	e004      	b.n	80064f6 <USBH_HID_ClassRequest+0x116>
      break;
 80064ec:	bf00      	nop
 80064ee:	e002      	b.n	80064f6 <USBH_HID_ClassRequest+0x116>
      break;
 80064f0:	bf00      	nop
 80064f2:	e000      	b.n	80064f6 <USBH_HID_ClassRequest+0x116>
      break;
 80064f4:	bf00      	nop
  }

  return status;
 80064f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80064f8:	4618      	mov	r0, r3
 80064fa:	3710      	adds	r7, #16
 80064fc:	46bd      	mov	sp, r7
 80064fe:	bd80      	pop	{r7, pc}
 8006500:	0800b22c 	.word	0x0800b22c
 8006504:	0800b234 	.word	0x0800b234
 8006508:	0800b274 	.word	0x0800b274

0800650c <USBH_HID_Process>:
  *         The function is for managing state machine for HID data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_Process(USBH_HandleTypeDef *phost)
{
 800650c:	b580      	push	{r7, lr}
 800650e:	b088      	sub	sp, #32
 8006510:	af02      	add	r7, sp, #8
 8006512:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8006514:	2300      	movs	r3, #0
 8006516:	75fb      	strb	r3, [r7, #23]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800651e:	69db      	ldr	r3, [r3, #28]
 8006520:	613b      	str	r3, [r7, #16]
  uint32_t XferSize;

  switch (HID_Handle->state)
 8006522:	693b      	ldr	r3, [r7, #16]
 8006524:	789b      	ldrb	r3, [r3, #2]
 8006526:	2b06      	cmp	r3, #6
 8006528:	f200 80c1 	bhi.w	80066ae <USBH_HID_Process+0x1a2>
 800652c:	a201      	add	r2, pc, #4	@ (adr r2, 8006534 <USBH_HID_Process+0x28>)
 800652e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006532:	bf00      	nop
 8006534:	08006551 	.word	0x08006551
 8006538:	08006589 	.word	0x08006589
 800653c:	080066af 	.word	0x080066af
 8006540:	080066af 	.word	0x080066af
 8006544:	080065f9 	.word	0x080065f9
 8006548:	080065e3 	.word	0x080065e3
 800654c:	08006627 	.word	0x08006627
  {
    case USBH_HID_INIT:
      status = HID_Handle->Init(phost);
 8006550:	693b      	ldr	r3, [r7, #16]
 8006552:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006554:	6878      	ldr	r0, [r7, #4]
 8006556:	4798      	blx	r3
 8006558:	4603      	mov	r3, r0
 800655a:	75fb      	strb	r3, [r7, #23]

      if (status == USBH_OK)
 800655c:	7dfb      	ldrb	r3, [r7, #23]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d103      	bne.n	800656a <USBH_HID_Process+0x5e>
      {
        HID_Handle->state = USBH_HID_IDLE;
 8006562:	693b      	ldr	r3, [r7, #16]
 8006564:	2201      	movs	r2, #1
 8006566:	709a      	strb	r2, [r3, #2]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006568:	e0a6      	b.n	80066b8 <USBH_HID_Process+0x1ac>
        USBH_ErrLog("HID Class Init failed");
 800656a:	4856      	ldr	r0, [pc, #344]	@ (80066c4 <USBH_HID_Process+0x1b8>)
 800656c:	f003 fdee 	bl	800a14c <iprintf>
 8006570:	4855      	ldr	r0, [pc, #340]	@ (80066c8 <USBH_HID_Process+0x1bc>)
 8006572:	f003 fdeb 	bl	800a14c <iprintf>
 8006576:	200a      	movs	r0, #10
 8006578:	f003 fdfa 	bl	800a170 <putchar>
        HID_Handle->state = USBH_HID_ERROR;
 800657c:	693b      	ldr	r3, [r7, #16]
 800657e:	2207      	movs	r2, #7
 8006580:	709a      	strb	r2, [r3, #2]
        status = USBH_FAIL;
 8006582:	2302      	movs	r3, #2
 8006584:	75fb      	strb	r3, [r7, #23]
      break;
 8006586:	e097      	b.n	80066b8 <USBH_HID_Process+0x1ac>

    case USBH_HID_IDLE:
      status = USBH_HID_GetReport(phost, 0x01U, 0U, HID_Handle->pData, (uint8_t)HID_Handle->length);
 8006588:	693b      	ldr	r3, [r7, #16]
 800658a:	695a      	ldr	r2, [r3, #20]
 800658c:	693b      	ldr	r3, [r7, #16]
 800658e:	8b1b      	ldrh	r3, [r3, #24]
 8006590:	b2db      	uxtb	r3, r3
 8006592:	9300      	str	r3, [sp, #0]
 8006594:	4613      	mov	r3, r2
 8006596:	2200      	movs	r2, #0
 8006598:	2101      	movs	r1, #1
 800659a:	6878      	ldr	r0, [r7, #4]
 800659c:	f000 f90c 	bl	80067b8 <USBH_HID_GetReport>
 80065a0:	4603      	mov	r3, r0
 80065a2:	75fb      	strb	r3, [r7, #23]

      if (status == USBH_OK)
 80065a4:	7dfb      	ldrb	r3, [r7, #23]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d103      	bne.n	80065b2 <USBH_HID_Process+0xa6>
      {
        HID_Handle->state = USBH_HID_SYNC;
 80065aa:	693b      	ldr	r3, [r7, #16]
 80065ac:	2205      	movs	r2, #5
 80065ae:	709a      	strb	r2, [r3, #2]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80065b0:	e082      	b.n	80066b8 <USBH_HID_Process+0x1ac>
      else if (status == USBH_BUSY)
 80065b2:	7dfb      	ldrb	r3, [r7, #23]
 80065b4:	2b01      	cmp	r3, #1
 80065b6:	d105      	bne.n	80065c4 <USBH_HID_Process+0xb8>
        HID_Handle->state = USBH_HID_IDLE;
 80065b8:	693b      	ldr	r3, [r7, #16]
 80065ba:	2201      	movs	r2, #1
 80065bc:	709a      	strb	r2, [r3, #2]
        status = USBH_OK;
 80065be:	2300      	movs	r3, #0
 80065c0:	75fb      	strb	r3, [r7, #23]
      break;
 80065c2:	e079      	b.n	80066b8 <USBH_HID_Process+0x1ac>
      else if (status == USBH_NOT_SUPPORTED)
 80065c4:	7dfb      	ldrb	r3, [r7, #23]
 80065c6:	2b03      	cmp	r3, #3
 80065c8:	d105      	bne.n	80065d6 <USBH_HID_Process+0xca>
        HID_Handle->state = USBH_HID_SYNC;
 80065ca:	693b      	ldr	r3, [r7, #16]
 80065cc:	2205      	movs	r2, #5
 80065ce:	709a      	strb	r2, [r3, #2]
        status = USBH_OK;
 80065d0:	2300      	movs	r3, #0
 80065d2:	75fb      	strb	r3, [r7, #23]
      break;
 80065d4:	e070      	b.n	80066b8 <USBH_HID_Process+0x1ac>
        HID_Handle->state = USBH_HID_ERROR;
 80065d6:	693b      	ldr	r3, [r7, #16]
 80065d8:	2207      	movs	r2, #7
 80065da:	709a      	strb	r2, [r3, #2]
        status = USBH_FAIL;
 80065dc:	2302      	movs	r3, #2
 80065de:	75fb      	strb	r3, [r7, #23]
      break;
 80065e0:	e06a      	b.n	80066b8 <USBH_HID_Process+0x1ac>

    case USBH_HID_SYNC:
      /* Sync with start of Even Frame */
      if ((phost->Timer & 1U) != 0U)
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80065e8:	f003 0301 	and.w	r3, r3, #1
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d060      	beq.n	80066b2 <USBH_HID_Process+0x1a6>
      {
        HID_Handle->state = USBH_HID_GET_DATA;
 80065f0:	693b      	ldr	r3, [r7, #16]
 80065f2:	2204      	movs	r2, #4
 80065f4:	709a      	strb	r2, [r3, #2]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80065f6:	e05c      	b.n	80066b2 <USBH_HID_Process+0x1a6>

    case USBH_HID_GET_DATA:
      (void)USBH_InterruptReceiveData(phost, HID_Handle->pData,
 80065f8:	693b      	ldr	r3, [r7, #16]
 80065fa:	6959      	ldr	r1, [r3, #20]
                                      (uint8_t)HID_Handle->length,
 80065fc:	693b      	ldr	r3, [r7, #16]
 80065fe:	8b1b      	ldrh	r3, [r3, #24]
      (void)USBH_InterruptReceiveData(phost, HID_Handle->pData,
 8006600:	b2da      	uxtb	r2, r3
 8006602:	693b      	ldr	r3, [r7, #16]
 8006604:	785b      	ldrb	r3, [r3, #1]
 8006606:	6878      	ldr	r0, [r7, #4]
 8006608:	f003 f835 	bl	8009676 <USBH_InterruptReceiveData>
                                      HID_Handle->InPipe);

      HID_Handle->state = USBH_HID_POLL;
 800660c:	693b      	ldr	r3, [r7, #16]
 800660e:	2206      	movs	r2, #6
 8006610:	709a      	strb	r2, [r3, #2]
      HID_Handle->timer = phost->Timer;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	f8d3 23c4 	ldr.w	r2, [r3, #964]	@ 0x3c4
 8006618:	693b      	ldr	r3, [r7, #16]
 800661a:	621a      	str	r2, [r3, #32]
      HID_Handle->DataReady = 0U;
 800661c:	693b      	ldr	r3, [r7, #16]
 800661e:	2200      	movs	r2, #0
 8006620:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
      break;
 8006624:	e048      	b.n	80066b8 <USBH_HID_Process+0x1ac>

    case USBH_HID_POLL:
      if (USBH_LL_GetURBState(phost, HID_Handle->InPipe) == USBH_URB_DONE)
 8006626:	693b      	ldr	r3, [r7, #16]
 8006628:	785b      	ldrb	r3, [r3, #1]
 800662a:	4619      	mov	r1, r3
 800662c:	6878      	ldr	r0, [r7, #4]
 800662e:	f003 fb5d 	bl	8009cec <USBH_LL_GetURBState>
 8006632:	4603      	mov	r3, r0
 8006634:	2b01      	cmp	r3, #1
 8006636:	d124      	bne.n	8006682 <USBH_HID_Process+0x176>
      {
        XferSize = USBH_LL_GetLastXferSize(phost, HID_Handle->InPipe);
 8006638:	693b      	ldr	r3, [r7, #16]
 800663a:	785b      	ldrb	r3, [r3, #1]
 800663c:	4619      	mov	r1, r3
 800663e:	6878      	ldr	r0, [r7, #4]
 8006640:	f003 fac2 	bl	8009bc8 <USBH_LL_GetLastXferSize>
 8006644:	60f8      	str	r0, [r7, #12]

        if ((HID_Handle->DataReady == 0U) && (XferSize != 0U) && (HID_Handle->fifo.buf != NULL))
 8006646:	693b      	ldr	r3, [r7, #16]
 8006648:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800664c:	2b00      	cmp	r3, #0
 800664e:	d132      	bne.n	80066b6 <USBH_HID_Process+0x1aa>
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d02f      	beq.n	80066b6 <USBH_HID_Process+0x1aa>
 8006656:	693b      	ldr	r3, [r7, #16]
 8006658:	689b      	ldr	r3, [r3, #8]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d02b      	beq.n	80066b6 <USBH_HID_Process+0x1aa>
        {
          (void)USBH_HID_FifoWrite(&HID_Handle->fifo, HID_Handle->pData, HID_Handle->length);
 800665e:	693b      	ldr	r3, [r7, #16]
 8006660:	f103 0008 	add.w	r0, r3, #8
 8006664:	693b      	ldr	r3, [r7, #16]
 8006666:	6959      	ldr	r1, [r3, #20]
 8006668:	693b      	ldr	r3, [r7, #16]
 800666a:	8b1b      	ldrh	r3, [r3, #24]
 800666c:	461a      	mov	r2, r3
 800666e:	f000 f9e2 	bl	8006a36 <USBH_HID_FifoWrite>
          HID_Handle->DataReady = 1U;
 8006672:	693b      	ldr	r3, [r7, #16]
 8006674:	2201      	movs	r2, #1
 8006676:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          USBH_HID_EventCallback(phost);
 800667a:	6878      	ldr	r0, [r7, #4]
 800667c:	f7f9 ff80 	bl	8000580 <USBH_HID_EventCallback>
            /* Change state to issue next IN token */
            HID_Handle->state = USBH_HID_GET_DATA;
          }
        }
      }
      break;
 8006680:	e019      	b.n	80066b6 <USBH_HID_Process+0x1aa>
        if (USBH_LL_GetURBState(phost, HID_Handle->InPipe) == USBH_URB_STALL)
 8006682:	693b      	ldr	r3, [r7, #16]
 8006684:	785b      	ldrb	r3, [r3, #1]
 8006686:	4619      	mov	r1, r3
 8006688:	6878      	ldr	r0, [r7, #4]
 800668a:	f003 fb2f 	bl	8009cec <USBH_LL_GetURBState>
 800668e:	4603      	mov	r3, r0
 8006690:	2b05      	cmp	r3, #5
 8006692:	d110      	bne.n	80066b6 <USBH_HID_Process+0x1aa>
          if (USBH_ClrFeature(phost, HID_Handle->ep_addr) == USBH_OK)
 8006694:	693b      	ldr	r3, [r7, #16]
 8006696:	7e9b      	ldrb	r3, [r3, #26]
 8006698:	4619      	mov	r1, r3
 800669a:	6878      	ldr	r0, [r7, #4]
 800669c:	f002 fa9a 	bl	8008bd4 <USBH_ClrFeature>
 80066a0:	4603      	mov	r3, r0
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d107      	bne.n	80066b6 <USBH_HID_Process+0x1aa>
            HID_Handle->state = USBH_HID_GET_DATA;
 80066a6:	693b      	ldr	r3, [r7, #16]
 80066a8:	2204      	movs	r2, #4
 80066aa:	709a      	strb	r2, [r3, #2]
      break;
 80066ac:	e003      	b.n	80066b6 <USBH_HID_Process+0x1aa>

    default:
      break;
 80066ae:	bf00      	nop
 80066b0:	e002      	b.n	80066b8 <USBH_HID_Process+0x1ac>
      break;
 80066b2:	bf00      	nop
 80066b4:	e000      	b.n	80066b8 <USBH_HID_Process+0x1ac>
      break;
 80066b6:	bf00      	nop
  }

  return status;
 80066b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80066ba:	4618      	mov	r0, r3
 80066bc:	3718      	adds	r7, #24
 80066be:	46bd      	mov	sp, r7
 80066c0:	bd80      	pop	{r7, pc}
 80066c2:	bf00      	nop
 80066c4:	0800b22c 	.word	0x0800b22c
 80066c8:	0800b2ac 	.word	0x0800b2ac

080066cc <USBH_HID_SOFProcess>:
  *         The function is for managing the SOF Process
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_SOFProcess(USBH_HandleTypeDef *phost)
{
 80066cc:	b480      	push	{r7}
 80066ce:	b085      	sub	sp, #20
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80066da:	69db      	ldr	r3, [r3, #28]
 80066dc:	60fb      	str	r3, [r7, #12]

  if (HID_Handle->state == USBH_HID_POLL)
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	789b      	ldrb	r3, [r3, #2]
 80066e2:	2b06      	cmp	r3, #6
 80066e4:	d10c      	bne.n	8006700 <USBH_HID_SOFProcess+0x34>
  {
    if ((phost->Timer - HID_Handle->timer) >= HID_Handle->poll)
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	f8d3 23c4 	ldr.w	r2, [r3, #964]	@ 0x3c4
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	6a1b      	ldr	r3, [r3, #32]
 80066f0:	1ad3      	subs	r3, r2, r3
 80066f2:	68fa      	ldr	r2, [r7, #12]
 80066f4:	8b92      	ldrh	r2, [r2, #28]
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d302      	bcc.n	8006700 <USBH_HID_SOFProcess+0x34>
    {
      HID_Handle->state = USBH_HID_GET_DATA;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	2204      	movs	r2, #4
 80066fe:	709a      	strb	r2, [r3, #2]
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
    }
  }
  return USBH_OK;
 8006700:	2300      	movs	r3, #0
}
 8006702:	4618      	mov	r0, r3
 8006704:	3714      	adds	r7, #20
 8006706:	46bd      	mov	sp, r7
 8006708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670c:	4770      	bx	lr
	...

08006710 <USBH_HID_GetHIDReportDescriptor>:
  * @param  Length : HID Report Descriptor Length
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_GetHIDReportDescriptor(USBH_HandleTypeDef *phost,
                                                   uint16_t length)
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b086      	sub	sp, #24
 8006714:	af02      	add	r7, sp, #8
 8006716:	6078      	str	r0, [r7, #4]
 8006718:	460b      	mov	r3, r1
 800671a:	807b      	strh	r3, [r7, #2]

  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 800671c:	887b      	ldrh	r3, [r7, #2]
 800671e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006722:	d90a      	bls.n	800673a <USBH_HID_GetHIDReportDescriptor+0x2a>
  {
    USBH_ErrLog("Control error: Get HID Report Descriptor failed, data buffer size issue");
 8006724:	480e      	ldr	r0, [pc, #56]	@ (8006760 <USBH_HID_GetHIDReportDescriptor+0x50>)
 8006726:	f003 fd11 	bl	800a14c <iprintf>
 800672a:	480e      	ldr	r0, [pc, #56]	@ (8006764 <USBH_HID_GetHIDReportDescriptor+0x54>)
 800672c:	f003 fd0e 	bl	800a14c <iprintf>
 8006730:	200a      	movs	r0, #10
 8006732:	f003 fd1d 	bl	800a170 <putchar>
    return USBH_NOT_SUPPORTED;
 8006736:	2303      	movs	r3, #3
 8006738:	e00e      	b.n	8006758 <USBH_HID_GetHIDReportDescriptor+0x48>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_INTERFACE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_HID_REPORT,
                              phost->device.Data,
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8006740:	887b      	ldrh	r3, [r7, #2]
 8006742:	9300      	str	r3, [sp, #0]
 8006744:	4613      	mov	r3, r2
 8006746:	f44f 5208 	mov.w	r2, #8704	@ 0x2200
 800674a:	2101      	movs	r1, #1
 800674c:	6878      	ldr	r0, [r7, #4]
 800674e:	f002 f9a1 	bl	8008a94 <USBH_GetDescriptor>
 8006752:	4603      	mov	r3, r0
 8006754:	73fb      	strb	r3, [r7, #15]
  HID report descriptor parsing is not required.
  In case, for supporting Non-Boot Protocol devices and output reports,
  user may parse the report descriptor*/


  return status;
 8006756:	7bfb      	ldrb	r3, [r7, #15]
}
 8006758:	4618      	mov	r0, r3
 800675a:	3710      	adds	r7, #16
 800675c:	46bd      	mov	sp, r7
 800675e:	bd80      	pop	{r7, pc}
 8006760:	0800b22c 	.word	0x0800b22c
 8006764:	0800b2c4 	.word	0x0800b2c4

08006768 <USBH_HID_SetIdle>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_SetIdle(USBH_HandleTypeDef *phost,
                                    uint8_t duration,
                                    uint8_t reportId)
{
 8006768:	b580      	push	{r7, lr}
 800676a:	b082      	sub	sp, #8
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
 8006770:	460b      	mov	r3, r1
 8006772:	70fb      	strb	r3, [r7, #3]
 8006774:	4613      	mov	r3, r2
 8006776:	70bb      	strb	r3, [r7, #2]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE | \
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2221      	movs	r2, #33	@ 0x21
 800677c:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_TYPE_CLASS;


  phost->Control.setup.b.bRequest = USB_HID_SET_IDLE;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	220a      	movs	r2, #10
 8006782:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = (uint16_t)(((uint32_t)duration << 8U) | (uint32_t)reportId);
 8006784:	78fb      	ldrb	r3, [r7, #3]
 8006786:	b29b      	uxth	r3, r3
 8006788:	021b      	lsls	r3, r3, #8
 800678a:	b29a      	uxth	r2, r3
 800678c:	78bb      	ldrb	r3, [r7, #2]
 800678e:	b29b      	uxth	r3, r3
 8006790:	4313      	orrs	r3, r2
 8006792:	b29a      	uxth	r2, r3
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2200      	movs	r2, #0
 800679c:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	2200      	movs	r2, #0
 80067a2:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, NULL, 0U);
 80067a4:	2200      	movs	r2, #0
 80067a6:	2100      	movs	r1, #0
 80067a8:	6878      	ldr	r0, [r7, #4]
 80067aa:	f002 fd48 	bl	800923e <USBH_CtlReq>
 80067ae:	4603      	mov	r3, r0
}
 80067b0:	4618      	mov	r0, r3
 80067b2:	3708      	adds	r7, #8
 80067b4:	46bd      	mov	sp, r7
 80067b6:	bd80      	pop	{r7, pc}

080067b8 <USBH_HID_GetReport>:
USBH_StatusTypeDef USBH_HID_GetReport(USBH_HandleTypeDef *phost,
                                      uint8_t reportType,
                                      uint8_t reportId,
                                      uint8_t *reportBuff,
                                      uint8_t reportLen)
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b084      	sub	sp, #16
 80067bc:	af00      	add	r7, sp, #0
 80067be:	60f8      	str	r0, [r7, #12]
 80067c0:	607b      	str	r3, [r7, #4]
 80067c2:	460b      	mov	r3, r1
 80067c4:	72fb      	strb	r3, [r7, #11]
 80067c6:	4613      	mov	r3, r2
 80067c8:	72bb      	strb	r3, [r7, #10]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_RECIPIENT_INTERFACE | \
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	22a1      	movs	r2, #161	@ 0xa1
 80067ce:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_TYPE_CLASS;


  phost->Control.setup.b.bRequest = USB_HID_GET_REPORT;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	2201      	movs	r2, #1
 80067d4:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = (uint16_t)(((uint32_t)reportType << 8U) | (uint32_t)reportId);
 80067d6:	7afb      	ldrb	r3, [r7, #11]
 80067d8:	b29b      	uxth	r3, r3
 80067da:	021b      	lsls	r3, r3, #8
 80067dc:	b29a      	uxth	r2, r3
 80067de:	7abb      	ldrb	r3, [r7, #10]
 80067e0:	b29b      	uxth	r3, r3
 80067e2:	4313      	orrs	r3, r2
 80067e4:	b29a      	uxth	r2, r3
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	2200      	movs	r2, #0
 80067ee:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = reportLen;
 80067f0:	7e3b      	ldrb	r3, [r7, #24]
 80067f2:	b29a      	uxth	r2, r3
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, reportBuff, (uint16_t)reportLen);
 80067f8:	7e3b      	ldrb	r3, [r7, #24]
 80067fa:	b29b      	uxth	r3, r3
 80067fc:	461a      	mov	r2, r3
 80067fe:	6879      	ldr	r1, [r7, #4]
 8006800:	68f8      	ldr	r0, [r7, #12]
 8006802:	f002 fd1c 	bl	800923e <USBH_CtlReq>
 8006806:	4603      	mov	r3, r0
}
 8006808:	4618      	mov	r0, r3
 800680a:	3710      	adds	r7, #16
 800680c:	46bd      	mov	sp, r7
 800680e:	bd80      	pop	{r7, pc}

08006810 <USBH_HID_SetProtocol>:
  * @param  protocol : Set Protocol for HID : boot/report protocol
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_SetProtocol(USBH_HandleTypeDef *phost,
                                        uint8_t protocol)
{
 8006810:	b580      	push	{r7, lr}
 8006812:	b082      	sub	sp, #8
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
 8006818:	460b      	mov	r3, r1
 800681a:	70fb      	strb	r3, [r7, #3]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2221      	movs	r2, #33	@ 0x21
 8006820:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_TYPE_CLASS;

  phost->Control.setup.b.bRequest = USB_HID_SET_PROTOCOL;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	220b      	movs	r2, #11
 8006826:	745a      	strb	r2, [r3, #17]
  if (protocol != 0U)
 8006828:	78fb      	ldrb	r3, [r7, #3]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d003      	beq.n	8006836 <USBH_HID_SetProtocol+0x26>
  {
    phost->Control.setup.b.wValue.w = 0U;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2200      	movs	r2, #0
 8006832:	825a      	strh	r2, [r3, #18]
 8006834:	e002      	b.n	800683c <USBH_HID_SetProtocol+0x2c>
  }
  else
  {
    phost->Control.setup.b.wValue.w = 1U;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2201      	movs	r2, #1
 800683a:	825a      	strh	r2, [r3, #18]
  }

  phost->Control.setup.b.wIndex.w = 0U;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2200      	movs	r2, #0
 8006840:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	2200      	movs	r2, #0
 8006846:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, NULL, 0U);
 8006848:	2200      	movs	r2, #0
 800684a:	2100      	movs	r1, #0
 800684c:	6878      	ldr	r0, [r7, #4]
 800684e:	f002 fcf6 	bl	800923e <USBH_CtlReq>
 8006852:	4603      	mov	r3, r0

}
 8006854:	4618      	mov	r0, r3
 8006856:	3708      	adds	r7, #8
 8006858:	46bd      	mov	sp, r7
 800685a:	bd80      	pop	{r7, pc}

0800685c <USBH_HID_ParseHIDDesc>:
  * @param  desc: HID Descriptor
  * @param  buf: Buffer where the source descriptor is available
  * @retval None
  */
static void USBH_HID_ParseHIDDesc(HID_DescTypeDef *desc, uint8_t *buf)
{
 800685c:	b580      	push	{r7, lr}
 800685e:	b084      	sub	sp, #16
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
 8006864:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pdesc = (USBH_DescHeader_t *)buf;
 8006866:	683b      	ldr	r3, [r7, #0]
 8006868:	60fb      	str	r3, [r7, #12]
  uint16_t CfgDescLen;
  uint16_t ptr;

  CfgDescLen = LE16(buf + 2U);
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	3302      	adds	r3, #2
 800686e:	781b      	ldrb	r3, [r3, #0]
 8006870:	461a      	mov	r2, r3
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	3303      	adds	r3, #3
 8006876:	781b      	ldrb	r3, [r3, #0]
 8006878:	021b      	lsls	r3, r3, #8
 800687a:	b29b      	uxth	r3, r3
 800687c:	4313      	orrs	r3, r2
 800687e:	817b      	strh	r3, [r7, #10]

  if (CfgDescLen > USB_CONFIGURATION_DESC_SIZE)
 8006880:	897b      	ldrh	r3, [r7, #10]
 8006882:	2b09      	cmp	r3, #9
 8006884:	d941      	bls.n	800690a <USBH_HID_ParseHIDDesc+0xae>
  {
    ptr = USB_LEN_CFG_DESC;
 8006886:	2309      	movs	r3, #9
 8006888:	813b      	strh	r3, [r7, #8]

    while (ptr < CfgDescLen)
 800688a:	e03a      	b.n	8006902 <USBH_HID_ParseHIDDesc+0xa6>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)pdesc, &ptr);
 800688c:	f107 0308 	add.w	r3, r7, #8
 8006890:	4619      	mov	r1, r3
 8006892:	68f8      	ldr	r0, [r7, #12]
 8006894:	f002 fcb9 	bl	800920a <USBH_GetNextDesc>
 8006898:	60f8      	str	r0, [r7, #12]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_HID)
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	785b      	ldrb	r3, [r3, #1]
 800689e:	2b21      	cmp	r3, #33	@ 0x21
 80068a0:	d12f      	bne.n	8006902 <USBH_HID_ParseHIDDesc+0xa6>
      {
        desc->bLength = *(uint8_t *)((uint8_t *)pdesc + 0U);
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	781a      	ldrb	r2, [r3, #0]
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	701a      	strb	r2, [r3, #0]
        desc->bDescriptorType = *(uint8_t *)((uint8_t *)pdesc + 1U);
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	785a      	ldrb	r2, [r3, #1]
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	705a      	strb	r2, [r3, #1]
        desc->bcdHID = LE16((uint8_t *)pdesc + 2U);
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	3302      	adds	r3, #2
 80068b6:	781b      	ldrb	r3, [r3, #0]
 80068b8:	461a      	mov	r2, r3
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	3303      	adds	r3, #3
 80068be:	781b      	ldrb	r3, [r3, #0]
 80068c0:	021b      	lsls	r3, r3, #8
 80068c2:	b29b      	uxth	r3, r3
 80068c4:	4313      	orrs	r3, r2
 80068c6:	b29a      	uxth	r2, r3
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	805a      	strh	r2, [r3, #2]
        desc->bCountryCode = *(uint8_t *)((uint8_t *)pdesc + 4U);
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	791a      	ldrb	r2, [r3, #4]
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	711a      	strb	r2, [r3, #4]
        desc->bNumDescriptors = *(uint8_t *)((uint8_t *)pdesc + 5U);
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	795a      	ldrb	r2, [r3, #5]
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	715a      	strb	r2, [r3, #5]
        desc->bReportDescriptorType = *(uint8_t *)((uint8_t *)pdesc + 6U);
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	799a      	ldrb	r2, [r3, #6]
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	719a      	strb	r2, [r3, #6]
        desc->wItemLength = LE16((uint8_t *)pdesc + 7U);
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	3307      	adds	r3, #7
 80068e8:	781b      	ldrb	r3, [r3, #0]
 80068ea:	461a      	mov	r2, r3
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	3308      	adds	r3, #8
 80068f0:	781b      	ldrb	r3, [r3, #0]
 80068f2:	021b      	lsls	r3, r3, #8
 80068f4:	b29b      	uxth	r3, r3
 80068f6:	4313      	orrs	r3, r2
 80068f8:	b29a      	uxth	r2, r3
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	811a      	strh	r2, [r3, #8]
        break;
 80068fe:	bf00      	nop
      }
    }
  }
}
 8006900:	e003      	b.n	800690a <USBH_HID_ParseHIDDesc+0xae>
    while (ptr < CfgDescLen)
 8006902:	893b      	ldrh	r3, [r7, #8]
 8006904:	897a      	ldrh	r2, [r7, #10]
 8006906:	429a      	cmp	r2, r3
 8006908:	d8c0      	bhi.n	800688c <USBH_HID_ParseHIDDesc+0x30>
}
 800690a:	bf00      	nop
 800690c:	3710      	adds	r7, #16
 800690e:	46bd      	mov	sp, r7
 8006910:	bd80      	pop	{r7, pc}

08006912 <USBH_HID_GetDeviceType>:
  *         Return Device function.
  * @param  phost: Host handle
  * @retval HID function: HID_MOUSE / HID_KEYBOARD
  */
HID_TypeTypeDef USBH_HID_GetDeviceType(USBH_HandleTypeDef *phost)
{
 8006912:	b480      	push	{r7}
 8006914:	b085      	sub	sp, #20
 8006916:	af00      	add	r7, sp, #0
 8006918:	6078      	str	r0, [r7, #4]
  HID_TypeTypeDef   type = HID_UNKNOWN;
 800691a:	23ff      	movs	r3, #255	@ 0xff
 800691c:	73fb      	strb	r3, [r7, #15]
  uint8_t InterfaceProtocol;

  if (phost->gState == HOST_CLASS)
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	781b      	ldrb	r3, [r3, #0]
 8006922:	b2db      	uxtb	r3, r3
 8006924:	2b0b      	cmp	r3, #11
 8006926:	d11a      	bne.n	800695e <USBH_HID_GetDeviceType+0x4c>
  {
    InterfaceProtocol = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].bInterfaceProtocol;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	f893 3324 	ldrb.w	r3, [r3, #804]	@ 0x324
 800692e:	4619      	mov	r1, r3
 8006930:	687a      	ldr	r2, [r7, #4]
 8006932:	231a      	movs	r3, #26
 8006934:	fb01 f303 	mul.w	r3, r1, r3
 8006938:	4413      	add	r3, r2
 800693a:	f203 3349 	addw	r3, r3, #841	@ 0x349
 800693e:	781b      	ldrb	r3, [r3, #0]
 8006940:	73bb      	strb	r3, [r7, #14]
    if (InterfaceProtocol == HID_KEYBRD_BOOT_CODE)
 8006942:	7bbb      	ldrb	r3, [r7, #14]
 8006944:	2b01      	cmp	r3, #1
 8006946:	d102      	bne.n	800694e <USBH_HID_GetDeviceType+0x3c>
    {
      type = HID_KEYBOARD;
 8006948:	2302      	movs	r3, #2
 800694a:	73fb      	strb	r3, [r7, #15]
 800694c:	e007      	b.n	800695e <USBH_HID_GetDeviceType+0x4c>
    }
    else
    {
      if (InterfaceProtocol == HID_MOUSE_BOOT_CODE)
 800694e:	7bbb      	ldrb	r3, [r7, #14]
 8006950:	2b02      	cmp	r3, #2
 8006952:	d102      	bne.n	800695a <USBH_HID_GetDeviceType+0x48>
      {
        type = HID_MOUSE;
 8006954:	2301      	movs	r3, #1
 8006956:	73fb      	strb	r3, [r7, #15]
 8006958:	e001      	b.n	800695e <USBH_HID_GetDeviceType+0x4c>
      }
      else
      {
        //if (InterfaceProtocol == HID_PEDAL_BOOT_CODE)
        //{
          type = HID_PEDAL;
 800695a:	2303      	movs	r3, #3
 800695c:	73fb      	strb	r3, [r7, #15]
        //}
      }
    }
  }
  return type;
 800695e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006960:	4618      	mov	r0, r3
 8006962:	3714      	adds	r7, #20
 8006964:	46bd      	mov	sp, r7
 8006966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696a:	4770      	bx	lr

0800696c <USBH_HID_FifoInit>:
  * @param  buf: Fifo buffer
  * @param  size: Fifo Size
  * @retval none
  */
void USBH_HID_FifoInit(FIFO_TypeDef *f, uint8_t *buf, uint16_t size)
{
 800696c:	b480      	push	{r7}
 800696e:	b085      	sub	sp, #20
 8006970:	af00      	add	r7, sp, #0
 8006972:	60f8      	str	r0, [r7, #12]
 8006974:	60b9      	str	r1, [r7, #8]
 8006976:	4613      	mov	r3, r2
 8006978:	80fb      	strh	r3, [r7, #6]
  f->head = 0U;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	2200      	movs	r2, #0
 800697e:	809a      	strh	r2, [r3, #4]
  f->tail = 0U;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	2200      	movs	r2, #0
 8006984:	80da      	strh	r2, [r3, #6]
  f->lock = 0U;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	2200      	movs	r2, #0
 800698a:	729a      	strb	r2, [r3, #10]
  f->size = size;
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	88fa      	ldrh	r2, [r7, #6]
 8006990:	811a      	strh	r2, [r3, #8]
  f->buf = buf;
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	68ba      	ldr	r2, [r7, #8]
 8006996:	601a      	str	r2, [r3, #0]
}
 8006998:	bf00      	nop
 800699a:	3714      	adds	r7, #20
 800699c:	46bd      	mov	sp, r7
 800699e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a2:	4770      	bx	lr

080069a4 <USBH_HID_FifoRead>:
  * @param  buf: read buffer
  * @param  nbytes: number of item to read
  * @retval number of read items
  */
uint16_t USBH_HID_FifoRead(FIFO_TypeDef *f, void *buf, uint16_t nbytes)
{
 80069a4:	b480      	push	{r7}
 80069a6:	b087      	sub	sp, #28
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	60f8      	str	r0, [r7, #12]
 80069ac:	60b9      	str	r1, [r7, #8]
 80069ae:	4613      	mov	r3, r2
 80069b0:	80fb      	strh	r3, [r7, #6]
  uint16_t i;
  uint8_t *p;

  p = (uint8_t *) buf;
 80069b2:	68bb      	ldr	r3, [r7, #8]
 80069b4:	613b      	str	r3, [r7, #16]

  if (f->lock == 0U)
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	7a9b      	ldrb	r3, [r3, #10]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d131      	bne.n	8006a22 <USBH_HID_FifoRead+0x7e>
  {
    f->lock = 1U;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	2201      	movs	r2, #1
 80069c2:	729a      	strb	r2, [r3, #10]

    for (i = 0U; i < nbytes; i++)
 80069c4:	2300      	movs	r3, #0
 80069c6:	82fb      	strh	r3, [r7, #22]
 80069c8:	e027      	b.n	8006a1a <USBH_HID_FifoRead+0x76>
    {
      if (f->tail != f->head)
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	88da      	ldrh	r2, [r3, #6]
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	889b      	ldrh	r3, [r3, #4]
 80069d2:	429a      	cmp	r2, r3
 80069d4:	d019      	beq.n	8006a0a <USBH_HID_FifoRead+0x66>
      {
        *p++ = f->buf[f->tail];
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	68fa      	ldr	r2, [r7, #12]
 80069dc:	88d2      	ldrh	r2, [r2, #6]
 80069de:	441a      	add	r2, r3
 80069e0:	693b      	ldr	r3, [r7, #16]
 80069e2:	1c59      	adds	r1, r3, #1
 80069e4:	6139      	str	r1, [r7, #16]
 80069e6:	7812      	ldrb	r2, [r2, #0]
 80069e8:	701a      	strb	r2, [r3, #0]
        f->tail++;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	88db      	ldrh	r3, [r3, #6]
 80069ee:	3301      	adds	r3, #1
 80069f0:	b29a      	uxth	r2, r3
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	80da      	strh	r2, [r3, #6]

        if (f->tail == f->size)
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	88da      	ldrh	r2, [r3, #6]
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	891b      	ldrh	r3, [r3, #8]
 80069fe:	429a      	cmp	r2, r3
 8006a00:	d108      	bne.n	8006a14 <USBH_HID_FifoRead+0x70>
        {
          f->tail = 0U;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	2200      	movs	r2, #0
 8006a06:	80da      	strh	r2, [r3, #6]
 8006a08:	e004      	b.n	8006a14 <USBH_HID_FifoRead+0x70>
        }
      }
      else
      {
        f->lock = 0U;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	729a      	strb	r2, [r3, #10]
        return i;
 8006a10:	8afb      	ldrh	r3, [r7, #22]
 8006a12:	e00a      	b.n	8006a2a <USBH_HID_FifoRead+0x86>
    for (i = 0U; i < nbytes; i++)
 8006a14:	8afb      	ldrh	r3, [r7, #22]
 8006a16:	3301      	adds	r3, #1
 8006a18:	82fb      	strh	r3, [r7, #22]
 8006a1a:	8afa      	ldrh	r2, [r7, #22]
 8006a1c:	88fb      	ldrh	r3, [r7, #6]
 8006a1e:	429a      	cmp	r2, r3
 8006a20:	d3d3      	bcc.n	80069ca <USBH_HID_FifoRead+0x26>
      }
    }
  }

  f->lock = 0U;
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	2200      	movs	r2, #0
 8006a26:	729a      	strb	r2, [r3, #10]

  return nbytes;
 8006a28:	88fb      	ldrh	r3, [r7, #6]
}
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	371c      	adds	r7, #28
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a34:	4770      	bx	lr

08006a36 <USBH_HID_FifoWrite>:
  * @param  buf: read buffer
  * @param  nbytes: number of item to write
  * @retval number of written items
  */
uint16_t USBH_HID_FifoWrite(FIFO_TypeDef *f, void *buf, uint16_t  nbytes)
{
 8006a36:	b480      	push	{r7}
 8006a38:	b087      	sub	sp, #28
 8006a3a:	af00      	add	r7, sp, #0
 8006a3c:	60f8      	str	r0, [r7, #12]
 8006a3e:	60b9      	str	r1, [r7, #8]
 8006a40:	4613      	mov	r3, r2
 8006a42:	80fb      	strh	r3, [r7, #6]
  uint16_t i;
  uint8_t *p;

  p = (uint8_t *) buf;
 8006a44:	68bb      	ldr	r3, [r7, #8]
 8006a46:	613b      	str	r3, [r7, #16]

  if (f->lock == 0U)
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	7a9b      	ldrb	r3, [r3, #10]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d13c      	bne.n	8006aca <USBH_HID_FifoWrite+0x94>
  {
    f->lock = 1U;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	2201      	movs	r2, #1
 8006a54:	729a      	strb	r2, [r3, #10]

    for (i = 0U; i < nbytes; i++)
 8006a56:	2300      	movs	r3, #0
 8006a58:	82fb      	strh	r3, [r7, #22]
 8006a5a:	e032      	b.n	8006ac2 <USBH_HID_FifoWrite+0x8c>
    {
      if (((f->head + 1U) == f->tail) ||
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	889b      	ldrh	r3, [r3, #4]
 8006a60:	3301      	adds	r3, #1
 8006a62:	68fa      	ldr	r2, [r7, #12]
 8006a64:	88d2      	ldrh	r2, [r2, #6]
 8006a66:	4293      	cmp	r3, r2
 8006a68:	d00a      	beq.n	8006a80 <USBH_HID_FifoWrite+0x4a>
          (((f->head + 1U) == f->size) && (f->tail == 0U)))
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	889b      	ldrh	r3, [r3, #4]
 8006a6e:	3301      	adds	r3, #1
 8006a70:	68fa      	ldr	r2, [r7, #12]
 8006a72:	8912      	ldrh	r2, [r2, #8]
      if (((f->head + 1U) == f->tail) ||
 8006a74:	4293      	cmp	r3, r2
 8006a76:	d108      	bne.n	8006a8a <USBH_HID_FifoWrite+0x54>
          (((f->head + 1U) == f->size) && (f->tail == 0U)))
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	88db      	ldrh	r3, [r3, #6]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d104      	bne.n	8006a8a <USBH_HID_FifoWrite+0x54>
      {
        f->lock = 0U;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	2200      	movs	r2, #0
 8006a84:	729a      	strb	r2, [r3, #10]
        return i;
 8006a86:	8afb      	ldrh	r3, [r7, #22]
 8006a88:	e023      	b.n	8006ad2 <USBH_HID_FifoWrite+0x9c>
      }
      else
      {
        f->buf[f->head] = *p++;
 8006a8a:	693b      	ldr	r3, [r7, #16]
 8006a8c:	1c5a      	adds	r2, r3, #1
 8006a8e:	613a      	str	r2, [r7, #16]
 8006a90:	68fa      	ldr	r2, [r7, #12]
 8006a92:	6812      	ldr	r2, [r2, #0]
 8006a94:	68f9      	ldr	r1, [r7, #12]
 8006a96:	8889      	ldrh	r1, [r1, #4]
 8006a98:	440a      	add	r2, r1
 8006a9a:	781b      	ldrb	r3, [r3, #0]
 8006a9c:	7013      	strb	r3, [r2, #0]
        f->head++;
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	889b      	ldrh	r3, [r3, #4]
 8006aa2:	3301      	adds	r3, #1
 8006aa4:	b29a      	uxth	r2, r3
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	809a      	strh	r2, [r3, #4]

        if (f->head == f->size)
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	889a      	ldrh	r2, [r3, #4]
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	891b      	ldrh	r3, [r3, #8]
 8006ab2:	429a      	cmp	r2, r3
 8006ab4:	d102      	bne.n	8006abc <USBH_HID_FifoWrite+0x86>
        {
          f->head = 0U;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	2200      	movs	r2, #0
 8006aba:	809a      	strh	r2, [r3, #4]
    for (i = 0U; i < nbytes; i++)
 8006abc:	8afb      	ldrh	r3, [r7, #22]
 8006abe:	3301      	adds	r3, #1
 8006ac0:	82fb      	strh	r3, [r7, #22]
 8006ac2:	8afa      	ldrh	r2, [r7, #22]
 8006ac4:	88fb      	ldrh	r3, [r7, #6]
 8006ac6:	429a      	cmp	r2, r3
 8006ac8:	d3c8      	bcc.n	8006a5c <USBH_HID_FifoWrite+0x26>
        }
      }
    }
  }

  f->lock = 0U;
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	2200      	movs	r2, #0
 8006ace:	729a      	strb	r2, [r3, #10]

  return nbytes;
 8006ad0:	88fb      	ldrh	r3, [r7, #6]
}
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	371c      	adds	r7, #28
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006adc:	4770      	bx	lr
	...

08006ae0 <USBH_HID_KeybdInit>:
  *         The function init the HID keyboard.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_KeybdInit(USBH_HandleTypeDef *phost)
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b084      	sub	sp, #16
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
  uint32_t x;
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006aee:	69db      	ldr	r3, [r3, #28]
 8006af0:	60bb      	str	r3, [r7, #8]

  keybd_info.lctrl = 0U;
 8006af2:	4b22      	ldr	r3, [pc, #136]	@ (8006b7c <USBH_HID_KeybdInit+0x9c>)
 8006af4:	2200      	movs	r2, #0
 8006af6:	705a      	strb	r2, [r3, #1]
  keybd_info.lshift = 0U;
 8006af8:	4b20      	ldr	r3, [pc, #128]	@ (8006b7c <USBH_HID_KeybdInit+0x9c>)
 8006afa:	2200      	movs	r2, #0
 8006afc:	709a      	strb	r2, [r3, #2]
  keybd_info.lalt = 0U;
 8006afe:	4b1f      	ldr	r3, [pc, #124]	@ (8006b7c <USBH_HID_KeybdInit+0x9c>)
 8006b00:	2200      	movs	r2, #0
 8006b02:	70da      	strb	r2, [r3, #3]
  keybd_info.lgui = 0U;
 8006b04:	4b1d      	ldr	r3, [pc, #116]	@ (8006b7c <USBH_HID_KeybdInit+0x9c>)
 8006b06:	2200      	movs	r2, #0
 8006b08:	711a      	strb	r2, [r3, #4]
  keybd_info.rctrl = 0U;
 8006b0a:	4b1c      	ldr	r3, [pc, #112]	@ (8006b7c <USBH_HID_KeybdInit+0x9c>)
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	715a      	strb	r2, [r3, #5]
  keybd_info.rshift = 0U;
 8006b10:	4b1a      	ldr	r3, [pc, #104]	@ (8006b7c <USBH_HID_KeybdInit+0x9c>)
 8006b12:	2200      	movs	r2, #0
 8006b14:	719a      	strb	r2, [r3, #6]
  keybd_info.ralt = 0U;
 8006b16:	4b19      	ldr	r3, [pc, #100]	@ (8006b7c <USBH_HID_KeybdInit+0x9c>)
 8006b18:	2200      	movs	r2, #0
 8006b1a:	71da      	strb	r2, [r3, #7]
  keybd_info.rgui = 0U;
 8006b1c:	4b17      	ldr	r3, [pc, #92]	@ (8006b7c <USBH_HID_KeybdInit+0x9c>)
 8006b1e:	2200      	movs	r2, #0
 8006b20:	721a      	strb	r2, [r3, #8]

  for (x = 0U; x < sizeof(keybd_report_data); x++)
 8006b22:	2300      	movs	r3, #0
 8006b24:	60fb      	str	r3, [r7, #12]
 8006b26:	e00c      	b.n	8006b42 <USBH_HID_KeybdInit+0x62>
  {
    keybd_report_data[x] = 0U;
 8006b28:	4a15      	ldr	r2, [pc, #84]	@ (8006b80 <USBH_HID_KeybdInit+0xa0>)
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	4413      	add	r3, r2
 8006b2e:	2200      	movs	r2, #0
 8006b30:	701a      	strb	r2, [r3, #0]
    keybd_rx_report_buf[x] = 0U;
 8006b32:	4a14      	ldr	r2, [pc, #80]	@ (8006b84 <USBH_HID_KeybdInit+0xa4>)
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	4413      	add	r3, r2
 8006b38:	2200      	movs	r2, #0
 8006b3a:	701a      	strb	r2, [r3, #0]
  for (x = 0U; x < sizeof(keybd_report_data); x++)
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	3301      	adds	r3, #1
 8006b40:	60fb      	str	r3, [r7, #12]
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	2b07      	cmp	r3, #7
 8006b46:	d9ef      	bls.n	8006b28 <USBH_HID_KeybdInit+0x48>
  }

  if (HID_Handle->length > (sizeof(keybd_report_data)))
 8006b48:	68bb      	ldr	r3, [r7, #8]
 8006b4a:	8b1b      	ldrh	r3, [r3, #24]
 8006b4c:	2b08      	cmp	r3, #8
 8006b4e:	d902      	bls.n	8006b56 <USBH_HID_KeybdInit+0x76>
  {
    HID_Handle->length = (uint16_t)(sizeof(keybd_report_data));
 8006b50:	68bb      	ldr	r3, [r7, #8]
 8006b52:	2208      	movs	r2, #8
 8006b54:	831a      	strh	r2, [r3, #24]
  }

  HID_Handle->pData = keybd_rx_report_buf;
 8006b56:	68bb      	ldr	r3, [r7, #8]
 8006b58:	4a0a      	ldr	r2, [pc, #40]	@ (8006b84 <USBH_HID_KeybdInit+0xa4>)
 8006b5a:	615a      	str	r2, [r3, #20]
  {
    return USBH_FAIL;
  }
  else
  {
    USBH_HID_FifoInit(&HID_Handle->fifo, phost->device.Data, (uint16_t)(HID_QUEUE_SIZE * sizeof(keybd_report_data)));
 8006b5c:	68bb      	ldr	r3, [r7, #8]
 8006b5e:	f103 0008 	add.w	r0, r3, #8
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8006b68:	2250      	movs	r2, #80	@ 0x50
 8006b6a:	4619      	mov	r1, r3
 8006b6c:	f7ff fefe 	bl	800696c <USBH_HID_FifoInit>
  }

  return USBH_OK;
 8006b70:	2300      	movs	r3, #0
}
 8006b72:	4618      	mov	r0, r3
 8006b74:	3710      	adds	r7, #16
 8006b76:	46bd      	mov	sp, r7
 8006b78:	bd80      	pop	{r7, pc}
 8006b7a:	bf00      	nop
 8006b7c:	2000053c 	.word	0x2000053c
 8006b80:	20000554 	.word	0x20000554
 8006b84:	2000054c 	.word	0x2000054c

08006b88 <USBH_HID_MouseInit>:
  *         The function init the HID mouse.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_MouseInit(USBH_HandleTypeDef *phost)
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b084      	sub	sp, #16
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
  uint32_t i;
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006b96:	69db      	ldr	r3, [r3, #28]
 8006b98:	60bb      	str	r3, [r7, #8]

  mouse_info.x = 0U;
 8006b9a:	4b1d      	ldr	r3, [pc, #116]	@ (8006c10 <USBH_HID_MouseInit+0x88>)
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	701a      	strb	r2, [r3, #0]
  mouse_info.y = 0U;
 8006ba0:	4b1b      	ldr	r3, [pc, #108]	@ (8006c10 <USBH_HID_MouseInit+0x88>)
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	705a      	strb	r2, [r3, #1]
  mouse_info.buttons[0] = 0U;
 8006ba6:	4b1a      	ldr	r3, [pc, #104]	@ (8006c10 <USBH_HID_MouseInit+0x88>)
 8006ba8:	2200      	movs	r2, #0
 8006baa:	709a      	strb	r2, [r3, #2]
  mouse_info.buttons[1] = 0U;
 8006bac:	4b18      	ldr	r3, [pc, #96]	@ (8006c10 <USBH_HID_MouseInit+0x88>)
 8006bae:	2200      	movs	r2, #0
 8006bb0:	70da      	strb	r2, [r3, #3]
  mouse_info.buttons[2] = 0U;
 8006bb2:	4b17      	ldr	r3, [pc, #92]	@ (8006c10 <USBH_HID_MouseInit+0x88>)
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	711a      	strb	r2, [r3, #4]

  for (i = 0U; i < sizeof(mouse_report_data); i++)
 8006bb8:	2300      	movs	r3, #0
 8006bba:	60fb      	str	r3, [r7, #12]
 8006bbc:	e00c      	b.n	8006bd8 <USBH_HID_MouseInit+0x50>
  {
    mouse_report_data[i] = 0U;
 8006bbe:	4a15      	ldr	r2, [pc, #84]	@ (8006c14 <USBH_HID_MouseInit+0x8c>)
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	4413      	add	r3, r2
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	701a      	strb	r2, [r3, #0]
    mouse_rx_report_buf[i] = 0U;
 8006bc8:	4a13      	ldr	r2, [pc, #76]	@ (8006c18 <USBH_HID_MouseInit+0x90>)
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	4413      	add	r3, r2
 8006bce:	2200      	movs	r2, #0
 8006bd0:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < sizeof(mouse_report_data); i++)
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	3301      	adds	r3, #1
 8006bd6:	60fb      	str	r3, [r7, #12]
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	2b07      	cmp	r3, #7
 8006bdc:	d9ef      	bls.n	8006bbe <USBH_HID_MouseInit+0x36>
  }

  if (HID_Handle->length > sizeof(mouse_report_data))
 8006bde:	68bb      	ldr	r3, [r7, #8]
 8006be0:	8b1b      	ldrh	r3, [r3, #24]
 8006be2:	2b08      	cmp	r3, #8
 8006be4:	d902      	bls.n	8006bec <USBH_HID_MouseInit+0x64>
  {
    HID_Handle->length = (uint16_t)sizeof(mouse_report_data);
 8006be6:	68bb      	ldr	r3, [r7, #8]
 8006be8:	2208      	movs	r2, #8
 8006bea:	831a      	strh	r2, [r3, #24]
  }
  HID_Handle->pData = mouse_rx_report_buf;
 8006bec:	68bb      	ldr	r3, [r7, #8]
 8006bee:	4a0a      	ldr	r2, [pc, #40]	@ (8006c18 <USBH_HID_MouseInit+0x90>)
 8006bf0:	615a      	str	r2, [r3, #20]
  {
    return USBH_FAIL;
  }
  else
  {
    USBH_HID_FifoInit(&HID_Handle->fifo, phost->device.Data, (uint16_t)(HID_QUEUE_SIZE * sizeof(mouse_report_data)));
 8006bf2:	68bb      	ldr	r3, [r7, #8]
 8006bf4:	f103 0008 	add.w	r0, r3, #8
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8006bfe:	2250      	movs	r2, #80	@ 0x50
 8006c00:	4619      	mov	r1, r3
 8006c02:	f7ff feb3 	bl	800696c <USBH_HID_FifoInit>
  }

  return USBH_OK;
 8006c06:	2300      	movs	r3, #0
}
 8006c08:	4618      	mov	r0, r3
 8006c0a:	3710      	adds	r7, #16
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	bd80      	pop	{r7, pc}
 8006c10:	2000055c 	.word	0x2000055c
 8006c14:	20000564 	.word	0x20000564
 8006c18:	2000056c 	.word	0x2000056c

08006c1c <USBH_HID_GetMouseInfo>:
  *         The function return mouse information.
  * @param  phost: Host handle
  * @retval mouse information
  */
HID_MOUSE_Info_TypeDef *USBH_HID_GetMouseInfo(USBH_HandleTypeDef *phost)
{
 8006c1c:	b580      	push	{r7, lr}
 8006c1e:	b082      	sub	sp, #8
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
  if (USBH_HID_MouseDecode(phost) == USBH_OK)
 8006c24:	6878      	ldr	r0, [r7, #4]
 8006c26:	f000 f80d 	bl	8006c44 <USBH_HID_MouseDecode>
 8006c2a:	4603      	mov	r3, r0
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d101      	bne.n	8006c34 <USBH_HID_GetMouseInfo+0x18>
  {
    return &mouse_info;
 8006c30:	4b03      	ldr	r3, [pc, #12]	@ (8006c40 <USBH_HID_GetMouseInfo+0x24>)
 8006c32:	e000      	b.n	8006c36 <USBH_HID_GetMouseInfo+0x1a>
  }
  else
  {
    return NULL;
 8006c34:	2300      	movs	r3, #0
  }
}
 8006c36:	4618      	mov	r0, r3
 8006c38:	3708      	adds	r7, #8
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	bd80      	pop	{r7, pc}
 8006c3e:	bf00      	nop
 8006c40:	2000055c 	.word	0x2000055c

08006c44 <USBH_HID_MouseDecode>:
  *         The function decode mouse data.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_MouseDecode(USBH_HandleTypeDef *phost)
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b084      	sub	sp, #16
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006c52:	69db      	ldr	r3, [r3, #28]
 8006c54:	60fb      	str	r3, [r7, #12]

  if ((HID_Handle->length == 0U) || (HID_Handle->fifo.buf == NULL))
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	8b1b      	ldrh	r3, [r3, #24]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d003      	beq.n	8006c66 <USBH_HID_MouseDecode+0x22>
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	689b      	ldr	r3, [r3, #8]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d101      	bne.n	8006c6a <USBH_HID_MouseDecode+0x26>
  {
    return USBH_FAIL;
 8006c66:	2302      	movs	r3, #2
 8006c68:	e039      	b.n	8006cde <USBH_HID_MouseDecode+0x9a>
  }
  /*Fill report */
  if (USBH_HID_FifoRead(&HID_Handle->fifo, &mouse_report_data, HID_Handle->length) == HID_Handle->length)
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	f103 0008 	add.w	r0, r3, #8
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	8b1b      	ldrh	r3, [r3, #24]
 8006c74:	461a      	mov	r2, r3
 8006c76:	491c      	ldr	r1, [pc, #112]	@ (8006ce8 <USBH_HID_MouseDecode+0xa4>)
 8006c78:	f7ff fe94 	bl	80069a4 <USBH_HID_FifoRead>
 8006c7c:	4603      	mov	r3, r0
 8006c7e:	461a      	mov	r2, r3
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	8b1b      	ldrh	r3, [r3, #24]
 8006c84:	429a      	cmp	r2, r3
 8006c86:	d129      	bne.n	8006cdc <USBH_HID_MouseDecode+0x98>
  {
    /*Decode report */
    mouse_info.x = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &prop_x, 0U);
 8006c88:	2100      	movs	r1, #0
 8006c8a:	4818      	ldr	r0, [pc, #96]	@ (8006cec <USBH_HID_MouseDecode+0xa8>)
 8006c8c:	f000 f83a 	bl	8006d04 <HID_ReadItem>
 8006c90:	4603      	mov	r3, r0
 8006c92:	b2da      	uxtb	r2, r3
 8006c94:	4b16      	ldr	r3, [pc, #88]	@ (8006cf0 <USBH_HID_MouseDecode+0xac>)
 8006c96:	701a      	strb	r2, [r3, #0]
    mouse_info.y = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &prop_y, 0U);
 8006c98:	2100      	movs	r1, #0
 8006c9a:	4816      	ldr	r0, [pc, #88]	@ (8006cf4 <USBH_HID_MouseDecode+0xb0>)
 8006c9c:	f000 f832 	bl	8006d04 <HID_ReadItem>
 8006ca0:	4603      	mov	r3, r0
 8006ca2:	b2da      	uxtb	r2, r3
 8006ca4:	4b12      	ldr	r3, [pc, #72]	@ (8006cf0 <USBH_HID_MouseDecode+0xac>)
 8006ca6:	705a      	strb	r2, [r3, #1]

    mouse_info.buttons[0] = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &prop_b1, 0U);
 8006ca8:	2100      	movs	r1, #0
 8006caa:	4813      	ldr	r0, [pc, #76]	@ (8006cf8 <USBH_HID_MouseDecode+0xb4>)
 8006cac:	f000 f82a 	bl	8006d04 <HID_ReadItem>
 8006cb0:	4603      	mov	r3, r0
 8006cb2:	b2da      	uxtb	r2, r3
 8006cb4:	4b0e      	ldr	r3, [pc, #56]	@ (8006cf0 <USBH_HID_MouseDecode+0xac>)
 8006cb6:	709a      	strb	r2, [r3, #2]
    mouse_info.buttons[1] = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &prop_b2, 0U);
 8006cb8:	2100      	movs	r1, #0
 8006cba:	4810      	ldr	r0, [pc, #64]	@ (8006cfc <USBH_HID_MouseDecode+0xb8>)
 8006cbc:	f000 f822 	bl	8006d04 <HID_ReadItem>
 8006cc0:	4603      	mov	r3, r0
 8006cc2:	b2da      	uxtb	r2, r3
 8006cc4:	4b0a      	ldr	r3, [pc, #40]	@ (8006cf0 <USBH_HID_MouseDecode+0xac>)
 8006cc6:	70da      	strb	r2, [r3, #3]
    mouse_info.buttons[2] = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &prop_b3, 0U);
 8006cc8:	2100      	movs	r1, #0
 8006cca:	480d      	ldr	r0, [pc, #52]	@ (8006d00 <USBH_HID_MouseDecode+0xbc>)
 8006ccc:	f000 f81a 	bl	8006d04 <HID_ReadItem>
 8006cd0:	4603      	mov	r3, r0
 8006cd2:	b2da      	uxtb	r2, r3
 8006cd4:	4b06      	ldr	r3, [pc, #24]	@ (8006cf0 <USBH_HID_MouseDecode+0xac>)
 8006cd6:	711a      	strb	r2, [r3, #4]

    return USBH_OK;
 8006cd8:	2300      	movs	r3, #0
 8006cda:	e000      	b.n	8006cde <USBH_HID_MouseDecode+0x9a>
  }
  return   USBH_FAIL;
 8006cdc:	2302      	movs	r3, #2
}
 8006cde:	4618      	mov	r0, r3
 8006ce0:	3710      	adds	r7, #16
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	bd80      	pop	{r7, pc}
 8006ce6:	bf00      	nop
 8006ce8:	20000564 	.word	0x20000564
 8006cec:	0800b9a8 	.word	0x0800b9a8
 8006cf0:	2000055c 	.word	0x2000055c
 8006cf4:	0800b9c8 	.word	0x0800b9c8
 8006cf8:	0800b948 	.word	0x0800b948
 8006cfc:	0800b968 	.word	0x0800b968
 8006d00:	0800b988 	.word	0x0800b988

08006d04 <HID_ReadItem>:
  * @param  ri: report item
  * @param  ndx: report index
  * @retval status (0 : fail / otherwise: item value)
  */
uint32_t HID_ReadItem(HID_Report_ItemTypedef *ri, uint8_t ndx)
{
 8006d04:	b480      	push	{r7}
 8006d06:	b089      	sub	sp, #36	@ 0x24
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
 8006d0c:	460b      	mov	r3, r1
 8006d0e:	70fb      	strb	r3, [r7, #3]
  uint32_t val = 0U;
 8006d10:	2300      	movs	r3, #0
 8006d12:	61fb      	str	r3, [r7, #28]
  uint32_t x = 0U;
 8006d14:	2300      	movs	r3, #0
 8006d16:	61bb      	str	r3, [r7, #24]
  uint32_t bofs;
  uint8_t *data = ri->data;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	617b      	str	r3, [r7, #20]
  uint8_t shift = ri->shift;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	7a1b      	ldrb	r3, [r3, #8]
 8006d22:	74fb      	strb	r3, [r7, #19]

  /* get the logical value of the item */

  /* if this is an array, we may need to offset ri->data.*/
  if (ri->count > 0U)
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	7a5b      	ldrb	r3, [r3, #9]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d01a      	beq.n	8006d62 <HID_ReadItem+0x5e>
  {
    /* If app tries to read outside of the array. */
    if (ri->count <= ndx)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	7a5b      	ldrb	r3, [r3, #9]
 8006d30:	78fa      	ldrb	r2, [r7, #3]
 8006d32:	429a      	cmp	r2, r3
 8006d34:	d301      	bcc.n	8006d3a <HID_ReadItem+0x36>
    {
      return (0U);
 8006d36:	2300      	movs	r3, #0
 8006d38:	e078      	b.n	8006e2c <HID_ReadItem+0x128>
    }

    /* calculate bit offset */
    bofs = ndx * ri->size;
 8006d3a:	78fb      	ldrb	r3, [r7, #3]
 8006d3c:	687a      	ldr	r2, [r7, #4]
 8006d3e:	6852      	ldr	r2, [r2, #4]
 8006d40:	fb02 f303 	mul.w	r3, r2, r3
 8006d44:	60fb      	str	r3, [r7, #12]
    bofs += shift;
 8006d46:	7cfb      	ldrb	r3, [r7, #19]
 8006d48:	68fa      	ldr	r2, [r7, #12]
 8006d4a:	4413      	add	r3, r2
 8006d4c:	60fb      	str	r3, [r7, #12]
    /* calculate byte offset + shift pair from bit offset. */
    data += bofs / 8U;
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	08db      	lsrs	r3, r3, #3
 8006d52:	697a      	ldr	r2, [r7, #20]
 8006d54:	4413      	add	r3, r2
 8006d56:	617b      	str	r3, [r7, #20]
    shift = (uint8_t)(bofs % 8U);
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	b2db      	uxtb	r3, r3
 8006d5c:	f003 0307 	and.w	r3, r3, #7
 8006d60:	74fb      	strb	r3, [r7, #19]
  }
  /* read data bytes in little endian order */
  for (x = 0U; x < (((ri->size & 0x7U) != 0U) ? ((ri->size / 8U) + 1U) : (ri->size / 8U)); x++)
 8006d62:	2300      	movs	r3, #0
 8006d64:	61bb      	str	r3, [r7, #24]
 8006d66:	e00a      	b.n	8006d7e <HID_ReadItem+0x7a>
  {
    val = (uint32_t)((uint32_t)(*data) << (x * 8U));
 8006d68:	697b      	ldr	r3, [r7, #20]
 8006d6a:	781b      	ldrb	r3, [r3, #0]
 8006d6c:	461a      	mov	r2, r3
 8006d6e:	69bb      	ldr	r3, [r7, #24]
 8006d70:	00db      	lsls	r3, r3, #3
 8006d72:	fa02 f303 	lsl.w	r3, r2, r3
 8006d76:	61fb      	str	r3, [r7, #28]
  for (x = 0U; x < (((ri->size & 0x7U) != 0U) ? ((ri->size / 8U) + 1U) : (ri->size / 8U)); x++)
 8006d78:	69bb      	ldr	r3, [r7, #24]
 8006d7a:	3301      	adds	r3, #1
 8006d7c:	61bb      	str	r3, [r7, #24]
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	685b      	ldr	r3, [r3, #4]
 8006d82:	f003 0307 	and.w	r3, r3, #7
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d004      	beq.n	8006d94 <HID_ReadItem+0x90>
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	685b      	ldr	r3, [r3, #4]
 8006d8e:	08db      	lsrs	r3, r3, #3
 8006d90:	3301      	adds	r3, #1
 8006d92:	e002      	b.n	8006d9a <HID_ReadItem+0x96>
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	685b      	ldr	r3, [r3, #4]
 8006d98:	08db      	lsrs	r3, r3, #3
 8006d9a:	69ba      	ldr	r2, [r7, #24]
 8006d9c:	4293      	cmp	r3, r2
 8006d9e:	d8e3      	bhi.n	8006d68 <HID_ReadItem+0x64>
  }
  val = (val >> shift) & (((uint32_t)1U << ri->size) - 1U);
 8006da0:	7cfb      	ldrb	r3, [r7, #19]
 8006da2:	69fa      	ldr	r2, [r7, #28]
 8006da4:	40da      	lsrs	r2, r3
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	685b      	ldr	r3, [r3, #4]
 8006daa:	f04f 31ff 	mov.w	r1, #4294967295
 8006dae:	fa01 f303 	lsl.w	r3, r1, r3
 8006db2:	43db      	mvns	r3, r3
 8006db4:	4013      	ands	r3, r2
 8006db6:	61fb      	str	r3, [r7, #28]

  if ((val < ri->logical_min) || (val > ri->logical_max))
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	68db      	ldr	r3, [r3, #12]
 8006dbc:	69fa      	ldr	r2, [r7, #28]
 8006dbe:	429a      	cmp	r2, r3
 8006dc0:	d304      	bcc.n	8006dcc <HID_ReadItem+0xc8>
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	691b      	ldr	r3, [r3, #16]
 8006dc6:	69fa      	ldr	r2, [r7, #28]
 8006dc8:	429a      	cmp	r2, r3
 8006dca:	d901      	bls.n	8006dd0 <HID_ReadItem+0xcc>
  {
    return (0U);
 8006dcc:	2300      	movs	r3, #0
 8006dce:	e02d      	b.n	8006e2c <HID_ReadItem+0x128>
  }

  /* convert logical value to physical value */
  /* See if the number is negative or not. */
  if ((ri->sign != 0U) && ((val & ((uint32_t)1U << (ri->size - 1U))) != 0U))
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	7a9b      	ldrb	r3, [r3, #10]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d01e      	beq.n	8006e16 <HID_ReadItem+0x112>
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	685b      	ldr	r3, [r3, #4]
 8006ddc:	3b01      	subs	r3, #1
 8006dde:	69fa      	ldr	r2, [r7, #28]
 8006de0:	fa22 f303 	lsr.w	r3, r2, r3
 8006de4:	f003 0301 	and.w	r3, r3, #1
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d014      	beq.n	8006e16 <HID_ReadItem+0x112>
  {
    /* yes, so sign extend value to 32 bits. */
    uint32_t vs = (uint32_t)((0xffffffffU & ~((1U << (ri->size)) - 1U)) | val);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	685b      	ldr	r3, [r3, #4]
 8006df0:	2201      	movs	r2, #1
 8006df2:	fa02 f303 	lsl.w	r3, r2, r3
 8006df6:	425b      	negs	r3, r3
 8006df8:	69fa      	ldr	r2, [r7, #28]
 8006dfa:	4313      	orrs	r3, r2
 8006dfc:	60bb      	str	r3, [r7, #8]

    if (ri->resolution == 1U)
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	69db      	ldr	r3, [r3, #28]
 8006e02:	2b01      	cmp	r3, #1
 8006e04:	d101      	bne.n	8006e0a <HID_ReadItem+0x106>
    {
      return ((uint32_t)vs);
 8006e06:	68bb      	ldr	r3, [r7, #8]
 8006e08:	e010      	b.n	8006e2c <HID_ReadItem+0x128>
    }
    return ((uint32_t)(vs * ri->resolution));
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	69db      	ldr	r3, [r3, #28]
 8006e0e:	68ba      	ldr	r2, [r7, #8]
 8006e10:	fb02 f303 	mul.w	r3, r2, r3
 8006e14:	e00a      	b.n	8006e2c <HID_ReadItem+0x128>
  }
  else
  {
    if (ri->resolution == 1U)
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	69db      	ldr	r3, [r3, #28]
 8006e1a:	2b01      	cmp	r3, #1
 8006e1c:	d101      	bne.n	8006e22 <HID_ReadItem+0x11e>
    {
      return (val);
 8006e1e:	69fb      	ldr	r3, [r7, #28]
 8006e20:	e004      	b.n	8006e2c <HID_ReadItem+0x128>
    }
    return (val * ri->resolution);
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	69db      	ldr	r3, [r3, #28]
 8006e26:	69fa      	ldr	r2, [r7, #28]
 8006e28:	fb02 f303 	mul.w	r3, r2, r3
  }
}
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	3724      	adds	r7, #36	@ 0x24
 8006e30:	46bd      	mov	sp, r7
 8006e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e36:	4770      	bx	lr

08006e38 <USBH_HID_PedalInit>:
  *         The function init the HID pedal.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_PedalInit(USBH_HandleTypeDef *phost)
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b084      	sub	sp, #16
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
  uint32_t i;
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006e46:	69db      	ldr	r3, [r3, #28]
 8006e48:	60bb      	str	r3, [r7, #8]

  pedal_info.x = 0U;
 8006e4a:	4b1a      	ldr	r3, [pc, #104]	@ (8006eb4 <USBH_HID_PedalInit+0x7c>)
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	701a      	strb	r2, [r3, #0]
  pedal_info.y = 0U;
 8006e50:	4b18      	ldr	r3, [pc, #96]	@ (8006eb4 <USBH_HID_PedalInit+0x7c>)
 8006e52:	2200      	movs	r2, #0
 8006e54:	705a      	strb	r2, [r3, #1]
  pedal_info.z = 0U;
 8006e56:	4b17      	ldr	r3, [pc, #92]	@ (8006eb4 <USBH_HID_PedalInit+0x7c>)
 8006e58:	2200      	movs	r2, #0
 8006e5a:	709a      	strb	r2, [r3, #2]

  for (i = 0U; i < sizeof(pedal_report_data); i++)
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	60fb      	str	r3, [r7, #12]
 8006e60:	e00c      	b.n	8006e7c <USBH_HID_PedalInit+0x44>
  {
    pedal_report_data[i] = 0U;
 8006e62:	4a15      	ldr	r2, [pc, #84]	@ (8006eb8 <USBH_HID_PedalInit+0x80>)
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	4413      	add	r3, r2
 8006e68:	2200      	movs	r2, #0
 8006e6a:	701a      	strb	r2, [r3, #0]
    pedal_rx_report_buf[i] = 0U;
 8006e6c:	4a13      	ldr	r2, [pc, #76]	@ (8006ebc <USBH_HID_PedalInit+0x84>)
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	4413      	add	r3, r2
 8006e72:	2200      	movs	r2, #0
 8006e74:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < sizeof(pedal_report_data); i++)
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	3301      	adds	r3, #1
 8006e7a:	60fb      	str	r3, [r7, #12]
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	2b02      	cmp	r3, #2
 8006e80:	d9ef      	bls.n	8006e62 <USBH_HID_PedalInit+0x2a>
  }

  if (HID_Handle->length > sizeof(pedal_report_data))
 8006e82:	68bb      	ldr	r3, [r7, #8]
 8006e84:	8b1b      	ldrh	r3, [r3, #24]
 8006e86:	2b03      	cmp	r3, #3
 8006e88:	d902      	bls.n	8006e90 <USBH_HID_PedalInit+0x58>
  {
    HID_Handle->length = (uint16_t)sizeof(pedal_report_data);
 8006e8a:	68bb      	ldr	r3, [r7, #8]
 8006e8c:	2203      	movs	r2, #3
 8006e8e:	831a      	strh	r2, [r3, #24]
  }
  HID_Handle->pData = pedal_rx_report_buf;
 8006e90:	68bb      	ldr	r3, [r7, #8]
 8006e92:	4a0a      	ldr	r2, [pc, #40]	@ (8006ebc <USBH_HID_PedalInit+0x84>)
 8006e94:	615a      	str	r2, [r3, #20]
  {
    return USBH_FAIL;
  }
  else
  {
    USBH_HID_FifoInit(&HID_Handle->fifo, phost->device.Data, (uint16_t)(HID_QUEUE_SIZE * sizeof(pedal_report_data)));
 8006e96:	68bb      	ldr	r3, [r7, #8]
 8006e98:	f103 0008 	add.w	r0, r3, #8
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8006ea2:	221e      	movs	r2, #30
 8006ea4:	4619      	mov	r1, r3
 8006ea6:	f7ff fd61 	bl	800696c <USBH_HID_FifoInit>
  }

  return USBH_OK;
 8006eaa:	2300      	movs	r3, #0
}
 8006eac:	4618      	mov	r0, r3
 8006eae:	3710      	adds	r7, #16
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	bd80      	pop	{r7, pc}
 8006eb4:	20000574 	.word	0x20000574
 8006eb8:	20000578 	.word	0x20000578
 8006ebc:	2000057c 	.word	0x2000057c

08006ec0 <USBH_HID_GetPedalInfo>:
  *         The function return pedal information.
  * @param  phost: Host handle
  * @retval pedal information
  */
HID_PEDAL_Info_TypeDef *USBH_HID_GetPedalInfo(USBH_HandleTypeDef *phost)
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b082      	sub	sp, #8
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
  if (USBH_HID_PedalDecode(phost) == USBH_OK)
 8006ec8:	6878      	ldr	r0, [r7, #4]
 8006eca:	f000 f80d 	bl	8006ee8 <USBH_HID_PedalDecode>
 8006ece:	4603      	mov	r3, r0
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d101      	bne.n	8006ed8 <USBH_HID_GetPedalInfo+0x18>
  {
    return &pedal_info;
 8006ed4:	4b03      	ldr	r3, [pc, #12]	@ (8006ee4 <USBH_HID_GetPedalInfo+0x24>)
 8006ed6:	e000      	b.n	8006eda <USBH_HID_GetPedalInfo+0x1a>
  }
  else
  {
    return NULL;
 8006ed8:	2300      	movs	r3, #0
  }
}
 8006eda:	4618      	mov	r0, r3
 8006edc:	3708      	adds	r7, #8
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	bd80      	pop	{r7, pc}
 8006ee2:	bf00      	nop
 8006ee4:	20000574 	.word	0x20000574

08006ee8 <USBH_HID_PedalDecode>:
  *         The function decode pedal data.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_PedalDecode(USBH_HandleTypeDef *phost)
{
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b084      	sub	sp, #16
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006ef6:	69db      	ldr	r3, [r3, #28]
 8006ef8:	60fb      	str	r3, [r7, #12]

  if ((HID_Handle->length == 0U) || (HID_Handle->fifo.buf == NULL))
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	8b1b      	ldrh	r3, [r3, #24]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d003      	beq.n	8006f0a <USBH_HID_PedalDecode+0x22>
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	689b      	ldr	r3, [r3, #8]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d101      	bne.n	8006f0e <USBH_HID_PedalDecode+0x26>
  {
    return USBH_FAIL;
 8006f0a:	2302      	movs	r3, #2
 8006f0c:	e029      	b.n	8006f62 <USBH_HID_PedalDecode+0x7a>
  }
  /*Fill report */
  if (USBH_HID_FifoRead(&HID_Handle->fifo, &pedal_report_data, HID_Handle->length) == HID_Handle->length)
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	f103 0008 	add.w	r0, r3, #8
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	8b1b      	ldrh	r3, [r3, #24]
 8006f18:	461a      	mov	r2, r3
 8006f1a:	4914      	ldr	r1, [pc, #80]	@ (8006f6c <USBH_HID_PedalDecode+0x84>)
 8006f1c:	f7ff fd42 	bl	80069a4 <USBH_HID_FifoRead>
 8006f20:	4603      	mov	r3, r0
 8006f22:	461a      	mov	r2, r3
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	8b1b      	ldrh	r3, [r3, #24]
 8006f28:	429a      	cmp	r2, r3
 8006f2a:	d119      	bne.n	8006f60 <USBH_HID_PedalDecode+0x78>
  {
    /*Decode report */
    pedal_info.x = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &prop_x, 0U);
 8006f2c:	2100      	movs	r1, #0
 8006f2e:	4810      	ldr	r0, [pc, #64]	@ (8006f70 <USBH_HID_PedalDecode+0x88>)
 8006f30:	f7ff fee8 	bl	8006d04 <HID_ReadItem>
 8006f34:	4603      	mov	r3, r0
 8006f36:	b2da      	uxtb	r2, r3
 8006f38:	4b0e      	ldr	r3, [pc, #56]	@ (8006f74 <USBH_HID_PedalDecode+0x8c>)
 8006f3a:	701a      	strb	r2, [r3, #0]
    pedal_info.y = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &prop_y, 0U);
 8006f3c:	2100      	movs	r1, #0
 8006f3e:	480e      	ldr	r0, [pc, #56]	@ (8006f78 <USBH_HID_PedalDecode+0x90>)
 8006f40:	f7ff fee0 	bl	8006d04 <HID_ReadItem>
 8006f44:	4603      	mov	r3, r0
 8006f46:	b2da      	uxtb	r2, r3
 8006f48:	4b0a      	ldr	r3, [pc, #40]	@ (8006f74 <USBH_HID_PedalDecode+0x8c>)
 8006f4a:	705a      	strb	r2, [r3, #1]
    pedal_info.z = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &prop_z, 0U);
 8006f4c:	2100      	movs	r1, #0
 8006f4e:	480b      	ldr	r0, [pc, #44]	@ (8006f7c <USBH_HID_PedalDecode+0x94>)
 8006f50:	f7ff fed8 	bl	8006d04 <HID_ReadItem>
 8006f54:	4603      	mov	r3, r0
 8006f56:	b2da      	uxtb	r2, r3
 8006f58:	4b06      	ldr	r3, [pc, #24]	@ (8006f74 <USBH_HID_PedalDecode+0x8c>)
 8006f5a:	709a      	strb	r2, [r3, #2]

    return USBH_OK;
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	e000      	b.n	8006f62 <USBH_HID_PedalDecode+0x7a>
  }
  return   USBH_FAIL;
 8006f60:	2302      	movs	r3, #2
}
 8006f62:	4618      	mov	r0, r3
 8006f64:	3710      	adds	r7, #16
 8006f66:	46bd      	mov	sp, r7
 8006f68:	bd80      	pop	{r7, pc}
 8006f6a:	bf00      	nop
 8006f6c:	20000578 	.word	0x20000578
 8006f70:	0800b9e8 	.word	0x0800b9e8
 8006f74:	20000574 	.word	0x20000574
 8006f78:	0800ba08 	.word	0x0800ba08
 8006f7c:	0800ba28 	.word	0x0800ba28

08006f80 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b084      	sub	sp, #16
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	60f8      	str	r0, [r7, #12]
 8006f88:	60b9      	str	r1, [r7, #8]
 8006f8a:	4613      	mov	r3, r2
 8006f8c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d10a      	bne.n	8006faa <USBH_Init+0x2a>
  {
    USBH_ErrLog("Invalid Host handle");
 8006f94:	481c      	ldr	r0, [pc, #112]	@ (8007008 <USBH_Init+0x88>)
 8006f96:	f003 f8d9 	bl	800a14c <iprintf>
 8006f9a:	481c      	ldr	r0, [pc, #112]	@ (800700c <USBH_Init+0x8c>)
 8006f9c:	f003 f8d6 	bl	800a14c <iprintf>
 8006fa0:	200a      	movs	r0, #10
 8006fa2:	f003 f8e5 	bl	800a170 <putchar>
    return USBH_FAIL;
 8006fa6:	2302      	movs	r3, #2
 8006fa8:	e029      	b.n	8006ffe <USBH_Init+0x7e>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	79fa      	ldrb	r2, [r7, #7]
 8006fae:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8006fc2:	68f8      	ldr	r0, [r7, #12]
 8006fc4:	f000 f824 	bl	8007010 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	2200      	movs	r2, #0
 8006fcc:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	2200      	movs	r2, #0
 8006fdc:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8006fe8:	68bb      	ldr	r3, [r7, #8]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d003      	beq.n	8006ff6 <USBH_Init+0x76>
  {
    phost->pUser = pUsrFunc;
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	68ba      	ldr	r2, [r7, #8]
 8006ff2:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8006ff6:	68f8      	ldr	r0, [r7, #12]
 8006ff8:	f002 fd32 	bl	8009a60 <USBH_LL_Init>

  return USBH_OK;
 8006ffc:	2300      	movs	r3, #0
}
 8006ffe:	4618      	mov	r0, r3
 8007000:	3710      	adds	r7, #16
 8007002:	46bd      	mov	sp, r7
 8007004:	bd80      	pop	{r7, pc}
 8007006:	bf00      	nop
 8007008:	0800b350 	.word	0x0800b350
 800700c:	0800b358 	.word	0x0800b358

08007010 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8007010:	b580      	push	{r7, lr}
 8007012:	b084      	sub	sp, #16
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8007018:	2300      	movs	r3, #0
 800701a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800701c:	2300      	movs	r3, #0
 800701e:	60fb      	str	r3, [r7, #12]
 8007020:	e009      	b.n	8007036 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8007022:	687a      	ldr	r2, [r7, #4]
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	33e0      	adds	r3, #224	@ 0xe0
 8007028:	009b      	lsls	r3, r3, #2
 800702a:	4413      	add	r3, r2
 800702c:	2200      	movs	r2, #0
 800702e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	3301      	adds	r3, #1
 8007034:	60fb      	str	r3, [r7, #12]
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	2b0f      	cmp	r3, #15
 800703a:	d9f2      	bls.n	8007022 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800703c:	2300      	movs	r3, #0
 800703e:	60fb      	str	r3, [r7, #12]
 8007040:	e009      	b.n	8007056 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8007042:	687a      	ldr	r2, [r7, #4]
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	4413      	add	r3, r2
 8007048:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800704c:	2200      	movs	r2, #0
 800704e:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	3301      	adds	r3, #1
 8007054:	60fb      	str	r3, [r7, #12]
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800705c:	d3f1      	bcc.n	8007042 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2200      	movs	r2, #0
 8007062:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2200      	movs	r2, #0
 8007068:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	2201      	movs	r2, #1
 800706e:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2200      	movs	r2, #0
 8007074:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2201      	movs	r2, #1
 800707c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2240      	movs	r2, #64	@ 0x40
 8007082:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2200      	movs	r2, #0
 8007088:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	2200      	movs	r2, #0
 800708e:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	2201      	movs	r2, #1
 8007096:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	2200      	movs	r2, #0
 800709e:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	2200      	movs	r2, #0
 80070a6:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	331c      	adds	r3, #28
 80070ae:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80070b2:	2100      	movs	r1, #0
 80070b4:	4618      	mov	r0, r3
 80070b6:	f003 f8c6 	bl	800a246 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80070c0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80070c4:	2100      	movs	r1, #0
 80070c6:	4618      	mov	r0, r3
 80070c8:	f003 f8bd 	bl	800a246 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	f203 3326 	addw	r3, r3, #806	@ 0x326
 80070d2:	2212      	movs	r2, #18
 80070d4:	2100      	movs	r1, #0
 80070d6:	4618      	mov	r0, r3
 80070d8:	f003 f8b5 	bl	800a246 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 80070e2:	223e      	movs	r2, #62	@ 0x3e
 80070e4:	2100      	movs	r1, #0
 80070e6:	4618      	mov	r0, r3
 80070e8:	f003 f8ad 	bl	800a246 <memset>

  return USBH_OK;
 80070ec:	2300      	movs	r3, #0
}
 80070ee:	4618      	mov	r0, r3
 80070f0:	3710      	adds	r7, #16
 80070f2:	46bd      	mov	sp, r7
 80070f4:	bd80      	pop	{r7, pc}
	...

080070f8 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b084      	sub	sp, #16
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
 8007100:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8007102:	2300      	movs	r3, #0
 8007104:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8007106:	683b      	ldr	r3, [r7, #0]
 8007108:	2b00      	cmp	r3, #0
 800710a:	d01f      	beq.n	800714c <USBH_RegisterClass+0x54>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8007112:	2b00      	cmp	r3, #0
 8007114:	d10e      	bne.n	8007134 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800711c:	1c59      	adds	r1, r3, #1
 800711e:	687a      	ldr	r2, [r7, #4]
 8007120:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 8007124:	687a      	ldr	r2, [r7, #4]
 8007126:	33de      	adds	r3, #222	@ 0xde
 8007128:	6839      	ldr	r1, [r7, #0]
 800712a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800712e:	2300      	movs	r3, #0
 8007130:	73fb      	strb	r3, [r7, #15]
 8007132:	e016      	b.n	8007162 <USBH_RegisterClass+0x6a>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
 8007134:	480d      	ldr	r0, [pc, #52]	@ (800716c <USBH_RegisterClass+0x74>)
 8007136:	f003 f809 	bl	800a14c <iprintf>
 800713a:	480d      	ldr	r0, [pc, #52]	@ (8007170 <USBH_RegisterClass+0x78>)
 800713c:	f003 f806 	bl	800a14c <iprintf>
 8007140:	200a      	movs	r0, #10
 8007142:	f003 f815 	bl	800a170 <putchar>
      status = USBH_FAIL;
 8007146:	2302      	movs	r3, #2
 8007148:	73fb      	strb	r3, [r7, #15]
 800714a:	e00a      	b.n	8007162 <USBH_RegisterClass+0x6a>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
 800714c:	4807      	ldr	r0, [pc, #28]	@ (800716c <USBH_RegisterClass+0x74>)
 800714e:	f002 fffd 	bl	800a14c <iprintf>
 8007152:	4808      	ldr	r0, [pc, #32]	@ (8007174 <USBH_RegisterClass+0x7c>)
 8007154:	f002 fffa 	bl	800a14c <iprintf>
 8007158:	200a      	movs	r0, #10
 800715a:	f003 f809 	bl	800a170 <putchar>
    status = USBH_FAIL;
 800715e:	2302      	movs	r3, #2
 8007160:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007162:	7bfb      	ldrb	r3, [r7, #15]
}
 8007164:	4618      	mov	r0, r3
 8007166:	3710      	adds	r7, #16
 8007168:	46bd      	mov	sp, r7
 800716a:	bd80      	pop	{r7, pc}
 800716c:	0800b350 	.word	0x0800b350
 8007170:	0800b36c 	.word	0x0800b36c
 8007174:	0800b388 	.word	0x0800b388

08007178 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8007178:	b580      	push	{r7, lr}
 800717a:	b088      	sub	sp, #32
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
 8007180:	460b      	mov	r3, r1
 8007182:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8007184:	2300      	movs	r3, #0
 8007186:	77fb      	strb	r3, [r7, #31]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 800718e:	78fa      	ldrb	r2, [r7, #3]
 8007190:	429a      	cmp	r2, r3
 8007192:	f080 80c9 	bcs.w	8007328 <USBH_SelectInterface+0x1b0>
  {
    phost->device.current_interface = interface;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	78fa      	ldrb	r2, [r7, #3]
 800719a:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
    USBH_UsrLog("Switching to Interface (#%d)", interface);
 800719e:	2300      	movs	r3, #0
 80071a0:	61bb      	str	r3, [r7, #24]
 80071a2:	69bb      	ldr	r3, [r7, #24]
 80071a4:	4a68      	ldr	r2, [pc, #416]	@ (8007348 <USBH_SelectInterface+0x1d0>)
 80071a6:	4413      	add	r3, r2
 80071a8:	4968      	ldr	r1, [pc, #416]	@ (800734c <USBH_SelectInterface+0x1d4>)
 80071aa:	4618      	mov	r0, r3
 80071ac:	f002 ffe8 	bl	800a180 <siprintf>
 80071b0:	4602      	mov	r2, r0
 80071b2:	69bb      	ldr	r3, [r7, #24]
 80071b4:	4413      	add	r3, r2
 80071b6:	61bb      	str	r3, [r7, #24]
 80071b8:	69bb      	ldr	r3, [r7, #24]
 80071ba:	4a63      	ldr	r2, [pc, #396]	@ (8007348 <USBH_SelectInterface+0x1d0>)
 80071bc:	4413      	add	r3, r2
 80071be:	78fa      	ldrb	r2, [r7, #3]
 80071c0:	4963      	ldr	r1, [pc, #396]	@ (8007350 <USBH_SelectInterface+0x1d8>)
 80071c2:	4618      	mov	r0, r3
 80071c4:	f002 ffdc 	bl	800a180 <siprintf>
 80071c8:	4602      	mov	r2, r0
 80071ca:	69bb      	ldr	r3, [r7, #24]
 80071cc:	4413      	add	r3, r2
 80071ce:	61bb      	str	r3, [r7, #24]
 80071d0:	69bb      	ldr	r3, [r7, #24]
 80071d2:	4a5d      	ldr	r2, [pc, #372]	@ (8007348 <USBH_SelectInterface+0x1d0>)
 80071d4:	4413      	add	r3, r2
 80071d6:	495f      	ldr	r1, [pc, #380]	@ (8007354 <USBH_SelectInterface+0x1dc>)
 80071d8:	4618      	mov	r0, r3
 80071da:	f002 ffd1 	bl	800a180 <siprintf>
 80071de:	4602      	mov	r2, r0
 80071e0:	69bb      	ldr	r3, [r7, #24]
 80071e2:	4413      	add	r3, r2
 80071e4:	61bb      	str	r3, [r7, #24]
 80071e6:	69bb      	ldr	r3, [r7, #24]
 80071e8:	b29a      	uxth	r2, r3
 80071ea:	2364      	movs	r3, #100	@ 0x64
 80071ec:	4956      	ldr	r1, [pc, #344]	@ (8007348 <USBH_SelectInterface+0x1d0>)
 80071ee:	485a      	ldr	r0, [pc, #360]	@ (8007358 <USBH_SelectInterface+0x1e0>)
 80071f0:	f7fd f9ae 	bl	8004550 <HAL_UART_Transmit>
    USBH_UsrLog("Class    : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass);
 80071f4:	2300      	movs	r3, #0
 80071f6:	617b      	str	r3, [r7, #20]
 80071f8:	697b      	ldr	r3, [r7, #20]
 80071fa:	4a53      	ldr	r2, [pc, #332]	@ (8007348 <USBH_SelectInterface+0x1d0>)
 80071fc:	4413      	add	r3, r2
 80071fe:	4953      	ldr	r1, [pc, #332]	@ (800734c <USBH_SelectInterface+0x1d4>)
 8007200:	4618      	mov	r0, r3
 8007202:	f002 ffbd 	bl	800a180 <siprintf>
 8007206:	4602      	mov	r2, r0
 8007208:	697b      	ldr	r3, [r7, #20]
 800720a:	4413      	add	r3, r2
 800720c:	617b      	str	r3, [r7, #20]
 800720e:	697b      	ldr	r3, [r7, #20]
 8007210:	4a4d      	ldr	r2, [pc, #308]	@ (8007348 <USBH_SelectInterface+0x1d0>)
 8007212:	1898      	adds	r0, r3, r2
 8007214:	78fb      	ldrb	r3, [r7, #3]
 8007216:	687a      	ldr	r2, [r7, #4]
 8007218:	211a      	movs	r1, #26
 800721a:	fb01 f303 	mul.w	r3, r1, r3
 800721e:	4413      	add	r3, r2
 8007220:	f203 3347 	addw	r3, r3, #839	@ 0x347
 8007224:	781b      	ldrb	r3, [r3, #0]
 8007226:	461a      	mov	r2, r3
 8007228:	494c      	ldr	r1, [pc, #304]	@ (800735c <USBH_SelectInterface+0x1e4>)
 800722a:	f002 ffa9 	bl	800a180 <siprintf>
 800722e:	4602      	mov	r2, r0
 8007230:	697b      	ldr	r3, [r7, #20]
 8007232:	4413      	add	r3, r2
 8007234:	617b      	str	r3, [r7, #20]
 8007236:	697b      	ldr	r3, [r7, #20]
 8007238:	4a43      	ldr	r2, [pc, #268]	@ (8007348 <USBH_SelectInterface+0x1d0>)
 800723a:	4413      	add	r3, r2
 800723c:	4945      	ldr	r1, [pc, #276]	@ (8007354 <USBH_SelectInterface+0x1dc>)
 800723e:	4618      	mov	r0, r3
 8007240:	f002 ff9e 	bl	800a180 <siprintf>
 8007244:	4602      	mov	r2, r0
 8007246:	697b      	ldr	r3, [r7, #20]
 8007248:	4413      	add	r3, r2
 800724a:	617b      	str	r3, [r7, #20]
 800724c:	697b      	ldr	r3, [r7, #20]
 800724e:	b29a      	uxth	r2, r3
 8007250:	2364      	movs	r3, #100	@ 0x64
 8007252:	493d      	ldr	r1, [pc, #244]	@ (8007348 <USBH_SelectInterface+0x1d0>)
 8007254:	4840      	ldr	r0, [pc, #256]	@ (8007358 <USBH_SelectInterface+0x1e0>)
 8007256:	f7fd f97b 	bl	8004550 <HAL_UART_Transmit>
    USBH_UsrLog("SubClass : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceSubClass);
 800725a:	2300      	movs	r3, #0
 800725c:	613b      	str	r3, [r7, #16]
 800725e:	693b      	ldr	r3, [r7, #16]
 8007260:	4a39      	ldr	r2, [pc, #228]	@ (8007348 <USBH_SelectInterface+0x1d0>)
 8007262:	4413      	add	r3, r2
 8007264:	4939      	ldr	r1, [pc, #228]	@ (800734c <USBH_SelectInterface+0x1d4>)
 8007266:	4618      	mov	r0, r3
 8007268:	f002 ff8a 	bl	800a180 <siprintf>
 800726c:	4602      	mov	r2, r0
 800726e:	693b      	ldr	r3, [r7, #16]
 8007270:	4413      	add	r3, r2
 8007272:	613b      	str	r3, [r7, #16]
 8007274:	693b      	ldr	r3, [r7, #16]
 8007276:	4a34      	ldr	r2, [pc, #208]	@ (8007348 <USBH_SelectInterface+0x1d0>)
 8007278:	1898      	adds	r0, r3, r2
 800727a:	78fb      	ldrb	r3, [r7, #3]
 800727c:	687a      	ldr	r2, [r7, #4]
 800727e:	211a      	movs	r1, #26
 8007280:	fb01 f303 	mul.w	r3, r1, r3
 8007284:	4413      	add	r3, r2
 8007286:	f503 7352 	add.w	r3, r3, #840	@ 0x348
 800728a:	781b      	ldrb	r3, [r3, #0]
 800728c:	461a      	mov	r2, r3
 800728e:	4934      	ldr	r1, [pc, #208]	@ (8007360 <USBH_SelectInterface+0x1e8>)
 8007290:	f002 ff76 	bl	800a180 <siprintf>
 8007294:	4602      	mov	r2, r0
 8007296:	693b      	ldr	r3, [r7, #16]
 8007298:	4413      	add	r3, r2
 800729a:	613b      	str	r3, [r7, #16]
 800729c:	693b      	ldr	r3, [r7, #16]
 800729e:	4a2a      	ldr	r2, [pc, #168]	@ (8007348 <USBH_SelectInterface+0x1d0>)
 80072a0:	4413      	add	r3, r2
 80072a2:	492c      	ldr	r1, [pc, #176]	@ (8007354 <USBH_SelectInterface+0x1dc>)
 80072a4:	4618      	mov	r0, r3
 80072a6:	f002 ff6b 	bl	800a180 <siprintf>
 80072aa:	4602      	mov	r2, r0
 80072ac:	693b      	ldr	r3, [r7, #16]
 80072ae:	4413      	add	r3, r2
 80072b0:	613b      	str	r3, [r7, #16]
 80072b2:	693b      	ldr	r3, [r7, #16]
 80072b4:	b29a      	uxth	r2, r3
 80072b6:	2364      	movs	r3, #100	@ 0x64
 80072b8:	4923      	ldr	r1, [pc, #140]	@ (8007348 <USBH_SelectInterface+0x1d0>)
 80072ba:	4827      	ldr	r0, [pc, #156]	@ (8007358 <USBH_SelectInterface+0x1e0>)
 80072bc:	f7fd f948 	bl	8004550 <HAL_UART_Transmit>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
 80072c0:	2300      	movs	r3, #0
 80072c2:	60fb      	str	r3, [r7, #12]
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	4a20      	ldr	r2, [pc, #128]	@ (8007348 <USBH_SelectInterface+0x1d0>)
 80072c8:	4413      	add	r3, r2
 80072ca:	4920      	ldr	r1, [pc, #128]	@ (800734c <USBH_SelectInterface+0x1d4>)
 80072cc:	4618      	mov	r0, r3
 80072ce:	f002 ff57 	bl	800a180 <siprintf>
 80072d2:	4602      	mov	r2, r0
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	4413      	add	r3, r2
 80072d8:	60fb      	str	r3, [r7, #12]
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	4a1a      	ldr	r2, [pc, #104]	@ (8007348 <USBH_SelectInterface+0x1d0>)
 80072de:	1898      	adds	r0, r3, r2
 80072e0:	78fb      	ldrb	r3, [r7, #3]
 80072e2:	687a      	ldr	r2, [r7, #4]
 80072e4:	211a      	movs	r1, #26
 80072e6:	fb01 f303 	mul.w	r3, r1, r3
 80072ea:	4413      	add	r3, r2
 80072ec:	f203 3349 	addw	r3, r3, #841	@ 0x349
 80072f0:	781b      	ldrb	r3, [r3, #0]
 80072f2:	461a      	mov	r2, r3
 80072f4:	491b      	ldr	r1, [pc, #108]	@ (8007364 <USBH_SelectInterface+0x1ec>)
 80072f6:	f002 ff43 	bl	800a180 <siprintf>
 80072fa:	4602      	mov	r2, r0
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	4413      	add	r3, r2
 8007300:	60fb      	str	r3, [r7, #12]
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	4a10      	ldr	r2, [pc, #64]	@ (8007348 <USBH_SelectInterface+0x1d0>)
 8007306:	4413      	add	r3, r2
 8007308:	4912      	ldr	r1, [pc, #72]	@ (8007354 <USBH_SelectInterface+0x1dc>)
 800730a:	4618      	mov	r0, r3
 800730c:	f002 ff38 	bl	800a180 <siprintf>
 8007310:	4602      	mov	r2, r0
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	4413      	add	r3, r2
 8007316:	60fb      	str	r3, [r7, #12]
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	b29a      	uxth	r2, r3
 800731c:	2364      	movs	r3, #100	@ 0x64
 800731e:	490a      	ldr	r1, [pc, #40]	@ (8007348 <USBH_SelectInterface+0x1d0>)
 8007320:	480d      	ldr	r0, [pc, #52]	@ (8007358 <USBH_SelectInterface+0x1e0>)
 8007322:	f7fd f915 	bl	8004550 <HAL_UART_Transmit>
 8007326:	e00a      	b.n	800733e <USBH_SelectInterface+0x1c6>
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
 8007328:	480f      	ldr	r0, [pc, #60]	@ (8007368 <USBH_SelectInterface+0x1f0>)
 800732a:	f002 ff0f 	bl	800a14c <iprintf>
 800732e:	480f      	ldr	r0, [pc, #60]	@ (800736c <USBH_SelectInterface+0x1f4>)
 8007330:	f002 ff0c 	bl	800a14c <iprintf>
 8007334:	200a      	movs	r0, #10
 8007336:	f002 ff1b 	bl	800a170 <putchar>
    status = USBH_FAIL;
 800733a:	2302      	movs	r3, #2
 800733c:	77fb      	strb	r3, [r7, #31]
  }

  return status;
 800733e:	7ffb      	ldrb	r3, [r7, #31]
}
 8007340:	4618      	mov	r0, r3
 8007342:	3720      	adds	r7, #32
 8007344:	46bd      	mov	sp, r7
 8007346:	bd80      	pop	{r7, pc}
 8007348:	2000012c 	.word	0x2000012c
 800734c:	0800b3a0 	.word	0x0800b3a0
 8007350:	0800b3a8 	.word	0x0800b3a8
 8007354:	0800b3c8 	.word	0x0800b3c8
 8007358:	200000a4 	.word	0x200000a4
 800735c:	0800b3cc 	.word	0x0800b3cc
 8007360:	0800b3dc 	.word	0x0800b3dc
 8007364:	0800b3ec 	.word	0x0800b3ec
 8007368:	0800b350 	.word	0x0800b350
 800736c:	0800b3fc 	.word	0x0800b3fc

08007370 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8007370:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007372:	b08b      	sub	sp, #44	@ 0x2c
 8007374:	af04      	add	r7, sp, #16
 8007376:	6078      	str	r0, [r7, #4]
 8007378:	4608      	mov	r0, r1
 800737a:	4611      	mov	r1, r2
 800737c:	461a      	mov	r2, r3
 800737e:	4603      	mov	r3, r0
 8007380:	70fb      	strb	r3, [r7, #3]
 8007382:	460b      	mov	r3, r1
 8007384:	70bb      	strb	r3, [r7, #2]
 8007386:	4613      	mov	r3, r2
 8007388:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800738a:	2300      	movs	r3, #0
 800738c:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800738e:	2300      	movs	r3, #0
 8007390:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8007398:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800739a:	e060      	b.n	800745e <USBH_FindInterface+0xee>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800739c:	7dfb      	ldrb	r3, [r7, #23]
 800739e:	221a      	movs	r2, #26
 80073a0:	fb02 f303 	mul.w	r3, r2, r3
 80073a4:	3308      	adds	r3, #8
 80073a6:	68fa      	ldr	r2, [r7, #12]
 80073a8:	4413      	add	r3, r2
 80073aa:	3302      	adds	r3, #2
 80073ac:	613b      	str	r3, [r7, #16]
    USBH_DbgLog("iclass %d, isubclass %d, iprotocol %d (%d %d %d)",
 80073ae:	2300      	movs	r3, #0
 80073b0:	60bb      	str	r3, [r7, #8]
 80073b2:	68bb      	ldr	r3, [r7, #8]
 80073b4:	4a2e      	ldr	r2, [pc, #184]	@ (8007470 <USBH_FindInterface+0x100>)
 80073b6:	4413      	add	r3, r2
 80073b8:	492e      	ldr	r1, [pc, #184]	@ (8007474 <USBH_FindInterface+0x104>)
 80073ba:	4618      	mov	r0, r3
 80073bc:	f002 fee0 	bl	800a180 <siprintf>
 80073c0:	4602      	mov	r2, r0
 80073c2:	68bb      	ldr	r3, [r7, #8]
 80073c4:	4413      	add	r3, r2
 80073c6:	60bb      	str	r3, [r7, #8]
 80073c8:	68bb      	ldr	r3, [r7, #8]
 80073ca:	4a29      	ldr	r2, [pc, #164]	@ (8007470 <USBH_FindInterface+0x100>)
 80073cc:	1898      	adds	r0, r3, r2
 80073ce:	693b      	ldr	r3, [r7, #16]
 80073d0:	795b      	ldrb	r3, [r3, #5]
 80073d2:	461d      	mov	r5, r3
 80073d4:	693b      	ldr	r3, [r7, #16]
 80073d6:	799b      	ldrb	r3, [r3, #6]
 80073d8:	461e      	mov	r6, r3
 80073da:	693b      	ldr	r3, [r7, #16]
 80073dc:	79db      	ldrb	r3, [r3, #7]
 80073de:	461c      	mov	r4, r3
 80073e0:	78fb      	ldrb	r3, [r7, #3]
 80073e2:	78ba      	ldrb	r2, [r7, #2]
 80073e4:	7879      	ldrb	r1, [r7, #1]
 80073e6:	9103      	str	r1, [sp, #12]
 80073e8:	9202      	str	r2, [sp, #8]
 80073ea:	9301      	str	r3, [sp, #4]
 80073ec:	9400      	str	r4, [sp, #0]
 80073ee:	4633      	mov	r3, r6
 80073f0:	462a      	mov	r2, r5
 80073f2:	4921      	ldr	r1, [pc, #132]	@ (8007478 <USBH_FindInterface+0x108>)
 80073f4:	f002 fec4 	bl	800a180 <siprintf>
 80073f8:	4602      	mov	r2, r0
 80073fa:	68bb      	ldr	r3, [r7, #8]
 80073fc:	4413      	add	r3, r2
 80073fe:	60bb      	str	r3, [r7, #8]
 8007400:	68bb      	ldr	r3, [r7, #8]
 8007402:	4a1b      	ldr	r2, [pc, #108]	@ (8007470 <USBH_FindInterface+0x100>)
 8007404:	4413      	add	r3, r2
 8007406:	491d      	ldr	r1, [pc, #116]	@ (800747c <USBH_FindInterface+0x10c>)
 8007408:	4618      	mov	r0, r3
 800740a:	f002 feb9 	bl	800a180 <siprintf>
 800740e:	4602      	mov	r2, r0
 8007410:	68bb      	ldr	r3, [r7, #8]
 8007412:	4413      	add	r3, r2
 8007414:	60bb      	str	r3, [r7, #8]
 8007416:	68bb      	ldr	r3, [r7, #8]
 8007418:	b29a      	uxth	r2, r3
 800741a:	2364      	movs	r3, #100	@ 0x64
 800741c:	4914      	ldr	r1, [pc, #80]	@ (8007470 <USBH_FindInterface+0x100>)
 800741e:	4818      	ldr	r0, [pc, #96]	@ (8007480 <USBH_FindInterface+0x110>)
 8007420:	f7fd f896 	bl	8004550 <HAL_UART_Transmit>
    		pif->bInterfaceClass,
			pif->bInterfaceSubClass,
			pif->bInterfaceProtocol,
			Class, SubClass, Protocol);
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007424:	693b      	ldr	r3, [r7, #16]
 8007426:	795b      	ldrb	r3, [r3, #5]
 8007428:	78fa      	ldrb	r2, [r7, #3]
 800742a:	429a      	cmp	r2, r3
 800742c:	d002      	beq.n	8007434 <USBH_FindInterface+0xc4>
 800742e:	78fb      	ldrb	r3, [r7, #3]
 8007430:	2bff      	cmp	r3, #255	@ 0xff
 8007432:	d111      	bne.n	8007458 <USBH_FindInterface+0xe8>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007434:	693b      	ldr	r3, [r7, #16]
 8007436:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007438:	78ba      	ldrb	r2, [r7, #2]
 800743a:	429a      	cmp	r2, r3
 800743c:	d002      	beq.n	8007444 <USBH_FindInterface+0xd4>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800743e:	78bb      	ldrb	r3, [r7, #2]
 8007440:	2bff      	cmp	r3, #255	@ 0xff
 8007442:	d109      	bne.n	8007458 <USBH_FindInterface+0xe8>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007444:	693b      	ldr	r3, [r7, #16]
 8007446:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007448:	787a      	ldrb	r2, [r7, #1]
 800744a:	429a      	cmp	r2, r3
 800744c:	d002      	beq.n	8007454 <USBH_FindInterface+0xe4>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800744e:	787b      	ldrb	r3, [r7, #1]
 8007450:	2bff      	cmp	r3, #255	@ 0xff
 8007452:	d101      	bne.n	8007458 <USBH_FindInterface+0xe8>
    {
      return  if_ix;
 8007454:	7dfb      	ldrb	r3, [r7, #23]
 8007456:	e006      	b.n	8007466 <USBH_FindInterface+0xf6>
    }
    if_ix++;
 8007458:	7dfb      	ldrb	r3, [r7, #23]
 800745a:	3301      	adds	r3, #1
 800745c:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800745e:	7dfb      	ldrb	r3, [r7, #23]
 8007460:	2b01      	cmp	r3, #1
 8007462:	d99b      	bls.n	800739c <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8007464:	23ff      	movs	r3, #255	@ 0xff
}
 8007466:	4618      	mov	r0, r3
 8007468:	371c      	adds	r7, #28
 800746a:	46bd      	mov	sp, r7
 800746c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800746e:	bf00      	nop
 8007470:	2000012c 	.word	0x2000012c
 8007474:	0800b41c 	.word	0x0800b41c
 8007478:	0800b428 	.word	0x0800b428
 800747c:	0800b3c8 	.word	0x0800b3c8
 8007480:	200000a4 	.word	0x200000a4

08007484 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 8007484:	b580      	push	{r7, lr}
 8007486:	b082      	sub	sp, #8
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800748c:	6878      	ldr	r0, [r7, #4]
 800748e:	f002 fb23 	bl	8009ad8 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8007492:	2101      	movs	r1, #1
 8007494:	6878      	ldr	r0, [r7, #4]
 8007496:	f002 fc3c 	bl	8009d12 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800749a:	2300      	movs	r3, #0
}
 800749c:	4618      	mov	r0, r3
 800749e:	3708      	adds	r7, #8
 80074a0:	46bd      	mov	sp, r7
 80074a2:	bd80      	pop	{r7, pc}

080074a4 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 80074a4:	b580      	push	{r7, lr}
 80074a6:	b096      	sub	sp, #88	@ 0x58
 80074a8:	af04      	add	r7, sp, #16
 80074aa:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80074ac:	2302      	movs	r3, #2
 80074ae:	73fb      	strb	r3, [r7, #15]
  uint8_t idx = 0U;
 80074b0:	2300      	movs	r3, #0
 80074b2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 80074bc:	b2db      	uxtb	r3, r3
 80074be:	2b01      	cmp	r3, #1
 80074c0:	d102      	bne.n	80074c8 <USBH_Process+0x24>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	2203      	movs	r2, #3
 80074c6:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	781b      	ldrb	r3, [r3, #0]
 80074cc:	b2db      	uxtb	r3, r3
 80074ce:	2b0b      	cmp	r3, #11
 80074d0:	f200 8422 	bhi.w	8007d18 <USBH_Process+0x874>
 80074d4:	a201      	add	r2, pc, #4	@ (adr r2, 80074dc <USBH_Process+0x38>)
 80074d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074da:	bf00      	nop
 80074dc:	0800750d 	.word	0x0800750d
 80074e0:	08007593 	.word	0x08007593
 80074e4:	080076a3 	.word	0x080076a3
 80074e8:	08007c5f 	.word	0x08007c5f
 80074ec:	08007d19 	.word	0x08007d19
 80074f0:	08007761 	.word	0x08007761
 80074f4:	08007bdf 	.word	0x08007bdf
 80074f8:	0800783f 	.word	0x0800783f
 80074fc:	0800785f 	.word	0x0800785f
 8007500:	080078d1 	.word	0x080078d1
 8007504:	080079bd 	.word	0x080079bd
 8007508:	08007c47 	.word	0x08007c47
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 8007512:	b2db      	uxtb	r3, r3
 8007514:	2b00      	cmp	r3, #0
 8007516:	f000 8401 	beq.w	8007d1c <USBH_Process+0x878>
      {
        USBH_UsrLog("USB Device Connected");
 800751a:	2300      	movs	r3, #0
 800751c:	613b      	str	r3, [r7, #16]
 800751e:	693b      	ldr	r3, [r7, #16]
 8007520:	4a88      	ldr	r2, [pc, #544]	@ (8007744 <USBH_Process+0x2a0>)
 8007522:	4413      	add	r3, r2
 8007524:	4988      	ldr	r1, [pc, #544]	@ (8007748 <USBH_Process+0x2a4>)
 8007526:	4618      	mov	r0, r3
 8007528:	f002 fe2a 	bl	800a180 <siprintf>
 800752c:	4602      	mov	r2, r0
 800752e:	693b      	ldr	r3, [r7, #16]
 8007530:	4413      	add	r3, r2
 8007532:	613b      	str	r3, [r7, #16]
 8007534:	693b      	ldr	r3, [r7, #16]
 8007536:	4a83      	ldr	r2, [pc, #524]	@ (8007744 <USBH_Process+0x2a0>)
 8007538:	4413      	add	r3, r2
 800753a:	4984      	ldr	r1, [pc, #528]	@ (800774c <USBH_Process+0x2a8>)
 800753c:	4618      	mov	r0, r3
 800753e:	f002 fe1f 	bl	800a180 <siprintf>
 8007542:	4602      	mov	r2, r0
 8007544:	693b      	ldr	r3, [r7, #16]
 8007546:	4413      	add	r3, r2
 8007548:	613b      	str	r3, [r7, #16]
 800754a:	693b      	ldr	r3, [r7, #16]
 800754c:	4a7d      	ldr	r2, [pc, #500]	@ (8007744 <USBH_Process+0x2a0>)
 800754e:	4413      	add	r3, r2
 8007550:	497f      	ldr	r1, [pc, #508]	@ (8007750 <USBH_Process+0x2ac>)
 8007552:	4618      	mov	r0, r3
 8007554:	f002 fe14 	bl	800a180 <siprintf>
 8007558:	4602      	mov	r2, r0
 800755a:	693b      	ldr	r3, [r7, #16]
 800755c:	4413      	add	r3, r2
 800755e:	613b      	str	r3, [r7, #16]
 8007560:	693b      	ldr	r3, [r7, #16]
 8007562:	b29a      	uxth	r2, r3
 8007564:	2364      	movs	r3, #100	@ 0x64
 8007566:	4977      	ldr	r1, [pc, #476]	@ (8007744 <USBH_Process+0x2a0>)
 8007568:	487a      	ldr	r0, [pc, #488]	@ (8007754 <USBH_Process+0x2b0>)
 800756a:	f7fc fff1 	bl	8004550 <HAL_UART_Transmit>

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	2201      	movs	r2, #1
 8007572:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8007574:	20c8      	movs	r0, #200	@ 0xc8
 8007576:	f002 fc16 	bl	8009da6 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800757a:	6878      	ldr	r0, [r7, #4]
 800757c:	f002 fb09 	bl	8009b92 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2200      	movs	r2, #0
 8007584:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2200      	movs	r2, #0
 800758c:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007590:	e3c4      	b.n	8007d1c <USBH_Process+0x878>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 8007598:	2b01      	cmp	r3, #1
 800759a:	d131      	bne.n	8007600 <USBH_Process+0x15c>
      {
        USBH_UsrLog("USB Device Reset Completed");
 800759c:	2300      	movs	r3, #0
 800759e:	617b      	str	r3, [r7, #20]
 80075a0:	697b      	ldr	r3, [r7, #20]
 80075a2:	4a68      	ldr	r2, [pc, #416]	@ (8007744 <USBH_Process+0x2a0>)
 80075a4:	4413      	add	r3, r2
 80075a6:	4968      	ldr	r1, [pc, #416]	@ (8007748 <USBH_Process+0x2a4>)
 80075a8:	4618      	mov	r0, r3
 80075aa:	f002 fde9 	bl	800a180 <siprintf>
 80075ae:	4602      	mov	r2, r0
 80075b0:	697b      	ldr	r3, [r7, #20]
 80075b2:	4413      	add	r3, r2
 80075b4:	617b      	str	r3, [r7, #20]
 80075b6:	697b      	ldr	r3, [r7, #20]
 80075b8:	4a62      	ldr	r2, [pc, #392]	@ (8007744 <USBH_Process+0x2a0>)
 80075ba:	4413      	add	r3, r2
 80075bc:	4966      	ldr	r1, [pc, #408]	@ (8007758 <USBH_Process+0x2b4>)
 80075be:	4618      	mov	r0, r3
 80075c0:	f002 fdde 	bl	800a180 <siprintf>
 80075c4:	4602      	mov	r2, r0
 80075c6:	697b      	ldr	r3, [r7, #20]
 80075c8:	4413      	add	r3, r2
 80075ca:	617b      	str	r3, [r7, #20]
 80075cc:	697b      	ldr	r3, [r7, #20]
 80075ce:	4a5d      	ldr	r2, [pc, #372]	@ (8007744 <USBH_Process+0x2a0>)
 80075d0:	4413      	add	r3, r2
 80075d2:	495f      	ldr	r1, [pc, #380]	@ (8007750 <USBH_Process+0x2ac>)
 80075d4:	4618      	mov	r0, r3
 80075d6:	f002 fdd3 	bl	800a180 <siprintf>
 80075da:	4602      	mov	r2, r0
 80075dc:	697b      	ldr	r3, [r7, #20]
 80075de:	4413      	add	r3, r2
 80075e0:	617b      	str	r3, [r7, #20]
 80075e2:	697b      	ldr	r3, [r7, #20]
 80075e4:	b29a      	uxth	r2, r3
 80075e6:	2364      	movs	r3, #100	@ 0x64
 80075e8:	4956      	ldr	r1, [pc, #344]	@ (8007744 <USBH_Process+0x2a0>)
 80075ea:	485a      	ldr	r0, [pc, #360]	@ (8007754 <USBH_Process+0x2b0>)
 80075ec:	f7fc ffb0 	bl	8004550 <HAL_UART_Transmit>
        phost->device.RstCnt = 0U;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	2200      	movs	r2, #0
 80075f4:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2202      	movs	r2, #2
 80075fc:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80075fe:	e39a      	b.n	8007d36 <USBH_Process+0x892>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8007606:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800760a:	d93e      	bls.n	800768a <USBH_Process+0x1e6>
          phost->device.RstCnt++;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8007612:	3301      	adds	r3, #1
 8007614:	b2da      	uxtb	r2, r3
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8007622:	2b03      	cmp	r3, #3
 8007624:	d92d      	bls.n	8007682 <USBH_Process+0x1de>
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
 8007626:	2300      	movs	r3, #0
 8007628:	61bb      	str	r3, [r7, #24]
 800762a:	69bb      	ldr	r3, [r7, #24]
 800762c:	4a45      	ldr	r2, [pc, #276]	@ (8007744 <USBH_Process+0x2a0>)
 800762e:	4413      	add	r3, r2
 8007630:	4945      	ldr	r1, [pc, #276]	@ (8007748 <USBH_Process+0x2a4>)
 8007632:	4618      	mov	r0, r3
 8007634:	f002 fda4 	bl	800a180 <siprintf>
 8007638:	4602      	mov	r2, r0
 800763a:	69bb      	ldr	r3, [r7, #24]
 800763c:	4413      	add	r3, r2
 800763e:	61bb      	str	r3, [r7, #24]
 8007640:	69bb      	ldr	r3, [r7, #24]
 8007642:	4a40      	ldr	r2, [pc, #256]	@ (8007744 <USBH_Process+0x2a0>)
 8007644:	4413      	add	r3, r2
 8007646:	4945      	ldr	r1, [pc, #276]	@ (800775c <USBH_Process+0x2b8>)
 8007648:	4618      	mov	r0, r3
 800764a:	f002 fd99 	bl	800a180 <siprintf>
 800764e:	4602      	mov	r2, r0
 8007650:	69bb      	ldr	r3, [r7, #24]
 8007652:	4413      	add	r3, r2
 8007654:	61bb      	str	r3, [r7, #24]
 8007656:	69bb      	ldr	r3, [r7, #24]
 8007658:	4a3a      	ldr	r2, [pc, #232]	@ (8007744 <USBH_Process+0x2a0>)
 800765a:	4413      	add	r3, r2
 800765c:	493c      	ldr	r1, [pc, #240]	@ (8007750 <USBH_Process+0x2ac>)
 800765e:	4618      	mov	r0, r3
 8007660:	f002 fd8e 	bl	800a180 <siprintf>
 8007664:	4602      	mov	r2, r0
 8007666:	69bb      	ldr	r3, [r7, #24]
 8007668:	4413      	add	r3, r2
 800766a:	61bb      	str	r3, [r7, #24]
 800766c:	69bb      	ldr	r3, [r7, #24]
 800766e:	b29a      	uxth	r2, r3
 8007670:	2364      	movs	r3, #100	@ 0x64
 8007672:	4934      	ldr	r1, [pc, #208]	@ (8007744 <USBH_Process+0x2a0>)
 8007674:	4837      	ldr	r0, [pc, #220]	@ (8007754 <USBH_Process+0x2b0>)
 8007676:	f7fc ff6b 	bl	8004550 <HAL_UART_Transmit>
            phost->gState = HOST_ABORT_STATE;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	220d      	movs	r2, #13
 800767e:	701a      	strb	r2, [r3, #0]
      break;
 8007680:	e359      	b.n	8007d36 <USBH_Process+0x892>
            phost->gState = HOST_IDLE;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	2200      	movs	r2, #0
 8007686:	701a      	strb	r2, [r3, #0]
      break;
 8007688:	e355      	b.n	8007d36 <USBH_Process+0x892>
          phost->Timeout += 10U;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8007690:	f103 020a 	add.w	r2, r3, #10
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 800769a:	200a      	movs	r0, #10
 800769c:	f002 fb83 	bl	8009da6 <USBH_Delay>
      break;
 80076a0:	e349      	b.n	8007d36 <USBH_Process+0x892>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d005      	beq.n	80076b8 <USBH_Process+0x214>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80076b2:	2104      	movs	r1, #4
 80076b4:	6878      	ldr	r0, [r7, #4]
 80076b6:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 80076b8:	2064      	movs	r0, #100	@ 0x64
 80076ba:	f002 fb74 	bl	8009da6 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 80076be:	6878      	ldr	r0, [r7, #4]
 80076c0:	f002 fa40 	bl	8009b44 <USBH_LL_GetSpeed>
 80076c4:	4603      	mov	r3, r0
 80076c6:	461a      	mov	r2, r3
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	2205      	movs	r2, #5
 80076d2:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 80076d4:	2100      	movs	r1, #0
 80076d6:	6878      	ldr	r0, [r7, #4]
 80076d8:	f002 f81b 	bl	8009712 <USBH_AllocPipe>
 80076dc:	4603      	mov	r3, r0
 80076de:	461a      	mov	r2, r3
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80076e4:	2180      	movs	r1, #128	@ 0x80
 80076e6:	6878      	ldr	r0, [r7, #4]
 80076e8:	f002 f813 	bl	8009712 <USBH_AllocPipe>
 80076ec:	4603      	mov	r3, r0
 80076ee:	461a      	mov	r2, r3
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	7919      	ldrb	r1, [r3, #4]
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007704:	687a      	ldr	r2, [r7, #4]
 8007706:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007708:	9202      	str	r2, [sp, #8]
 800770a:	2200      	movs	r2, #0
 800770c:	9201      	str	r2, [sp, #4]
 800770e:	9300      	str	r3, [sp, #0]
 8007710:	4603      	mov	r3, r0
 8007712:	2280      	movs	r2, #128	@ 0x80
 8007714:	6878      	ldr	r0, [r7, #4]
 8007716:	f001 ffcd 	bl	80096b4 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	7959      	ldrb	r1, [r3, #5]
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800772a:	687a      	ldr	r2, [r7, #4]
 800772c:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800772e:	9202      	str	r2, [sp, #8]
 8007730:	2200      	movs	r2, #0
 8007732:	9201      	str	r2, [sp, #4]
 8007734:	9300      	str	r3, [sp, #0]
 8007736:	4603      	mov	r3, r0
 8007738:	2200      	movs	r2, #0
 800773a:	6878      	ldr	r0, [r7, #4]
 800773c:	f001 ffba 	bl	80096b4 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007740:	e2f9      	b.n	8007d36 <USBH_Process+0x892>
 8007742:	bf00      	nop
 8007744:	2000012c 	.word	0x2000012c
 8007748:	0800b3a0 	.word	0x0800b3a0
 800774c:	0800b45c 	.word	0x0800b45c
 8007750:	0800b3c8 	.word	0x0800b3c8
 8007754:	200000a4 	.word	0x200000a4
 8007758:	0800b474 	.word	0x0800b474
 800775c:	0800b490 	.word	0x0800b490

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8007760:	6878      	ldr	r0, [r7, #4]
 8007762:	f000 fb03 	bl	8007d6c <USBH_HandleEnum>
 8007766:	4603      	mov	r3, r0
 8007768:	73fb      	strb	r3, [r7, #15]
      if (status == USBH_OK)
 800776a:	7bfb      	ldrb	r3, [r7, #15]
 800776c:	b2db      	uxtb	r3, r3
 800776e:	2b00      	cmp	r3, #0
 8007770:	f040 82d6 	bne.w	8007d20 <USBH_Process+0x87c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");
 8007774:	2300      	movs	r3, #0
 8007776:	627b      	str	r3, [r7, #36]	@ 0x24
 8007778:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800777a:	4aac      	ldr	r2, [pc, #688]	@ (8007a2c <USBH_Process+0x588>)
 800777c:	4413      	add	r3, r2
 800777e:	49ac      	ldr	r1, [pc, #688]	@ (8007a30 <USBH_Process+0x58c>)
 8007780:	4618      	mov	r0, r3
 8007782:	f002 fcfd 	bl	800a180 <siprintf>
 8007786:	4602      	mov	r2, r0
 8007788:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800778a:	4413      	add	r3, r2
 800778c:	627b      	str	r3, [r7, #36]	@ 0x24
 800778e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007790:	4aa6      	ldr	r2, [pc, #664]	@ (8007a2c <USBH_Process+0x588>)
 8007792:	4413      	add	r3, r2
 8007794:	49a7      	ldr	r1, [pc, #668]	@ (8007a34 <USBH_Process+0x590>)
 8007796:	4618      	mov	r0, r3
 8007798:	f002 fcf2 	bl	800a180 <siprintf>
 800779c:	4602      	mov	r2, r0
 800779e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077a0:	4413      	add	r3, r2
 80077a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80077a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077a6:	4aa1      	ldr	r2, [pc, #644]	@ (8007a2c <USBH_Process+0x588>)
 80077a8:	4413      	add	r3, r2
 80077aa:	49a3      	ldr	r1, [pc, #652]	@ (8007a38 <USBH_Process+0x594>)
 80077ac:	4618      	mov	r0, r3
 80077ae:	f002 fce7 	bl	800a180 <siprintf>
 80077b2:	4602      	mov	r2, r0
 80077b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077b6:	4413      	add	r3, r2
 80077b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80077ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077bc:	b29a      	uxth	r2, r3
 80077be:	2364      	movs	r3, #100	@ 0x64
 80077c0:	499a      	ldr	r1, [pc, #616]	@ (8007a2c <USBH_Process+0x588>)
 80077c2:	489e      	ldr	r0, [pc, #632]	@ (8007a3c <USBH_Process+0x598>)
 80077c4:	f7fc fec4 	bl	8004550 <HAL_UART_Transmit>

        phost->device.current_interface = 0U;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	2200      	movs	r2, #0
 80077cc:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 80077d6:	2b01      	cmp	r3, #1
 80077d8:	d12d      	bne.n	8007836 <USBH_Process+0x392>
        {
          USBH_UsrLog("This device has only 1 configuration.");
 80077da:	2300      	movs	r3, #0
 80077dc:	623b      	str	r3, [r7, #32]
 80077de:	6a3b      	ldr	r3, [r7, #32]
 80077e0:	4a92      	ldr	r2, [pc, #584]	@ (8007a2c <USBH_Process+0x588>)
 80077e2:	4413      	add	r3, r2
 80077e4:	4992      	ldr	r1, [pc, #584]	@ (8007a30 <USBH_Process+0x58c>)
 80077e6:	4618      	mov	r0, r3
 80077e8:	f002 fcca 	bl	800a180 <siprintf>
 80077ec:	4602      	mov	r2, r0
 80077ee:	6a3b      	ldr	r3, [r7, #32]
 80077f0:	4413      	add	r3, r2
 80077f2:	623b      	str	r3, [r7, #32]
 80077f4:	6a3b      	ldr	r3, [r7, #32]
 80077f6:	4a8d      	ldr	r2, [pc, #564]	@ (8007a2c <USBH_Process+0x588>)
 80077f8:	4413      	add	r3, r2
 80077fa:	4991      	ldr	r1, [pc, #580]	@ (8007a40 <USBH_Process+0x59c>)
 80077fc:	4618      	mov	r0, r3
 80077fe:	f002 fcbf 	bl	800a180 <siprintf>
 8007802:	4602      	mov	r2, r0
 8007804:	6a3b      	ldr	r3, [r7, #32]
 8007806:	4413      	add	r3, r2
 8007808:	623b      	str	r3, [r7, #32]
 800780a:	6a3b      	ldr	r3, [r7, #32]
 800780c:	4a87      	ldr	r2, [pc, #540]	@ (8007a2c <USBH_Process+0x588>)
 800780e:	4413      	add	r3, r2
 8007810:	4989      	ldr	r1, [pc, #548]	@ (8007a38 <USBH_Process+0x594>)
 8007812:	4618      	mov	r0, r3
 8007814:	f002 fcb4 	bl	800a180 <siprintf>
 8007818:	4602      	mov	r2, r0
 800781a:	6a3b      	ldr	r3, [r7, #32]
 800781c:	4413      	add	r3, r2
 800781e:	623b      	str	r3, [r7, #32]
 8007820:	6a3b      	ldr	r3, [r7, #32]
 8007822:	b29a      	uxth	r2, r3
 8007824:	2364      	movs	r3, #100	@ 0x64
 8007826:	4981      	ldr	r1, [pc, #516]	@ (8007a2c <USBH_Process+0x588>)
 8007828:	4884      	ldr	r0, [pc, #528]	@ (8007a3c <USBH_Process+0x598>)
 800782a:	f7fc fe91 	bl	8004550 <HAL_UART_Transmit>
          phost->gState = HOST_SET_CONFIGURATION;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	2208      	movs	r2, #8
 8007832:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007834:	e274      	b.n	8007d20 <USBH_Process+0x87c>
          phost->gState = HOST_INPUT;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	2207      	movs	r2, #7
 800783a:	701a      	strb	r2, [r3, #0]
      break;
 800783c:	e270      	b.n	8007d20 <USBH_Process+0x87c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007844:	2b00      	cmp	r3, #0
 8007846:	f000 826d 	beq.w	8007d24 <USBH_Process+0x880>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007850:	2101      	movs	r1, #1
 8007852:	6878      	ldr	r0, [r7, #4]
 8007854:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	2208      	movs	r2, #8
 800785a:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800785c:	e262      	b.n	8007d24 <USBH_Process+0x880>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 8007864:	4619      	mov	r1, r3
 8007866:	6878      	ldr	r0, [r7, #4]
 8007868:	f001 f96d 	bl	8008b46 <USBH_SetCfg>
 800786c:	4603      	mov	r3, r0
 800786e:	2b00      	cmp	r3, #0
 8007870:	f040 825a 	bne.w	8007d28 <USBH_Process+0x884>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2209      	movs	r2, #9
 8007878:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
 800787a:	2300      	movs	r3, #0
 800787c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800787e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007880:	4a6a      	ldr	r2, [pc, #424]	@ (8007a2c <USBH_Process+0x588>)
 8007882:	4413      	add	r3, r2
 8007884:	496a      	ldr	r1, [pc, #424]	@ (8007a30 <USBH_Process+0x58c>)
 8007886:	4618      	mov	r0, r3
 8007888:	f002 fc7a 	bl	800a180 <siprintf>
 800788c:	4602      	mov	r2, r0
 800788e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007890:	4413      	add	r3, r2
 8007892:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007894:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007896:	4a65      	ldr	r2, [pc, #404]	@ (8007a2c <USBH_Process+0x588>)
 8007898:	4413      	add	r3, r2
 800789a:	496a      	ldr	r1, [pc, #424]	@ (8007a44 <USBH_Process+0x5a0>)
 800789c:	4618      	mov	r0, r3
 800789e:	f002 fc6f 	bl	800a180 <siprintf>
 80078a2:	4602      	mov	r2, r0
 80078a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078a6:	4413      	add	r3, r2
 80078a8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80078aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078ac:	4a5f      	ldr	r2, [pc, #380]	@ (8007a2c <USBH_Process+0x588>)
 80078ae:	4413      	add	r3, r2
 80078b0:	4961      	ldr	r1, [pc, #388]	@ (8007a38 <USBH_Process+0x594>)
 80078b2:	4618      	mov	r0, r3
 80078b4:	f002 fc64 	bl	800a180 <siprintf>
 80078b8:	4602      	mov	r2, r0
 80078ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078bc:	4413      	add	r3, r2
 80078be:	62bb      	str	r3, [r7, #40]	@ 0x28
 80078c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078c2:	b29a      	uxth	r2, r3
 80078c4:	2364      	movs	r3, #100	@ 0x64
 80078c6:	4959      	ldr	r1, [pc, #356]	@ (8007a2c <USBH_Process+0x588>)
 80078c8:	485c      	ldr	r0, [pc, #368]	@ (8007a3c <USBH_Process+0x598>)
 80078ca:	f7fc fe41 	bl	8004550 <HAL_UART_Transmit>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80078ce:	e22b      	b.n	8007d28 <USBH_Process+0x884>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 80078d6:	f003 0320 	and.w	r3, r3, #32
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d06a      	beq.n	80079b4 <USBH_Process+0x510>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 80078de:	2101      	movs	r1, #1
 80078e0:	6878      	ldr	r0, [r7, #4]
 80078e2:	f001 f953 	bl	8008b8c <USBH_SetFeature>
 80078e6:	4603      	mov	r3, r0
 80078e8:	73fb      	strb	r3, [r7, #15]

        if (status == USBH_OK)
 80078ea:	7bfb      	ldrb	r3, [r7, #15]
 80078ec:	b2db      	uxtb	r3, r3
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d12d      	bne.n	800794e <USBH_Process+0x4aa>
        {
          USBH_UsrLog("Device remote wakeup enabled");
 80078f2:	2300      	movs	r3, #0
 80078f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80078f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078f8:	4a4c      	ldr	r2, [pc, #304]	@ (8007a2c <USBH_Process+0x588>)
 80078fa:	4413      	add	r3, r2
 80078fc:	494c      	ldr	r1, [pc, #304]	@ (8007a30 <USBH_Process+0x58c>)
 80078fe:	4618      	mov	r0, r3
 8007900:	f002 fc3e 	bl	800a180 <siprintf>
 8007904:	4602      	mov	r2, r0
 8007906:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007908:	4413      	add	r3, r2
 800790a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800790c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800790e:	4a47      	ldr	r2, [pc, #284]	@ (8007a2c <USBH_Process+0x588>)
 8007910:	4413      	add	r3, r2
 8007912:	494d      	ldr	r1, [pc, #308]	@ (8007a48 <USBH_Process+0x5a4>)
 8007914:	4618      	mov	r0, r3
 8007916:	f002 fc33 	bl	800a180 <siprintf>
 800791a:	4602      	mov	r2, r0
 800791c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800791e:	4413      	add	r3, r2
 8007920:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007922:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007924:	4a41      	ldr	r2, [pc, #260]	@ (8007a2c <USBH_Process+0x588>)
 8007926:	4413      	add	r3, r2
 8007928:	4943      	ldr	r1, [pc, #268]	@ (8007a38 <USBH_Process+0x594>)
 800792a:	4618      	mov	r0, r3
 800792c:	f002 fc28 	bl	800a180 <siprintf>
 8007930:	4602      	mov	r2, r0
 8007932:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007934:	4413      	add	r3, r2
 8007936:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007938:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800793a:	b29a      	uxth	r2, r3
 800793c:	2364      	movs	r3, #100	@ 0x64
 800793e:	493b      	ldr	r1, [pc, #236]	@ (8007a2c <USBH_Process+0x588>)
 8007940:	483e      	ldr	r0, [pc, #248]	@ (8007a3c <USBH_Process+0x598>)
 8007942:	f7fc fe05 	bl	8004550 <HAL_UART_Transmit>
          phost->gState = HOST_CHECK_CLASS;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	220a      	movs	r2, #10
 800794a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800794c:	e1ee      	b.n	8007d2c <USBH_Process+0x888>
        else if (status == USBH_NOT_SUPPORTED)
 800794e:	7bfb      	ldrb	r3, [r7, #15]
 8007950:	b2db      	uxtb	r3, r3
 8007952:	2b03      	cmp	r3, #3
 8007954:	f040 81ea 	bne.w	8007d2c <USBH_Process+0x888>
          USBH_UsrLog("Remote wakeup not supported by the device");
 8007958:	2300      	movs	r3, #0
 800795a:	633b      	str	r3, [r7, #48]	@ 0x30
 800795c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800795e:	4a33      	ldr	r2, [pc, #204]	@ (8007a2c <USBH_Process+0x588>)
 8007960:	4413      	add	r3, r2
 8007962:	4933      	ldr	r1, [pc, #204]	@ (8007a30 <USBH_Process+0x58c>)
 8007964:	4618      	mov	r0, r3
 8007966:	f002 fc0b 	bl	800a180 <siprintf>
 800796a:	4602      	mov	r2, r0
 800796c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800796e:	4413      	add	r3, r2
 8007970:	633b      	str	r3, [r7, #48]	@ 0x30
 8007972:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007974:	4a2d      	ldr	r2, [pc, #180]	@ (8007a2c <USBH_Process+0x588>)
 8007976:	4413      	add	r3, r2
 8007978:	4934      	ldr	r1, [pc, #208]	@ (8007a4c <USBH_Process+0x5a8>)
 800797a:	4618      	mov	r0, r3
 800797c:	f002 fc00 	bl	800a180 <siprintf>
 8007980:	4602      	mov	r2, r0
 8007982:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007984:	4413      	add	r3, r2
 8007986:	633b      	str	r3, [r7, #48]	@ 0x30
 8007988:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800798a:	4a28      	ldr	r2, [pc, #160]	@ (8007a2c <USBH_Process+0x588>)
 800798c:	4413      	add	r3, r2
 800798e:	492a      	ldr	r1, [pc, #168]	@ (8007a38 <USBH_Process+0x594>)
 8007990:	4618      	mov	r0, r3
 8007992:	f002 fbf5 	bl	800a180 <siprintf>
 8007996:	4602      	mov	r2, r0
 8007998:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800799a:	4413      	add	r3, r2
 800799c:	633b      	str	r3, [r7, #48]	@ 0x30
 800799e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079a0:	b29a      	uxth	r2, r3
 80079a2:	2364      	movs	r3, #100	@ 0x64
 80079a4:	4921      	ldr	r1, [pc, #132]	@ (8007a2c <USBH_Process+0x588>)
 80079a6:	4825      	ldr	r0, [pc, #148]	@ (8007a3c <USBH_Process+0x598>)
 80079a8:	f7fc fdd2 	bl	8004550 <HAL_UART_Transmit>
          phost->gState = HOST_CHECK_CLASS;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	220a      	movs	r2, #10
 80079b0:	701a      	strb	r2, [r3, #0]
      break;
 80079b2:	e1bb      	b.n	8007d2c <USBH_Process+0x888>
        phost->gState = HOST_CHECK_CLASS;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	220a      	movs	r2, #10
 80079b8:	701a      	strb	r2, [r3, #0]
      break;
 80079ba:	e1b7      	b.n	8007d2c <USBH_Process+0x888>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d12a      	bne.n	8007a1c <USBH_Process+0x578>
      {
        USBH_UsrLog("No Class has been registered.");
 80079c6:	2300      	movs	r3, #0
 80079c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80079ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80079cc:	4a17      	ldr	r2, [pc, #92]	@ (8007a2c <USBH_Process+0x588>)
 80079ce:	4413      	add	r3, r2
 80079d0:	4917      	ldr	r1, [pc, #92]	@ (8007a30 <USBH_Process+0x58c>)
 80079d2:	4618      	mov	r0, r3
 80079d4:	f002 fbd4 	bl	800a180 <siprintf>
 80079d8:	4602      	mov	r2, r0
 80079da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80079dc:	4413      	add	r3, r2
 80079de:	637b      	str	r3, [r7, #52]	@ 0x34
 80079e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80079e2:	4a12      	ldr	r2, [pc, #72]	@ (8007a2c <USBH_Process+0x588>)
 80079e4:	4413      	add	r3, r2
 80079e6:	491a      	ldr	r1, [pc, #104]	@ (8007a50 <USBH_Process+0x5ac>)
 80079e8:	4618      	mov	r0, r3
 80079ea:	f002 fbc9 	bl	800a180 <siprintf>
 80079ee:	4602      	mov	r2, r0
 80079f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80079f2:	4413      	add	r3, r2
 80079f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80079f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80079f8:	4a0c      	ldr	r2, [pc, #48]	@ (8007a2c <USBH_Process+0x588>)
 80079fa:	4413      	add	r3, r2
 80079fc:	490e      	ldr	r1, [pc, #56]	@ (8007a38 <USBH_Process+0x594>)
 80079fe:	4618      	mov	r0, r3
 8007a00:	f002 fbbe 	bl	800a180 <siprintf>
 8007a04:	4602      	mov	r2, r0
 8007a06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a08:	4413      	add	r3, r2
 8007a0a:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a0e:	b29a      	uxth	r2, r3
 8007a10:	2364      	movs	r3, #100	@ 0x64
 8007a12:	4906      	ldr	r1, [pc, #24]	@ (8007a2c <USBH_Process+0x588>)
 8007a14:	4809      	ldr	r0, [pc, #36]	@ (8007a3c <USBH_Process+0x598>)
 8007a16:	f7fc fd9b 	bl	8004550 <HAL_UART_Transmit>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007a1a:	e18c      	b.n	8007d36 <USBH_Process+0x892>
        phost->pActiveClass = NULL;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2200      	movs	r2, #0
 8007a20:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007a24:	2300      	movs	r3, #0
 8007a26:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8007a2a:	e02e      	b.n	8007a8a <USBH_Process+0x5e6>
 8007a2c:	2000012c 	.word	0x2000012c
 8007a30:	0800b3a0 	.word	0x0800b3a0
 8007a34:	0800b4bc 	.word	0x0800b4bc
 8007a38:	0800b3c8 	.word	0x0800b3c8
 8007a3c:	200000a4 	.word	0x200000a4
 8007a40:	0800b4d0 	.word	0x0800b4d0
 8007a44:	0800b4f8 	.word	0x0800b4f8
 8007a48:	0800b514 	.word	0x0800b514
 8007a4c:	0800b534 	.word	0x0800b534
 8007a50:	0800b560 	.word	0x0800b560
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8007a54:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	32de      	adds	r2, #222	@ 0xde
 8007a5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a60:	791a      	ldrb	r2, [r3, #4]
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 8007a68:	429a      	cmp	r2, r3
 8007a6a:	d109      	bne.n	8007a80 <USBH_Process+0x5dc>
            phost->pActiveClass = phost->pClass[idx];
 8007a6c:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	32de      	adds	r2, #222	@ 0xde
 8007a74:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 8007a7e:	e008      	b.n	8007a92 <USBH_Process+0x5ee>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007a80:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8007a84:	3301      	adds	r3, #1
 8007a86:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8007a8a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d0e0      	beq.n	8007a54 <USBH_Process+0x5b0>
        if (phost->pActiveClass != NULL)
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d072      	beq.n	8007b82 <USBH_Process+0x6de>
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007aa2:	689b      	ldr	r3, [r3, #8]
 8007aa4:	6878      	ldr	r0, [r7, #4]
 8007aa6:	4798      	blx	r3
 8007aa8:	4603      	mov	r3, r0
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d137      	bne.n	8007b1e <USBH_Process+0x67a>
            phost->gState = HOST_CLASS_REQUEST;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	2206      	movs	r2, #6
 8007ab2:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);
 8007ab4:	2300      	movs	r3, #0
 8007ab6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007ab8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007aba:	4aa1      	ldr	r2, [pc, #644]	@ (8007d40 <USBH_Process+0x89c>)
 8007abc:	4413      	add	r3, r2
 8007abe:	49a1      	ldr	r1, [pc, #644]	@ (8007d44 <USBH_Process+0x8a0>)
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	f002 fb5d 	bl	800a180 <siprintf>
 8007ac6:	4602      	mov	r2, r0
 8007ac8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007aca:	4413      	add	r3, r2
 8007acc:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007ace:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ad0:	4a9b      	ldr	r2, [pc, #620]	@ (8007d40 <USBH_Process+0x89c>)
 8007ad2:	1898      	adds	r0, r3, r2
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	461a      	mov	r2, r3
 8007ade:	499a      	ldr	r1, [pc, #616]	@ (8007d48 <USBH_Process+0x8a4>)
 8007ae0:	f002 fb4e 	bl	800a180 <siprintf>
 8007ae4:	4602      	mov	r2, r0
 8007ae6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ae8:	4413      	add	r3, r2
 8007aea:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007aec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007aee:	4a94      	ldr	r2, [pc, #592]	@ (8007d40 <USBH_Process+0x89c>)
 8007af0:	4413      	add	r3, r2
 8007af2:	4996      	ldr	r1, [pc, #600]	@ (8007d4c <USBH_Process+0x8a8>)
 8007af4:	4618      	mov	r0, r3
 8007af6:	f002 fb43 	bl	800a180 <siprintf>
 8007afa:	4602      	mov	r2, r0
 8007afc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007afe:	4413      	add	r3, r2
 8007b00:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007b02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b04:	b29a      	uxth	r2, r3
 8007b06:	2364      	movs	r3, #100	@ 0x64
 8007b08:	498d      	ldr	r1, [pc, #564]	@ (8007d40 <USBH_Process+0x89c>)
 8007b0a:	4891      	ldr	r0, [pc, #580]	@ (8007d50 <USBH_Process+0x8ac>)
 8007b0c:	f7fc fd20 	bl	8004550 <HAL_UART_Transmit>
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007b16:	2103      	movs	r1, #3
 8007b18:	6878      	ldr	r0, [r7, #4]
 8007b1a:	4798      	blx	r3
      break;
 8007b1c:	e10b      	b.n	8007d36 <USBH_Process+0x892>
            phost->gState = HOST_ABORT_STATE;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	220d      	movs	r2, #13
 8007b22:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
 8007b24:	2300      	movs	r3, #0
 8007b26:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007b28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b2a:	4a85      	ldr	r2, [pc, #532]	@ (8007d40 <USBH_Process+0x89c>)
 8007b2c:	4413      	add	r3, r2
 8007b2e:	4985      	ldr	r1, [pc, #532]	@ (8007d44 <USBH_Process+0x8a0>)
 8007b30:	4618      	mov	r0, r3
 8007b32:	f002 fb25 	bl	800a180 <siprintf>
 8007b36:	4602      	mov	r2, r0
 8007b38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b3a:	4413      	add	r3, r2
 8007b3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007b3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b40:	4a7f      	ldr	r2, [pc, #508]	@ (8007d40 <USBH_Process+0x89c>)
 8007b42:	1898      	adds	r0, r3, r2
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	461a      	mov	r2, r3
 8007b4e:	4981      	ldr	r1, [pc, #516]	@ (8007d54 <USBH_Process+0x8b0>)
 8007b50:	f002 fb16 	bl	800a180 <siprintf>
 8007b54:	4602      	mov	r2, r0
 8007b56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b58:	4413      	add	r3, r2
 8007b5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007b5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b5e:	4a78      	ldr	r2, [pc, #480]	@ (8007d40 <USBH_Process+0x89c>)
 8007b60:	4413      	add	r3, r2
 8007b62:	497a      	ldr	r1, [pc, #488]	@ (8007d4c <USBH_Process+0x8a8>)
 8007b64:	4618      	mov	r0, r3
 8007b66:	f002 fb0b 	bl	800a180 <siprintf>
 8007b6a:	4602      	mov	r2, r0
 8007b6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b6e:	4413      	add	r3, r2
 8007b70:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007b72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b74:	b29a      	uxth	r2, r3
 8007b76:	2364      	movs	r3, #100	@ 0x64
 8007b78:	4971      	ldr	r1, [pc, #452]	@ (8007d40 <USBH_Process+0x89c>)
 8007b7a:	4875      	ldr	r0, [pc, #468]	@ (8007d50 <USBH_Process+0x8ac>)
 8007b7c:	f7fc fce8 	bl	8004550 <HAL_UART_Transmit>
      break;
 8007b80:	e0d9      	b.n	8007d36 <USBH_Process+0x892>
          phost->gState = HOST_ABORT_STATE;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	220d      	movs	r2, #13
 8007b86:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
 8007b88:	2300      	movs	r3, #0
 8007b8a:	643b      	str	r3, [r7, #64]	@ 0x40
 8007b8c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007b8e:	4a6c      	ldr	r2, [pc, #432]	@ (8007d40 <USBH_Process+0x89c>)
 8007b90:	4413      	add	r3, r2
 8007b92:	496c      	ldr	r1, [pc, #432]	@ (8007d44 <USBH_Process+0x8a0>)
 8007b94:	4618      	mov	r0, r3
 8007b96:	f002 faf3 	bl	800a180 <siprintf>
 8007b9a:	4602      	mov	r2, r0
 8007b9c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007b9e:	4413      	add	r3, r2
 8007ba0:	643b      	str	r3, [r7, #64]	@ 0x40
 8007ba2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007ba4:	4a66      	ldr	r2, [pc, #408]	@ (8007d40 <USBH_Process+0x89c>)
 8007ba6:	4413      	add	r3, r2
 8007ba8:	496b      	ldr	r1, [pc, #428]	@ (8007d58 <USBH_Process+0x8b4>)
 8007baa:	4618      	mov	r0, r3
 8007bac:	f002 fae8 	bl	800a180 <siprintf>
 8007bb0:	4602      	mov	r2, r0
 8007bb2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007bb4:	4413      	add	r3, r2
 8007bb6:	643b      	str	r3, [r7, #64]	@ 0x40
 8007bb8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007bba:	4a61      	ldr	r2, [pc, #388]	@ (8007d40 <USBH_Process+0x89c>)
 8007bbc:	4413      	add	r3, r2
 8007bbe:	4963      	ldr	r1, [pc, #396]	@ (8007d4c <USBH_Process+0x8a8>)
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	f002 fadd 	bl	800a180 <siprintf>
 8007bc6:	4602      	mov	r2, r0
 8007bc8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007bca:	4413      	add	r3, r2
 8007bcc:	643b      	str	r3, [r7, #64]	@ 0x40
 8007bce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007bd0:	b29a      	uxth	r2, r3
 8007bd2:	2364      	movs	r3, #100	@ 0x64
 8007bd4:	495a      	ldr	r1, [pc, #360]	@ (8007d40 <USBH_Process+0x89c>)
 8007bd6:	485e      	ldr	r0, [pc, #376]	@ (8007d50 <USBH_Process+0x8ac>)
 8007bd8:	f7fc fcba 	bl	8004550 <HAL_UART_Transmit>
      break;
 8007bdc:	e0ab      	b.n	8007d36 <USBH_Process+0x892>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d021      	beq.n	8007c2c <USBH_Process+0x788>
      {
        status = phost->pActiveClass->Requests(phost);
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007bee:	691b      	ldr	r3, [r3, #16]
 8007bf0:	6878      	ldr	r0, [r7, #4]
 8007bf2:	4798      	blx	r3
 8007bf4:	4603      	mov	r3, r0
 8007bf6:	73fb      	strb	r3, [r7, #15]

        if (status == USBH_OK)
 8007bf8:	7bfb      	ldrb	r3, [r7, #15]
 8007bfa:	b2db      	uxtb	r3, r3
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d103      	bne.n	8007c08 <USBH_Process+0x764>
        {
          phost->gState = HOST_CLASS;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	220b      	movs	r2, #11
 8007c04:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007c06:	e093      	b.n	8007d30 <USBH_Process+0x88c>
        else if (status == USBH_FAIL)
 8007c08:	7bfb      	ldrb	r3, [r7, #15]
 8007c0a:	b2db      	uxtb	r3, r3
 8007c0c:	2b02      	cmp	r3, #2
 8007c0e:	f040 808f 	bne.w	8007d30 <USBH_Process+0x88c>
          phost->gState = HOST_ABORT_STATE;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	220d      	movs	r2, #13
 8007c16:	701a      	strb	r2, [r3, #0]
          USBH_ErrLog("Device not responding Please Unplug.");
 8007c18:	4850      	ldr	r0, [pc, #320]	@ (8007d5c <USBH_Process+0x8b8>)
 8007c1a:	f002 fa97 	bl	800a14c <iprintf>
 8007c1e:	4850      	ldr	r0, [pc, #320]	@ (8007d60 <USBH_Process+0x8bc>)
 8007c20:	f002 fa94 	bl	800a14c <iprintf>
 8007c24:	200a      	movs	r0, #10
 8007c26:	f002 faa3 	bl	800a170 <putchar>
      break;
 8007c2a:	e081      	b.n	8007d30 <USBH_Process+0x88c>
        phost->gState = HOST_ABORT_STATE;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	220d      	movs	r2, #13
 8007c30:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
 8007c32:	484a      	ldr	r0, [pc, #296]	@ (8007d5c <USBH_Process+0x8b8>)
 8007c34:	f002 fa8a 	bl	800a14c <iprintf>
 8007c38:	484a      	ldr	r0, [pc, #296]	@ (8007d64 <USBH_Process+0x8c0>)
 8007c3a:	f002 fa87 	bl	800a14c <iprintf>
 8007c3e:	200a      	movs	r0, #10
 8007c40:	f002 fa96 	bl	800a170 <putchar>
      break;
 8007c44:	e074      	b.n	8007d30 <USBH_Process+0x88c>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d071      	beq.n	8007d34 <USBH_Process+0x890>
      {
        phost->pActiveClass->BgndProcess(phost);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007c56:	695b      	ldr	r3, [r3, #20]
 8007c58:	6878      	ldr	r0, [r7, #4]
 8007c5a:	4798      	blx	r3
      }
      break;
 8007c5c:	e06a      	b.n	8007d34 <USBH_Process+0x890>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	2200      	movs	r2, #0
 8007c62:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 8007c66:	6878      	ldr	r0, [r7, #4]
 8007c68:	f7ff f9d2 	bl	8007010 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d009      	beq.n	8007c8a <USBH_Process+0x7e6>
      {
        phost->pActiveClass->DeInit(phost);
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007c7c:	68db      	ldr	r3, [r3, #12]
 8007c7e:	6878      	ldr	r0, [r7, #4]
 8007c80:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	2200      	movs	r2, #0
 8007c86:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d005      	beq.n	8007ca0 <USBH_Process+0x7fc>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007c9a:	2105      	movs	r1, #5
 8007c9c:	6878      	ldr	r0, [r7, #4]
 8007c9e:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	61fb      	str	r3, [r7, #28]
 8007ca4:	69fb      	ldr	r3, [r7, #28]
 8007ca6:	4a26      	ldr	r2, [pc, #152]	@ (8007d40 <USBH_Process+0x89c>)
 8007ca8:	4413      	add	r3, r2
 8007caa:	4926      	ldr	r1, [pc, #152]	@ (8007d44 <USBH_Process+0x8a0>)
 8007cac:	4618      	mov	r0, r3
 8007cae:	f002 fa67 	bl	800a180 <siprintf>
 8007cb2:	4602      	mov	r2, r0
 8007cb4:	69fb      	ldr	r3, [r7, #28]
 8007cb6:	4413      	add	r3, r2
 8007cb8:	61fb      	str	r3, [r7, #28]
 8007cba:	69fb      	ldr	r3, [r7, #28]
 8007cbc:	4a20      	ldr	r2, [pc, #128]	@ (8007d40 <USBH_Process+0x89c>)
 8007cbe:	4413      	add	r3, r2
 8007cc0:	4929      	ldr	r1, [pc, #164]	@ (8007d68 <USBH_Process+0x8c4>)
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	f002 fa5c 	bl	800a180 <siprintf>
 8007cc8:	4602      	mov	r2, r0
 8007cca:	69fb      	ldr	r3, [r7, #28]
 8007ccc:	4413      	add	r3, r2
 8007cce:	61fb      	str	r3, [r7, #28]
 8007cd0:	69fb      	ldr	r3, [r7, #28]
 8007cd2:	4a1b      	ldr	r2, [pc, #108]	@ (8007d40 <USBH_Process+0x89c>)
 8007cd4:	4413      	add	r3, r2
 8007cd6:	491d      	ldr	r1, [pc, #116]	@ (8007d4c <USBH_Process+0x8a8>)
 8007cd8:	4618      	mov	r0, r3
 8007cda:	f002 fa51 	bl	800a180 <siprintf>
 8007cde:	4602      	mov	r2, r0
 8007ce0:	69fb      	ldr	r3, [r7, #28]
 8007ce2:	4413      	add	r3, r2
 8007ce4:	61fb      	str	r3, [r7, #28]
 8007ce6:	69fb      	ldr	r3, [r7, #28]
 8007ce8:	b29a      	uxth	r2, r3
 8007cea:	2364      	movs	r3, #100	@ 0x64
 8007cec:	4914      	ldr	r1, [pc, #80]	@ (8007d40 <USBH_Process+0x89c>)
 8007cee:	4818      	ldr	r0, [pc, #96]	@ (8007d50 <USBH_Process+0x8ac>)
 8007cf0:	f7fc fc2e 	bl	8004550 <HAL_UART_Transmit>

      if (phost->device.is_ReEnumerated == 1U)
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 8007cfa:	b2db      	uxtb	r3, r3
 8007cfc:	2b01      	cmp	r3, #1
 8007cfe:	d107      	bne.n	8007d10 <USBH_Process+0x86c>
      {
        phost->device.is_ReEnumerated = 0U;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	2200      	movs	r2, #0
 8007d04:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8007d08:	6878      	ldr	r0, [r7, #4]
 8007d0a:	f7ff fbbb 	bl	8007484 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007d0e:	e012      	b.n	8007d36 <USBH_Process+0x892>
        (void)USBH_LL_Start(phost);
 8007d10:	6878      	ldr	r0, [r7, #4]
 8007d12:	f001 fee1 	bl	8009ad8 <USBH_LL_Start>
      break;
 8007d16:	e00e      	b.n	8007d36 <USBH_Process+0x892>

    case HOST_ABORT_STATE:
    default :
      break;
 8007d18:	bf00      	nop
 8007d1a:	e00c      	b.n	8007d36 <USBH_Process+0x892>
      break;
 8007d1c:	bf00      	nop
 8007d1e:	e00a      	b.n	8007d36 <USBH_Process+0x892>
      break;
 8007d20:	bf00      	nop
 8007d22:	e008      	b.n	8007d36 <USBH_Process+0x892>
    break;
 8007d24:	bf00      	nop
 8007d26:	e006      	b.n	8007d36 <USBH_Process+0x892>
      break;
 8007d28:	bf00      	nop
 8007d2a:	e004      	b.n	8007d36 <USBH_Process+0x892>
      break;
 8007d2c:	bf00      	nop
 8007d2e:	e002      	b.n	8007d36 <USBH_Process+0x892>
      break;
 8007d30:	bf00      	nop
 8007d32:	e000      	b.n	8007d36 <USBH_Process+0x892>
      break;
 8007d34:	bf00      	nop
  }
  return USBH_OK;
 8007d36:	2300      	movs	r3, #0
}
 8007d38:	4618      	mov	r0, r3
 8007d3a:	3748      	adds	r7, #72	@ 0x48
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	bd80      	pop	{r7, pc}
 8007d40:	2000012c 	.word	0x2000012c
 8007d44:	0800b3a0 	.word	0x0800b3a0
 8007d48:	0800b580 	.word	0x0800b580
 8007d4c:	0800b3c8 	.word	0x0800b3c8
 8007d50:	200000a4 	.word	0x200000a4
 8007d54:	0800b594 	.word	0x0800b594
 8007d58:	0800b5b4 	.word	0x0800b5b4
 8007d5c:	0800b350 	.word	0x0800b350
 8007d60:	0800b5dc 	.word	0x0800b5dc
 8007d64:	0800b604 	.word	0x0800b604
 8007d68:	0800b61c 	.word	0x0800b61c

08007d6c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	b098      	sub	sp, #96	@ 0x60
 8007d70:	af04      	add	r7, sp, #16
 8007d72:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007d74:	2301      	movs	r3, #1
 8007d76:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8007d7a:	2301      	movs	r3, #1
 8007d7c:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e

  switch (phost->EnumState)
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	785b      	ldrb	r3, [r3, #1]
 8007d84:	2b07      	cmp	r3, #7
 8007d86:	f200 851e 	bhi.w	80087c6 <USBH_HandleEnum+0xa5a>
 8007d8a:	a201      	add	r2, pc, #4	@ (adr r2, 8007d90 <USBH_HandleEnum+0x24>)
 8007d8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d90:	08007db1 	.word	0x08007db1
 8007d94:	08007edd 	.word	0x08007edd
 8007d98:	08008091 	.word	0x08008091
 8007d9c:	080081e1 	.word	0x080081e1
 8007da0:	080082b7 	.word	0x080082b7
 8007da4:	080083b7 	.word	0x080083b7
 8007da8:	08008507 	.word	0x08008507
 8007dac:	08008679 	.word	0x08008679
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8007db0:	2108      	movs	r1, #8
 8007db2:	6878      	ldr	r0, [r7, #4]
 8007db4:	f000 fdba 	bl	800892c <USBH_Get_DevDesc>
 8007db8:	4603      	mov	r3, r0
 8007dba:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
      if (ReqStatus == USBH_OK)
 8007dbe:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d12f      	bne.n	8007e26 <USBH_HandleEnum+0xba>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	2201      	movs	r2, #1
 8007dd4:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	7919      	ldrb	r1, [r3, #4]
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007de6:	687a      	ldr	r2, [r7, #4]
 8007de8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007dea:	9202      	str	r2, [sp, #8]
 8007dec:	2200      	movs	r2, #0
 8007dee:	9201      	str	r2, [sp, #4]
 8007df0:	9300      	str	r3, [sp, #0]
 8007df2:	4603      	mov	r3, r0
 8007df4:	2280      	movs	r2, #128	@ 0x80
 8007df6:	6878      	ldr	r0, [r7, #4]
 8007df8:	f001 fc5c 	bl	80096b4 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	7959      	ldrb	r1, [r3, #5]
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007e0c:	687a      	ldr	r2, [r7, #4]
 8007e0e:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007e10:	9202      	str	r2, [sp, #8]
 8007e12:	2200      	movs	r2, #0
 8007e14:	9201      	str	r2, [sp, #4]
 8007e16:	9300      	str	r3, [sp, #0]
 8007e18:	4603      	mov	r3, r0
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	6878      	ldr	r0, [r7, #4]
 8007e1e:	f001 fc49 	bl	80096b4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007e22:	f000 bcd2 	b.w	80087ca <USBH_HandleEnum+0xa5e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007e26:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8007e2a:	2b03      	cmp	r3, #3
 8007e2c:	f040 84cd 	bne.w	80087ca <USBH_HandleEnum+0xa5e>
        USBH_ErrLog("Control error: Get Device Descriptor request failed");
 8007e30:	488d      	ldr	r0, [pc, #564]	@ (8008068 <USBH_HandleEnum+0x2fc>)
 8007e32:	f002 f98b 	bl	800a14c <iprintf>
 8007e36:	488d      	ldr	r0, [pc, #564]	@ (800806c <USBH_HandleEnum+0x300>)
 8007e38:	f002 f988 	bl	800a14c <iprintf>
 8007e3c:	200a      	movs	r0, #10
 8007e3e:	f002 f997 	bl	800a170 <putchar>
        phost->device.EnumCnt++;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007e48:	3301      	adds	r3, #1
 8007e4a:	b2da      	uxtb	r2, r3
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007e58:	2b03      	cmp	r3, #3
 8007e5a:	d92e      	bls.n	8007eba <USBH_HandleEnum+0x14e>
          USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	60bb      	str	r3, [r7, #8]
 8007e60:	68bb      	ldr	r3, [r7, #8]
 8007e62:	4a83      	ldr	r2, [pc, #524]	@ (8008070 <USBH_HandleEnum+0x304>)
 8007e64:	4413      	add	r3, r2
 8007e66:	4983      	ldr	r1, [pc, #524]	@ (8008074 <USBH_HandleEnum+0x308>)
 8007e68:	4618      	mov	r0, r3
 8007e6a:	f002 f989 	bl	800a180 <siprintf>
 8007e6e:	4602      	mov	r2, r0
 8007e70:	68bb      	ldr	r3, [r7, #8]
 8007e72:	4413      	add	r3, r2
 8007e74:	60bb      	str	r3, [r7, #8]
 8007e76:	68bb      	ldr	r3, [r7, #8]
 8007e78:	4a7d      	ldr	r2, [pc, #500]	@ (8008070 <USBH_HandleEnum+0x304>)
 8007e7a:	4413      	add	r3, r2
 8007e7c:	497e      	ldr	r1, [pc, #504]	@ (8008078 <USBH_HandleEnum+0x30c>)
 8007e7e:	4618      	mov	r0, r3
 8007e80:	f002 f97e 	bl	800a180 <siprintf>
 8007e84:	4602      	mov	r2, r0
 8007e86:	68bb      	ldr	r3, [r7, #8]
 8007e88:	4413      	add	r3, r2
 8007e8a:	60bb      	str	r3, [r7, #8]
 8007e8c:	68bb      	ldr	r3, [r7, #8]
 8007e8e:	4a78      	ldr	r2, [pc, #480]	@ (8008070 <USBH_HandleEnum+0x304>)
 8007e90:	4413      	add	r3, r2
 8007e92:	497a      	ldr	r1, [pc, #488]	@ (800807c <USBH_HandleEnum+0x310>)
 8007e94:	4618      	mov	r0, r3
 8007e96:	f002 f973 	bl	800a180 <siprintf>
 8007e9a:	4602      	mov	r2, r0
 8007e9c:	68bb      	ldr	r3, [r7, #8]
 8007e9e:	4413      	add	r3, r2
 8007ea0:	60bb      	str	r3, [r7, #8]
 8007ea2:	68bb      	ldr	r3, [r7, #8]
 8007ea4:	b29a      	uxth	r2, r3
 8007ea6:	2364      	movs	r3, #100	@ 0x64
 8007ea8:	4971      	ldr	r1, [pc, #452]	@ (8008070 <USBH_HandleEnum+0x304>)
 8007eaa:	4875      	ldr	r0, [pc, #468]	@ (8008080 <USBH_HandleEnum+0x314>)
 8007eac:	f7fc fb50 	bl	8004550 <HAL_UART_Transmit>
          phost->gState = HOST_ABORT_STATE;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	220d      	movs	r2, #13
 8007eb4:	701a      	strb	r2, [r3, #0]
      break;
 8007eb6:	f000 bc88 	b.w	80087ca <USBH_HandleEnum+0xa5e>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	795b      	ldrb	r3, [r3, #5]
 8007ebe:	4619      	mov	r1, r3
 8007ec0:	6878      	ldr	r0, [r7, #4]
 8007ec2:	f001 fc47 	bl	8009754 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	791b      	ldrb	r3, [r3, #4]
 8007eca:	4619      	mov	r1, r3
 8007ecc:	6878      	ldr	r0, [r7, #4]
 8007ece:	f001 fc41 	bl	8009754 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	701a      	strb	r2, [r3, #0]
      break;
 8007ed8:	f000 bc77 	b.w	80087ca <USBH_HandleEnum+0xa5e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8007edc:	2112      	movs	r1, #18
 8007ede:	6878      	ldr	r0, [r7, #4]
 8007ee0:	f000 fd24 	bl	800892c <USBH_Get_DevDesc>
 8007ee4:	4603      	mov	r3, r0
 8007ee6:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
      if (ReqStatus == USBH_OK)
 8007eea:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d15e      	bne.n	8007fb0 <USBH_HandleEnum+0x244>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	613b      	str	r3, [r7, #16]
 8007ef6:	693b      	ldr	r3, [r7, #16]
 8007ef8:	4a5d      	ldr	r2, [pc, #372]	@ (8008070 <USBH_HandleEnum+0x304>)
 8007efa:	4413      	add	r3, r2
 8007efc:	495d      	ldr	r1, [pc, #372]	@ (8008074 <USBH_HandleEnum+0x308>)
 8007efe:	4618      	mov	r0, r3
 8007f00:	f002 f93e 	bl	800a180 <siprintf>
 8007f04:	4602      	mov	r2, r0
 8007f06:	693b      	ldr	r3, [r7, #16]
 8007f08:	4413      	add	r3, r2
 8007f0a:	613b      	str	r3, [r7, #16]
 8007f0c:	693b      	ldr	r3, [r7, #16]
 8007f0e:	4a58      	ldr	r2, [pc, #352]	@ (8008070 <USBH_HandleEnum+0x304>)
 8007f10:	1898      	adds	r0, r3, r2
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	f8b3 3330 	ldrh.w	r3, [r3, #816]	@ 0x330
 8007f18:	461a      	mov	r2, r3
 8007f1a:	495a      	ldr	r1, [pc, #360]	@ (8008084 <USBH_HandleEnum+0x318>)
 8007f1c:	f002 f930 	bl	800a180 <siprintf>
 8007f20:	4602      	mov	r2, r0
 8007f22:	693b      	ldr	r3, [r7, #16]
 8007f24:	4413      	add	r3, r2
 8007f26:	613b      	str	r3, [r7, #16]
 8007f28:	693b      	ldr	r3, [r7, #16]
 8007f2a:	4a51      	ldr	r2, [pc, #324]	@ (8008070 <USBH_HandleEnum+0x304>)
 8007f2c:	4413      	add	r3, r2
 8007f2e:	4953      	ldr	r1, [pc, #332]	@ (800807c <USBH_HandleEnum+0x310>)
 8007f30:	4618      	mov	r0, r3
 8007f32:	f002 f925 	bl	800a180 <siprintf>
 8007f36:	4602      	mov	r2, r0
 8007f38:	693b      	ldr	r3, [r7, #16]
 8007f3a:	4413      	add	r3, r2
 8007f3c:	613b      	str	r3, [r7, #16]
 8007f3e:	693b      	ldr	r3, [r7, #16]
 8007f40:	b29a      	uxth	r2, r3
 8007f42:	2364      	movs	r3, #100	@ 0x64
 8007f44:	494a      	ldr	r1, [pc, #296]	@ (8008070 <USBH_HandleEnum+0x304>)
 8007f46:	484e      	ldr	r0, [pc, #312]	@ (8008080 <USBH_HandleEnum+0x314>)
 8007f48:	f7fc fb02 	bl	8004550 <HAL_UART_Transmit>
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);
 8007f4c:	2300      	movs	r3, #0
 8007f4e:	60fb      	str	r3, [r7, #12]
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	4a47      	ldr	r2, [pc, #284]	@ (8008070 <USBH_HandleEnum+0x304>)
 8007f54:	4413      	add	r3, r2
 8007f56:	4947      	ldr	r1, [pc, #284]	@ (8008074 <USBH_HandleEnum+0x308>)
 8007f58:	4618      	mov	r0, r3
 8007f5a:	f002 f911 	bl	800a180 <siprintf>
 8007f5e:	4602      	mov	r2, r0
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	4413      	add	r3, r2
 8007f64:	60fb      	str	r3, [r7, #12]
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	4a41      	ldr	r2, [pc, #260]	@ (8008070 <USBH_HandleEnum+0x304>)
 8007f6a:	1898      	adds	r0, r3, r2
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	f8b3 332e 	ldrh.w	r3, [r3, #814]	@ 0x32e
 8007f72:	461a      	mov	r2, r3
 8007f74:	4944      	ldr	r1, [pc, #272]	@ (8008088 <USBH_HandleEnum+0x31c>)
 8007f76:	f002 f903 	bl	800a180 <siprintf>
 8007f7a:	4602      	mov	r2, r0
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	4413      	add	r3, r2
 8007f80:	60fb      	str	r3, [r7, #12]
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	4a3a      	ldr	r2, [pc, #232]	@ (8008070 <USBH_HandleEnum+0x304>)
 8007f86:	4413      	add	r3, r2
 8007f88:	493c      	ldr	r1, [pc, #240]	@ (800807c <USBH_HandleEnum+0x310>)
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	f002 f8f8 	bl	800a180 <siprintf>
 8007f90:	4602      	mov	r2, r0
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	4413      	add	r3, r2
 8007f96:	60fb      	str	r3, [r7, #12]
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	b29a      	uxth	r2, r3
 8007f9c:	2364      	movs	r3, #100	@ 0x64
 8007f9e:	4934      	ldr	r1, [pc, #208]	@ (8008070 <USBH_HandleEnum+0x304>)
 8007fa0:	4837      	ldr	r0, [pc, #220]	@ (8008080 <USBH_HandleEnum+0x314>)
 8007fa2:	f7fc fad5 	bl	8004550 <HAL_UART_Transmit>

        phost->EnumState = ENUM_SET_ADDR;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	2202      	movs	r2, #2
 8007faa:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007fac:	f000 bc0f 	b.w	80087ce <USBH_HandleEnum+0xa62>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007fb0:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8007fb4:	2b03      	cmp	r3, #3
 8007fb6:	f040 840a 	bne.w	80087ce <USBH_HandleEnum+0xa62>
        USBH_ErrLog("Control error: Get Full Device Descriptor request failed");
 8007fba:	482b      	ldr	r0, [pc, #172]	@ (8008068 <USBH_HandleEnum+0x2fc>)
 8007fbc:	f002 f8c6 	bl	800a14c <iprintf>
 8007fc0:	4832      	ldr	r0, [pc, #200]	@ (800808c <USBH_HandleEnum+0x320>)
 8007fc2:	f002 f8c3 	bl	800a14c <iprintf>
 8007fc6:	200a      	movs	r0, #10
 8007fc8:	f002 f8d2 	bl	800a170 <putchar>
        phost->device.EnumCnt++;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007fd2:	3301      	adds	r3, #1
 8007fd4:	b2da      	uxtb	r2, r3
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007fe2:	2b03      	cmp	r3, #3
 8007fe4:	d92d      	bls.n	8008042 <USBH_HandleEnum+0x2d6>
          USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	617b      	str	r3, [r7, #20]
 8007fea:	697b      	ldr	r3, [r7, #20]
 8007fec:	4a20      	ldr	r2, [pc, #128]	@ (8008070 <USBH_HandleEnum+0x304>)
 8007fee:	4413      	add	r3, r2
 8007ff0:	4920      	ldr	r1, [pc, #128]	@ (8008074 <USBH_HandleEnum+0x308>)
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	f002 f8c4 	bl	800a180 <siprintf>
 8007ff8:	4602      	mov	r2, r0
 8007ffa:	697b      	ldr	r3, [r7, #20]
 8007ffc:	4413      	add	r3, r2
 8007ffe:	617b      	str	r3, [r7, #20]
 8008000:	697b      	ldr	r3, [r7, #20]
 8008002:	4a1b      	ldr	r2, [pc, #108]	@ (8008070 <USBH_HandleEnum+0x304>)
 8008004:	4413      	add	r3, r2
 8008006:	491c      	ldr	r1, [pc, #112]	@ (8008078 <USBH_HandleEnum+0x30c>)
 8008008:	4618      	mov	r0, r3
 800800a:	f002 f8b9 	bl	800a180 <siprintf>
 800800e:	4602      	mov	r2, r0
 8008010:	697b      	ldr	r3, [r7, #20]
 8008012:	4413      	add	r3, r2
 8008014:	617b      	str	r3, [r7, #20]
 8008016:	697b      	ldr	r3, [r7, #20]
 8008018:	4a15      	ldr	r2, [pc, #84]	@ (8008070 <USBH_HandleEnum+0x304>)
 800801a:	4413      	add	r3, r2
 800801c:	4917      	ldr	r1, [pc, #92]	@ (800807c <USBH_HandleEnum+0x310>)
 800801e:	4618      	mov	r0, r3
 8008020:	f002 f8ae 	bl	800a180 <siprintf>
 8008024:	4602      	mov	r2, r0
 8008026:	697b      	ldr	r3, [r7, #20]
 8008028:	4413      	add	r3, r2
 800802a:	617b      	str	r3, [r7, #20]
 800802c:	697b      	ldr	r3, [r7, #20]
 800802e:	b29a      	uxth	r2, r3
 8008030:	2364      	movs	r3, #100	@ 0x64
 8008032:	490f      	ldr	r1, [pc, #60]	@ (8008070 <USBH_HandleEnum+0x304>)
 8008034:	4812      	ldr	r0, [pc, #72]	@ (8008080 <USBH_HandleEnum+0x314>)
 8008036:	f7fc fa8b 	bl	8004550 <HAL_UART_Transmit>
          phost->gState = HOST_ABORT_STATE;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	220d      	movs	r2, #13
 800803e:	701a      	strb	r2, [r3, #0]
      break;
 8008040:	e3c5      	b.n	80087ce <USBH_HandleEnum+0xa62>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	795b      	ldrb	r3, [r3, #5]
 8008046:	4619      	mov	r1, r3
 8008048:	6878      	ldr	r0, [r7, #4]
 800804a:	f001 fb83 	bl	8009754 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	791b      	ldrb	r3, [r3, #4]
 8008052:	4619      	mov	r1, r3
 8008054:	6878      	ldr	r0, [r7, #4]
 8008056:	f001 fb7d 	bl	8009754 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	2200      	movs	r2, #0
 800805e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	2200      	movs	r2, #0
 8008064:	701a      	strb	r2, [r3, #0]
      break;
 8008066:	e3b2      	b.n	80087ce <USBH_HandleEnum+0xa62>
 8008068:	0800b350 	.word	0x0800b350
 800806c:	0800b634 	.word	0x0800b634
 8008070:	2000012c 	.word	0x2000012c
 8008074:	0800b3a0 	.word	0x0800b3a0
 8008078:	0800b668 	.word	0x0800b668
 800807c:	0800b3c8 	.word	0x0800b3c8
 8008080:	200000a4 	.word	0x200000a4
 8008084:	0800b6a8 	.word	0x0800b6a8
 8008088:	0800b6b4 	.word	0x0800b6b4
 800808c:	0800b6c0 	.word	0x0800b6c0

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8008090:	2101      	movs	r1, #1
 8008092:	6878      	ldr	r0, [r7, #4]
 8008094:	f000 fd33 	bl	8008afe <USBH_SetAddress>
 8008098:	4603      	mov	r3, r0
 800809a:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
      if (ReqStatus == USBH_OK)
 800809e:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d15d      	bne.n	8008162 <USBH_HandleEnum+0x3f6>
      {
        USBH_Delay(2U);
 80080a6:	2002      	movs	r0, #2
 80080a8:	f001 fe7d 	bl	8009da6 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	2201      	movs	r2, #1
 80080b0:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
 80080b4:	2300      	movs	r3, #0
 80080b6:	61bb      	str	r3, [r7, #24]
 80080b8:	69bb      	ldr	r3, [r7, #24]
 80080ba:	4aac      	ldr	r2, [pc, #688]	@ (800836c <USBH_HandleEnum+0x600>)
 80080bc:	4413      	add	r3, r2
 80080be:	49ac      	ldr	r1, [pc, #688]	@ (8008370 <USBH_HandleEnum+0x604>)
 80080c0:	4618      	mov	r0, r3
 80080c2:	f002 f85d 	bl	800a180 <siprintf>
 80080c6:	4602      	mov	r2, r0
 80080c8:	69bb      	ldr	r3, [r7, #24]
 80080ca:	4413      	add	r3, r2
 80080cc:	61bb      	str	r3, [r7, #24]
 80080ce:	69bb      	ldr	r3, [r7, #24]
 80080d0:	4aa6      	ldr	r2, [pc, #664]	@ (800836c <USBH_HandleEnum+0x600>)
 80080d2:	1898      	adds	r0, r3, r2
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	f893 331c 	ldrb.w	r3, [r3, #796]	@ 0x31c
 80080da:	461a      	mov	r2, r3
 80080dc:	49a5      	ldr	r1, [pc, #660]	@ (8008374 <USBH_HandleEnum+0x608>)
 80080de:	f002 f84f 	bl	800a180 <siprintf>
 80080e2:	4602      	mov	r2, r0
 80080e4:	69bb      	ldr	r3, [r7, #24]
 80080e6:	4413      	add	r3, r2
 80080e8:	61bb      	str	r3, [r7, #24]
 80080ea:	69bb      	ldr	r3, [r7, #24]
 80080ec:	4a9f      	ldr	r2, [pc, #636]	@ (800836c <USBH_HandleEnum+0x600>)
 80080ee:	4413      	add	r3, r2
 80080f0:	49a1      	ldr	r1, [pc, #644]	@ (8008378 <USBH_HandleEnum+0x60c>)
 80080f2:	4618      	mov	r0, r3
 80080f4:	f002 f844 	bl	800a180 <siprintf>
 80080f8:	4602      	mov	r2, r0
 80080fa:	69bb      	ldr	r3, [r7, #24]
 80080fc:	4413      	add	r3, r2
 80080fe:	61bb      	str	r3, [r7, #24]
 8008100:	69bb      	ldr	r3, [r7, #24]
 8008102:	b29a      	uxth	r2, r3
 8008104:	2364      	movs	r3, #100	@ 0x64
 8008106:	4999      	ldr	r1, [pc, #612]	@ (800836c <USBH_HandleEnum+0x600>)
 8008108:	489c      	ldr	r0, [pc, #624]	@ (800837c <USBH_HandleEnum+0x610>)
 800810a:	f7fc fa21 	bl	8004550 <HAL_UART_Transmit>
        phost->EnumState = ENUM_GET_CFG_DESC;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	2203      	movs	r2, #3
 8008112:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	7919      	ldrb	r1, [r3, #4]
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008124:	687a      	ldr	r2, [r7, #4]
 8008126:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008128:	9202      	str	r2, [sp, #8]
 800812a:	2200      	movs	r2, #0
 800812c:	9201      	str	r2, [sp, #4]
 800812e:	9300      	str	r3, [sp, #0]
 8008130:	4603      	mov	r3, r0
 8008132:	2280      	movs	r2, #128	@ 0x80
 8008134:	6878      	ldr	r0, [r7, #4]
 8008136:	f001 fabd 	bl	80096b4 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	7959      	ldrb	r1, [r3, #5]
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800814a:	687a      	ldr	r2, [r7, #4]
 800814c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800814e:	9202      	str	r2, [sp, #8]
 8008150:	2200      	movs	r2, #0
 8008152:	9201      	str	r2, [sp, #4]
 8008154:	9300      	str	r3, [sp, #0]
 8008156:	4603      	mov	r3, r0
 8008158:	2200      	movs	r2, #0
 800815a:	6878      	ldr	r0, [r7, #4]
 800815c:	f001 faaa 	bl	80096b4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8008160:	e337      	b.n	80087d2 <USBH_HandleEnum+0xa66>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008162:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8008166:	2b03      	cmp	r3, #3
 8008168:	f040 8333 	bne.w	80087d2 <USBH_HandleEnum+0xa66>
        USBH_ErrLog("Control error: Device Set Address request failed");
 800816c:	4884      	ldr	r0, [pc, #528]	@ (8008380 <USBH_HandleEnum+0x614>)
 800816e:	f001 ffed 	bl	800a14c <iprintf>
 8008172:	4884      	ldr	r0, [pc, #528]	@ (8008384 <USBH_HandleEnum+0x618>)
 8008174:	f001 ffea 	bl	800a14c <iprintf>
 8008178:	200a      	movs	r0, #10
 800817a:	f001 fff9 	bl	800a170 <putchar>
        USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 800817e:	2300      	movs	r3, #0
 8008180:	61fb      	str	r3, [r7, #28]
 8008182:	69fb      	ldr	r3, [r7, #28]
 8008184:	4a79      	ldr	r2, [pc, #484]	@ (800836c <USBH_HandleEnum+0x600>)
 8008186:	4413      	add	r3, r2
 8008188:	4979      	ldr	r1, [pc, #484]	@ (8008370 <USBH_HandleEnum+0x604>)
 800818a:	4618      	mov	r0, r3
 800818c:	f001 fff8 	bl	800a180 <siprintf>
 8008190:	4602      	mov	r2, r0
 8008192:	69fb      	ldr	r3, [r7, #28]
 8008194:	4413      	add	r3, r2
 8008196:	61fb      	str	r3, [r7, #28]
 8008198:	69fb      	ldr	r3, [r7, #28]
 800819a:	4a74      	ldr	r2, [pc, #464]	@ (800836c <USBH_HandleEnum+0x600>)
 800819c:	4413      	add	r3, r2
 800819e:	497a      	ldr	r1, [pc, #488]	@ (8008388 <USBH_HandleEnum+0x61c>)
 80081a0:	4618      	mov	r0, r3
 80081a2:	f001 ffed 	bl	800a180 <siprintf>
 80081a6:	4602      	mov	r2, r0
 80081a8:	69fb      	ldr	r3, [r7, #28]
 80081aa:	4413      	add	r3, r2
 80081ac:	61fb      	str	r3, [r7, #28]
 80081ae:	69fb      	ldr	r3, [r7, #28]
 80081b0:	4a6e      	ldr	r2, [pc, #440]	@ (800836c <USBH_HandleEnum+0x600>)
 80081b2:	4413      	add	r3, r2
 80081b4:	4970      	ldr	r1, [pc, #448]	@ (8008378 <USBH_HandleEnum+0x60c>)
 80081b6:	4618      	mov	r0, r3
 80081b8:	f001 ffe2 	bl	800a180 <siprintf>
 80081bc:	4602      	mov	r2, r0
 80081be:	69fb      	ldr	r3, [r7, #28]
 80081c0:	4413      	add	r3, r2
 80081c2:	61fb      	str	r3, [r7, #28]
 80081c4:	69fb      	ldr	r3, [r7, #28]
 80081c6:	b29a      	uxth	r2, r3
 80081c8:	2364      	movs	r3, #100	@ 0x64
 80081ca:	4968      	ldr	r1, [pc, #416]	@ (800836c <USBH_HandleEnum+0x600>)
 80081cc:	486b      	ldr	r0, [pc, #428]	@ (800837c <USBH_HandleEnum+0x610>)
 80081ce:	f7fc f9bf 	bl	8004550 <HAL_UART_Transmit>
        phost->gState = HOST_ABORT_STATE;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	220d      	movs	r2, #13
 80081d6:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	2200      	movs	r2, #0
 80081dc:	705a      	strb	r2, [r3, #1]
      break;
 80081de:	e2f8      	b.n	80087d2 <USBH_HandleEnum+0xa66>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80081e0:	2109      	movs	r1, #9
 80081e2:	6878      	ldr	r0, [r7, #4]
 80081e4:	f000 fbdc 	bl	80089a0 <USBH_Get_CfgDesc>
 80081e8:	4603      	mov	r3, r0
 80081ea:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
      if (ReqStatus == USBH_OK)
 80081ee:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d103      	bne.n	80081fe <USBH_HandleEnum+0x492>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	2204      	movs	r2, #4
 80081fa:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80081fc:	e2eb      	b.n	80087d6 <USBH_HandleEnum+0xa6a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80081fe:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8008202:	2b03      	cmp	r3, #3
 8008204:	f040 82e7 	bne.w	80087d6 <USBH_HandleEnum+0xa6a>
        USBH_ErrLog("Control error: Get Device configuration descriptor request failed");
 8008208:	485d      	ldr	r0, [pc, #372]	@ (8008380 <USBH_HandleEnum+0x614>)
 800820a:	f001 ff9f 	bl	800a14c <iprintf>
 800820e:	485f      	ldr	r0, [pc, #380]	@ (800838c <USBH_HandleEnum+0x620>)
 8008210:	f001 ff9c 	bl	800a14c <iprintf>
 8008214:	200a      	movs	r0, #10
 8008216:	f001 ffab 	bl	800a170 <putchar>
        phost->device.EnumCnt++;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008220:	3301      	adds	r3, #1
 8008222:	b2da      	uxtb	r2, r3
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008230:	2b03      	cmp	r3, #3
 8008232:	d92d      	bls.n	8008290 <USBH_HandleEnum+0x524>
          USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 8008234:	2300      	movs	r3, #0
 8008236:	623b      	str	r3, [r7, #32]
 8008238:	6a3b      	ldr	r3, [r7, #32]
 800823a:	4a4c      	ldr	r2, [pc, #304]	@ (800836c <USBH_HandleEnum+0x600>)
 800823c:	4413      	add	r3, r2
 800823e:	494c      	ldr	r1, [pc, #304]	@ (8008370 <USBH_HandleEnum+0x604>)
 8008240:	4618      	mov	r0, r3
 8008242:	f001 ff9d 	bl	800a180 <siprintf>
 8008246:	4602      	mov	r2, r0
 8008248:	6a3b      	ldr	r3, [r7, #32]
 800824a:	4413      	add	r3, r2
 800824c:	623b      	str	r3, [r7, #32]
 800824e:	6a3b      	ldr	r3, [r7, #32]
 8008250:	4a46      	ldr	r2, [pc, #280]	@ (800836c <USBH_HandleEnum+0x600>)
 8008252:	4413      	add	r3, r2
 8008254:	494c      	ldr	r1, [pc, #304]	@ (8008388 <USBH_HandleEnum+0x61c>)
 8008256:	4618      	mov	r0, r3
 8008258:	f001 ff92 	bl	800a180 <siprintf>
 800825c:	4602      	mov	r2, r0
 800825e:	6a3b      	ldr	r3, [r7, #32]
 8008260:	4413      	add	r3, r2
 8008262:	623b      	str	r3, [r7, #32]
 8008264:	6a3b      	ldr	r3, [r7, #32]
 8008266:	4a41      	ldr	r2, [pc, #260]	@ (800836c <USBH_HandleEnum+0x600>)
 8008268:	4413      	add	r3, r2
 800826a:	4943      	ldr	r1, [pc, #268]	@ (8008378 <USBH_HandleEnum+0x60c>)
 800826c:	4618      	mov	r0, r3
 800826e:	f001 ff87 	bl	800a180 <siprintf>
 8008272:	4602      	mov	r2, r0
 8008274:	6a3b      	ldr	r3, [r7, #32]
 8008276:	4413      	add	r3, r2
 8008278:	623b      	str	r3, [r7, #32]
 800827a:	6a3b      	ldr	r3, [r7, #32]
 800827c:	b29a      	uxth	r2, r3
 800827e:	2364      	movs	r3, #100	@ 0x64
 8008280:	493a      	ldr	r1, [pc, #232]	@ (800836c <USBH_HandleEnum+0x600>)
 8008282:	483e      	ldr	r0, [pc, #248]	@ (800837c <USBH_HandleEnum+0x610>)
 8008284:	f7fc f964 	bl	8004550 <HAL_UART_Transmit>
          phost->gState = HOST_ABORT_STATE;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	220d      	movs	r2, #13
 800828c:	701a      	strb	r2, [r3, #0]
      break;
 800828e:	e2a2      	b.n	80087d6 <USBH_HandleEnum+0xa6a>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	795b      	ldrb	r3, [r3, #5]
 8008294:	4619      	mov	r1, r3
 8008296:	6878      	ldr	r0, [r7, #4]
 8008298:	f001 fa5c 	bl	8009754 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	791b      	ldrb	r3, [r3, #4]
 80082a0:	4619      	mov	r1, r3
 80082a2:	6878      	ldr	r0, [r7, #4]
 80082a4:	f001 fa56 	bl	8009754 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	2200      	movs	r2, #0
 80082ac:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	2200      	movs	r2, #0
 80082b2:	701a      	strb	r2, [r3, #0]
      break;
 80082b4:	e28f      	b.n	80087d6 <USBH_HandleEnum+0xa6a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 80082bc:	4619      	mov	r1, r3
 80082be:	6878      	ldr	r0, [r7, #4]
 80082c0:	f000 fb6e 	bl	80089a0 <USBH_Get_CfgDesc>
 80082c4:	4603      	mov	r3, r0
 80082c6:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
      if (ReqStatus == USBH_OK)
 80082ca:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d103      	bne.n	80082da <USBH_HandleEnum+0x56e>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	2205      	movs	r2, #5
 80082d6:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80082d8:	e27f      	b.n	80087da <USBH_HandleEnum+0xa6e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80082da:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 80082de:	2b03      	cmp	r3, #3
 80082e0:	f040 827b 	bne.w	80087da <USBH_HandleEnum+0xa6e>
        USBH_ErrLog("Control error: Get Device configuration descriptor request failed");
 80082e4:	4826      	ldr	r0, [pc, #152]	@ (8008380 <USBH_HandleEnum+0x614>)
 80082e6:	f001 ff31 	bl	800a14c <iprintf>
 80082ea:	4828      	ldr	r0, [pc, #160]	@ (800838c <USBH_HandleEnum+0x620>)
 80082ec:	f001 ff2e 	bl	800a14c <iprintf>
 80082f0:	200a      	movs	r0, #10
 80082f2:	f001 ff3d 	bl	800a170 <putchar>
        phost->device.EnumCnt++;
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80082fc:	3301      	adds	r3, #1
 80082fe:	b2da      	uxtb	r2, r3
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800830c:	2b03      	cmp	r3, #3
 800830e:	d93f      	bls.n	8008390 <USBH_HandleEnum+0x624>
          USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 8008310:	2300      	movs	r3, #0
 8008312:	627b      	str	r3, [r7, #36]	@ 0x24
 8008314:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008316:	4a15      	ldr	r2, [pc, #84]	@ (800836c <USBH_HandleEnum+0x600>)
 8008318:	4413      	add	r3, r2
 800831a:	4915      	ldr	r1, [pc, #84]	@ (8008370 <USBH_HandleEnum+0x604>)
 800831c:	4618      	mov	r0, r3
 800831e:	f001 ff2f 	bl	800a180 <siprintf>
 8008322:	4602      	mov	r2, r0
 8008324:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008326:	4413      	add	r3, r2
 8008328:	627b      	str	r3, [r7, #36]	@ 0x24
 800832a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800832c:	4a0f      	ldr	r2, [pc, #60]	@ (800836c <USBH_HandleEnum+0x600>)
 800832e:	4413      	add	r3, r2
 8008330:	4915      	ldr	r1, [pc, #84]	@ (8008388 <USBH_HandleEnum+0x61c>)
 8008332:	4618      	mov	r0, r3
 8008334:	f001 ff24 	bl	800a180 <siprintf>
 8008338:	4602      	mov	r2, r0
 800833a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800833c:	4413      	add	r3, r2
 800833e:	627b      	str	r3, [r7, #36]	@ 0x24
 8008340:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008342:	4a0a      	ldr	r2, [pc, #40]	@ (800836c <USBH_HandleEnum+0x600>)
 8008344:	4413      	add	r3, r2
 8008346:	490c      	ldr	r1, [pc, #48]	@ (8008378 <USBH_HandleEnum+0x60c>)
 8008348:	4618      	mov	r0, r3
 800834a:	f001 ff19 	bl	800a180 <siprintf>
 800834e:	4602      	mov	r2, r0
 8008350:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008352:	4413      	add	r3, r2
 8008354:	627b      	str	r3, [r7, #36]	@ 0x24
 8008356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008358:	b29a      	uxth	r2, r3
 800835a:	2364      	movs	r3, #100	@ 0x64
 800835c:	4903      	ldr	r1, [pc, #12]	@ (800836c <USBH_HandleEnum+0x600>)
 800835e:	4807      	ldr	r0, [pc, #28]	@ (800837c <USBH_HandleEnum+0x610>)
 8008360:	f7fc f8f6 	bl	8004550 <HAL_UART_Transmit>
          phost->gState = HOST_ABORT_STATE;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	220d      	movs	r2, #13
 8008368:	701a      	strb	r2, [r3, #0]
      break;
 800836a:	e236      	b.n	80087da <USBH_HandleEnum+0xa6e>
 800836c:	2000012c 	.word	0x2000012c
 8008370:	0800b3a0 	.word	0x0800b3a0
 8008374:	0800b6fc 	.word	0x0800b6fc
 8008378:	0800b3c8 	.word	0x0800b3c8
 800837c:	200000a4 	.word	0x200000a4
 8008380:	0800b350 	.word	0x0800b350
 8008384:	0800b714 	.word	0x0800b714
 8008388:	0800b668 	.word	0x0800b668
 800838c:	0800b748 	.word	0x0800b748
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	795b      	ldrb	r3, [r3, #5]
 8008394:	4619      	mov	r1, r3
 8008396:	6878      	ldr	r0, [r7, #4]
 8008398:	f001 f9dc 	bl	8009754 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	791b      	ldrb	r3, [r3, #4]
 80083a0:	4619      	mov	r1, r3
 80083a2:	6878      	ldr	r0, [r7, #4]
 80083a4:	f001 f9d6 	bl	8009754 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	2200      	movs	r2, #0
 80083ac:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	2200      	movs	r2, #0
 80083b2:	701a      	strb	r2, [r3, #0]
      break;
 80083b4:	e211      	b.n	80087da <USBH_HandleEnum+0xa6e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d074      	beq.n	80084aa <USBH_HandleEnum+0x73e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80083cc:	23ff      	movs	r3, #255	@ 0xff
 80083ce:	6878      	ldr	r0, [r7, #4]
 80083d0:	f000 fb1e 	bl	8008a10 <USBH_Get_StringDesc>
 80083d4:	4603      	mov	r3, r0
 80083d6:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
        if (ReqStatus == USBH_OK)
 80083da:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d130      	bne.n	8008444 <USBH_HandleEnum+0x6d8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
 80083e2:	2300      	movs	r3, #0
 80083e4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80083e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083e8:	4a9b      	ldr	r2, [pc, #620]	@ (8008658 <USBH_HandleEnum+0x8ec>)
 80083ea:	4413      	add	r3, r2
 80083ec:	499b      	ldr	r1, [pc, #620]	@ (800865c <USBH_HandleEnum+0x8f0>)
 80083ee:	4618      	mov	r0, r3
 80083f0:	f001 fec6 	bl	800a180 <siprintf>
 80083f4:	4602      	mov	r2, r0
 80083f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083f8:	4413      	add	r3, r2
 80083fa:	62bb      	str	r3, [r7, #40]	@ 0x28
 80083fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083fe:	4a96      	ldr	r2, [pc, #600]	@ (8008658 <USBH_HandleEnum+0x8ec>)
 8008400:	1898      	adds	r0, r3, r2
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8008408:	461a      	mov	r2, r3
 800840a:	4995      	ldr	r1, [pc, #596]	@ (8008660 <USBH_HandleEnum+0x8f4>)
 800840c:	f001 feb8 	bl	800a180 <siprintf>
 8008410:	4602      	mov	r2, r0
 8008412:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008414:	4413      	add	r3, r2
 8008416:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008418:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800841a:	4a8f      	ldr	r2, [pc, #572]	@ (8008658 <USBH_HandleEnum+0x8ec>)
 800841c:	4413      	add	r3, r2
 800841e:	4991      	ldr	r1, [pc, #580]	@ (8008664 <USBH_HandleEnum+0x8f8>)
 8008420:	4618      	mov	r0, r3
 8008422:	f001 fead 	bl	800a180 <siprintf>
 8008426:	4602      	mov	r2, r0
 8008428:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800842a:	4413      	add	r3, r2
 800842c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800842e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008430:	b29a      	uxth	r2, r3
 8008432:	2364      	movs	r3, #100	@ 0x64
 8008434:	4988      	ldr	r1, [pc, #544]	@ (8008658 <USBH_HandleEnum+0x8ec>)
 8008436:	488c      	ldr	r0, [pc, #560]	@ (8008668 <USBH_HandleEnum+0x8fc>)
 8008438:	f7fc f88a 	bl	8004550 <HAL_UART_Transmit>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	2206      	movs	r2, #6
 8008440:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008442:	e1cc      	b.n	80087de <USBH_HandleEnum+0xa72>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008444:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8008448:	2b03      	cmp	r3, #3
 800844a:	f040 81c8 	bne.w	80087de <USBH_HandleEnum+0xa72>
          USBH_UsrLog("Manufacturer : N/A");
 800844e:	2300      	movs	r3, #0
 8008450:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008452:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008454:	4a80      	ldr	r2, [pc, #512]	@ (8008658 <USBH_HandleEnum+0x8ec>)
 8008456:	4413      	add	r3, r2
 8008458:	4980      	ldr	r1, [pc, #512]	@ (800865c <USBH_HandleEnum+0x8f0>)
 800845a:	4618      	mov	r0, r3
 800845c:	f001 fe90 	bl	800a180 <siprintf>
 8008460:	4602      	mov	r2, r0
 8008462:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008464:	4413      	add	r3, r2
 8008466:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008468:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800846a:	4a7b      	ldr	r2, [pc, #492]	@ (8008658 <USBH_HandleEnum+0x8ec>)
 800846c:	4413      	add	r3, r2
 800846e:	497f      	ldr	r1, [pc, #508]	@ (800866c <USBH_HandleEnum+0x900>)
 8008470:	4618      	mov	r0, r3
 8008472:	f001 fe85 	bl	800a180 <siprintf>
 8008476:	4602      	mov	r2, r0
 8008478:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800847a:	4413      	add	r3, r2
 800847c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800847e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008480:	4a75      	ldr	r2, [pc, #468]	@ (8008658 <USBH_HandleEnum+0x8ec>)
 8008482:	4413      	add	r3, r2
 8008484:	4977      	ldr	r1, [pc, #476]	@ (8008664 <USBH_HandleEnum+0x8f8>)
 8008486:	4618      	mov	r0, r3
 8008488:	f001 fe7a 	bl	800a180 <siprintf>
 800848c:	4602      	mov	r2, r0
 800848e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008490:	4413      	add	r3, r2
 8008492:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008494:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008496:	b29a      	uxth	r2, r3
 8008498:	2364      	movs	r3, #100	@ 0x64
 800849a:	496f      	ldr	r1, [pc, #444]	@ (8008658 <USBH_HandleEnum+0x8ec>)
 800849c:	4872      	ldr	r0, [pc, #456]	@ (8008668 <USBH_HandleEnum+0x8fc>)
 800849e:	f7fc f857 	bl	8004550 <HAL_UART_Transmit>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	2206      	movs	r2, #6
 80084a6:	705a      	strb	r2, [r3, #1]
      break;
 80084a8:	e199      	b.n	80087de <USBH_HandleEnum+0xa72>
        USBH_UsrLog("Manufacturer : N/A");
 80084aa:	2300      	movs	r3, #0
 80084ac:	633b      	str	r3, [r7, #48]	@ 0x30
 80084ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084b0:	4a69      	ldr	r2, [pc, #420]	@ (8008658 <USBH_HandleEnum+0x8ec>)
 80084b2:	4413      	add	r3, r2
 80084b4:	4969      	ldr	r1, [pc, #420]	@ (800865c <USBH_HandleEnum+0x8f0>)
 80084b6:	4618      	mov	r0, r3
 80084b8:	f001 fe62 	bl	800a180 <siprintf>
 80084bc:	4602      	mov	r2, r0
 80084be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084c0:	4413      	add	r3, r2
 80084c2:	633b      	str	r3, [r7, #48]	@ 0x30
 80084c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084c6:	4a64      	ldr	r2, [pc, #400]	@ (8008658 <USBH_HandleEnum+0x8ec>)
 80084c8:	4413      	add	r3, r2
 80084ca:	4968      	ldr	r1, [pc, #416]	@ (800866c <USBH_HandleEnum+0x900>)
 80084cc:	4618      	mov	r0, r3
 80084ce:	f001 fe57 	bl	800a180 <siprintf>
 80084d2:	4602      	mov	r2, r0
 80084d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084d6:	4413      	add	r3, r2
 80084d8:	633b      	str	r3, [r7, #48]	@ 0x30
 80084da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084dc:	4a5e      	ldr	r2, [pc, #376]	@ (8008658 <USBH_HandleEnum+0x8ec>)
 80084de:	4413      	add	r3, r2
 80084e0:	4960      	ldr	r1, [pc, #384]	@ (8008664 <USBH_HandleEnum+0x8f8>)
 80084e2:	4618      	mov	r0, r3
 80084e4:	f001 fe4c 	bl	800a180 <siprintf>
 80084e8:	4602      	mov	r2, r0
 80084ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084ec:	4413      	add	r3, r2
 80084ee:	633b      	str	r3, [r7, #48]	@ 0x30
 80084f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084f2:	b29a      	uxth	r2, r3
 80084f4:	2364      	movs	r3, #100	@ 0x64
 80084f6:	4958      	ldr	r1, [pc, #352]	@ (8008658 <USBH_HandleEnum+0x8ec>)
 80084f8:	485b      	ldr	r0, [pc, #364]	@ (8008668 <USBH_HandleEnum+0x8fc>)
 80084fa:	f7fc f829 	bl	8004550 <HAL_UART_Transmit>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	2206      	movs	r2, #6
 8008502:	705a      	strb	r2, [r3, #1]
      break;
 8008504:	e16b      	b.n	80087de <USBH_HandleEnum+0xa72>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 800850c:	2b00      	cmp	r3, #0
 800850e:	d074      	beq.n	80085fa <USBH_HandleEnum+0x88e>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800851c:	23ff      	movs	r3, #255	@ 0xff
 800851e:	6878      	ldr	r0, [r7, #4]
 8008520:	f000 fa76 	bl	8008a10 <USBH_Get_StringDesc>
 8008524:	4603      	mov	r3, r0
 8008526:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
        if (ReqStatus == USBH_OK)
 800852a:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 800852e:	2b00      	cmp	r3, #0
 8008530:	d130      	bne.n	8008594 <USBH_HandleEnum+0x828>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
 8008532:	2300      	movs	r3, #0
 8008534:	637b      	str	r3, [r7, #52]	@ 0x34
 8008536:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008538:	4a47      	ldr	r2, [pc, #284]	@ (8008658 <USBH_HandleEnum+0x8ec>)
 800853a:	4413      	add	r3, r2
 800853c:	4947      	ldr	r1, [pc, #284]	@ (800865c <USBH_HandleEnum+0x8f0>)
 800853e:	4618      	mov	r0, r3
 8008540:	f001 fe1e 	bl	800a180 <siprintf>
 8008544:	4602      	mov	r2, r0
 8008546:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008548:	4413      	add	r3, r2
 800854a:	637b      	str	r3, [r7, #52]	@ 0x34
 800854c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800854e:	4a42      	ldr	r2, [pc, #264]	@ (8008658 <USBH_HandleEnum+0x8ec>)
 8008550:	1898      	adds	r0, r3, r2
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8008558:	461a      	mov	r2, r3
 800855a:	4945      	ldr	r1, [pc, #276]	@ (8008670 <USBH_HandleEnum+0x904>)
 800855c:	f001 fe10 	bl	800a180 <siprintf>
 8008560:	4602      	mov	r2, r0
 8008562:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008564:	4413      	add	r3, r2
 8008566:	637b      	str	r3, [r7, #52]	@ 0x34
 8008568:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800856a:	4a3b      	ldr	r2, [pc, #236]	@ (8008658 <USBH_HandleEnum+0x8ec>)
 800856c:	4413      	add	r3, r2
 800856e:	493d      	ldr	r1, [pc, #244]	@ (8008664 <USBH_HandleEnum+0x8f8>)
 8008570:	4618      	mov	r0, r3
 8008572:	f001 fe05 	bl	800a180 <siprintf>
 8008576:	4602      	mov	r2, r0
 8008578:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800857a:	4413      	add	r3, r2
 800857c:	637b      	str	r3, [r7, #52]	@ 0x34
 800857e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008580:	b29a      	uxth	r2, r3
 8008582:	2364      	movs	r3, #100	@ 0x64
 8008584:	4934      	ldr	r1, [pc, #208]	@ (8008658 <USBH_HandleEnum+0x8ec>)
 8008586:	4838      	ldr	r0, [pc, #224]	@ (8008668 <USBH_HandleEnum+0x8fc>)
 8008588:	f7fb ffe2 	bl	8004550 <HAL_UART_Transmit>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	2207      	movs	r2, #7
 8008590:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008592:	e126      	b.n	80087e2 <USBH_HandleEnum+0xa76>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008594:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8008598:	2b03      	cmp	r3, #3
 800859a:	f040 8122 	bne.w	80087e2 <USBH_HandleEnum+0xa76>
          USBH_UsrLog("Product : N/A");
 800859e:	2300      	movs	r3, #0
 80085a0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80085a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085a4:	4a2c      	ldr	r2, [pc, #176]	@ (8008658 <USBH_HandleEnum+0x8ec>)
 80085a6:	4413      	add	r3, r2
 80085a8:	492c      	ldr	r1, [pc, #176]	@ (800865c <USBH_HandleEnum+0x8f0>)
 80085aa:	4618      	mov	r0, r3
 80085ac:	f001 fde8 	bl	800a180 <siprintf>
 80085b0:	4602      	mov	r2, r0
 80085b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085b4:	4413      	add	r3, r2
 80085b6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80085b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085ba:	4a27      	ldr	r2, [pc, #156]	@ (8008658 <USBH_HandleEnum+0x8ec>)
 80085bc:	4413      	add	r3, r2
 80085be:	492d      	ldr	r1, [pc, #180]	@ (8008674 <USBH_HandleEnum+0x908>)
 80085c0:	4618      	mov	r0, r3
 80085c2:	f001 fddd 	bl	800a180 <siprintf>
 80085c6:	4602      	mov	r2, r0
 80085c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085ca:	4413      	add	r3, r2
 80085cc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80085ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085d0:	4a21      	ldr	r2, [pc, #132]	@ (8008658 <USBH_HandleEnum+0x8ec>)
 80085d2:	4413      	add	r3, r2
 80085d4:	4923      	ldr	r1, [pc, #140]	@ (8008664 <USBH_HandleEnum+0x8f8>)
 80085d6:	4618      	mov	r0, r3
 80085d8:	f001 fdd2 	bl	800a180 <siprintf>
 80085dc:	4602      	mov	r2, r0
 80085de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085e0:	4413      	add	r3, r2
 80085e2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80085e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085e6:	b29a      	uxth	r2, r3
 80085e8:	2364      	movs	r3, #100	@ 0x64
 80085ea:	491b      	ldr	r1, [pc, #108]	@ (8008658 <USBH_HandleEnum+0x8ec>)
 80085ec:	481e      	ldr	r0, [pc, #120]	@ (8008668 <USBH_HandleEnum+0x8fc>)
 80085ee:	f7fb ffaf 	bl	8004550 <HAL_UART_Transmit>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	2207      	movs	r2, #7
 80085f6:	705a      	strb	r2, [r3, #1]
      break;
 80085f8:	e0f3      	b.n	80087e2 <USBH_HandleEnum+0xa76>
        USBH_UsrLog("Product : N/A");
 80085fa:	2300      	movs	r3, #0
 80085fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80085fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008600:	4a15      	ldr	r2, [pc, #84]	@ (8008658 <USBH_HandleEnum+0x8ec>)
 8008602:	4413      	add	r3, r2
 8008604:	4915      	ldr	r1, [pc, #84]	@ (800865c <USBH_HandleEnum+0x8f0>)
 8008606:	4618      	mov	r0, r3
 8008608:	f001 fdba 	bl	800a180 <siprintf>
 800860c:	4602      	mov	r2, r0
 800860e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008610:	4413      	add	r3, r2
 8008612:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008614:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008616:	4a10      	ldr	r2, [pc, #64]	@ (8008658 <USBH_HandleEnum+0x8ec>)
 8008618:	4413      	add	r3, r2
 800861a:	4916      	ldr	r1, [pc, #88]	@ (8008674 <USBH_HandleEnum+0x908>)
 800861c:	4618      	mov	r0, r3
 800861e:	f001 fdaf 	bl	800a180 <siprintf>
 8008622:	4602      	mov	r2, r0
 8008624:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008626:	4413      	add	r3, r2
 8008628:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800862a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800862c:	4a0a      	ldr	r2, [pc, #40]	@ (8008658 <USBH_HandleEnum+0x8ec>)
 800862e:	4413      	add	r3, r2
 8008630:	490c      	ldr	r1, [pc, #48]	@ (8008664 <USBH_HandleEnum+0x8f8>)
 8008632:	4618      	mov	r0, r3
 8008634:	f001 fda4 	bl	800a180 <siprintf>
 8008638:	4602      	mov	r2, r0
 800863a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800863c:	4413      	add	r3, r2
 800863e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008640:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008642:	b29a      	uxth	r2, r3
 8008644:	2364      	movs	r3, #100	@ 0x64
 8008646:	4904      	ldr	r1, [pc, #16]	@ (8008658 <USBH_HandleEnum+0x8ec>)
 8008648:	4807      	ldr	r0, [pc, #28]	@ (8008668 <USBH_HandleEnum+0x8fc>)
 800864a:	f7fb ff81 	bl	8004550 <HAL_UART_Transmit>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	2207      	movs	r2, #7
 8008652:	705a      	strb	r2, [r3, #1]
      break;
 8008654:	e0c5      	b.n	80087e2 <USBH_HandleEnum+0xa76>
 8008656:	bf00      	nop
 8008658:	2000012c 	.word	0x2000012c
 800865c:	0800b3a0 	.word	0x0800b3a0
 8008660:	0800b78c 	.word	0x0800b78c
 8008664:	0800b3c8 	.word	0x0800b3c8
 8008668:	200000a4 	.word	0x200000a4
 800866c:	0800b7a0 	.word	0x0800b7a0
 8008670:	0800b7b4 	.word	0x0800b7b4
 8008674:	0800b7c4 	.word	0x0800b7c4

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 800867e:	2b00      	cmp	r3, #0
 8008680:	d073      	beq.n	800876a <USBH_HandleEnum+0x9fe>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800868e:	23ff      	movs	r3, #255	@ 0xff
 8008690:	6878      	ldr	r0, [r7, #4]
 8008692:	f000 f9bd 	bl	8008a10 <USBH_Get_StringDesc>
 8008696:	4603      	mov	r3, r0
 8008698:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
        if (ReqStatus == USBH_OK)
 800869c:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d130      	bne.n	8008706 <USBH_HandleEnum+0x99a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
 80086a4:	2300      	movs	r3, #0
 80086a6:	643b      	str	r3, [r7, #64]	@ 0x40
 80086a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80086aa:	4a52      	ldr	r2, [pc, #328]	@ (80087f4 <USBH_HandleEnum+0xa88>)
 80086ac:	4413      	add	r3, r2
 80086ae:	4952      	ldr	r1, [pc, #328]	@ (80087f8 <USBH_HandleEnum+0xa8c>)
 80086b0:	4618      	mov	r0, r3
 80086b2:	f001 fd65 	bl	800a180 <siprintf>
 80086b6:	4602      	mov	r2, r0
 80086b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80086ba:	4413      	add	r3, r2
 80086bc:	643b      	str	r3, [r7, #64]	@ 0x40
 80086be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80086c0:	4a4c      	ldr	r2, [pc, #304]	@ (80087f4 <USBH_HandleEnum+0xa88>)
 80086c2:	1898      	adds	r0, r3, r2
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80086ca:	461a      	mov	r2, r3
 80086cc:	494b      	ldr	r1, [pc, #300]	@ (80087fc <USBH_HandleEnum+0xa90>)
 80086ce:	f001 fd57 	bl	800a180 <siprintf>
 80086d2:	4602      	mov	r2, r0
 80086d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80086d6:	4413      	add	r3, r2
 80086d8:	643b      	str	r3, [r7, #64]	@ 0x40
 80086da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80086dc:	4a45      	ldr	r2, [pc, #276]	@ (80087f4 <USBH_HandleEnum+0xa88>)
 80086de:	4413      	add	r3, r2
 80086e0:	4947      	ldr	r1, [pc, #284]	@ (8008800 <USBH_HandleEnum+0xa94>)
 80086e2:	4618      	mov	r0, r3
 80086e4:	f001 fd4c 	bl	800a180 <siprintf>
 80086e8:	4602      	mov	r2, r0
 80086ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80086ec:	4413      	add	r3, r2
 80086ee:	643b      	str	r3, [r7, #64]	@ 0x40
 80086f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80086f2:	b29a      	uxth	r2, r3
 80086f4:	2364      	movs	r3, #100	@ 0x64
 80086f6:	493f      	ldr	r1, [pc, #252]	@ (80087f4 <USBH_HandleEnum+0xa88>)
 80086f8:	4842      	ldr	r0, [pc, #264]	@ (8008804 <USBH_HandleEnum+0xa98>)
 80086fa:	f7fb ff29 	bl	8004550 <HAL_UART_Transmit>
          Status = USBH_OK;
 80086fe:	2300      	movs	r3, #0
 8008700:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8008704:	e06f      	b.n	80087e6 <USBH_HandleEnum+0xa7a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008706:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 800870a:	2b03      	cmp	r3, #3
 800870c:	d16b      	bne.n	80087e6 <USBH_HandleEnum+0xa7a>
          USBH_UsrLog("Serial Number : N/A");
 800870e:	2300      	movs	r3, #0
 8008710:	647b      	str	r3, [r7, #68]	@ 0x44
 8008712:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008714:	4a37      	ldr	r2, [pc, #220]	@ (80087f4 <USBH_HandleEnum+0xa88>)
 8008716:	4413      	add	r3, r2
 8008718:	4937      	ldr	r1, [pc, #220]	@ (80087f8 <USBH_HandleEnum+0xa8c>)
 800871a:	4618      	mov	r0, r3
 800871c:	f001 fd30 	bl	800a180 <siprintf>
 8008720:	4602      	mov	r2, r0
 8008722:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008724:	4413      	add	r3, r2
 8008726:	647b      	str	r3, [r7, #68]	@ 0x44
 8008728:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800872a:	4a32      	ldr	r2, [pc, #200]	@ (80087f4 <USBH_HandleEnum+0xa88>)
 800872c:	4413      	add	r3, r2
 800872e:	4936      	ldr	r1, [pc, #216]	@ (8008808 <USBH_HandleEnum+0xa9c>)
 8008730:	4618      	mov	r0, r3
 8008732:	f001 fd25 	bl	800a180 <siprintf>
 8008736:	4602      	mov	r2, r0
 8008738:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800873a:	4413      	add	r3, r2
 800873c:	647b      	str	r3, [r7, #68]	@ 0x44
 800873e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008740:	4a2c      	ldr	r2, [pc, #176]	@ (80087f4 <USBH_HandleEnum+0xa88>)
 8008742:	4413      	add	r3, r2
 8008744:	492e      	ldr	r1, [pc, #184]	@ (8008800 <USBH_HandleEnum+0xa94>)
 8008746:	4618      	mov	r0, r3
 8008748:	f001 fd1a 	bl	800a180 <siprintf>
 800874c:	4602      	mov	r2, r0
 800874e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008750:	4413      	add	r3, r2
 8008752:	647b      	str	r3, [r7, #68]	@ 0x44
 8008754:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008756:	b29a      	uxth	r2, r3
 8008758:	2364      	movs	r3, #100	@ 0x64
 800875a:	4926      	ldr	r1, [pc, #152]	@ (80087f4 <USBH_HandleEnum+0xa88>)
 800875c:	4829      	ldr	r0, [pc, #164]	@ (8008804 <USBH_HandleEnum+0xa98>)
 800875e:	f7fb fef7 	bl	8004550 <HAL_UART_Transmit>
          Status = USBH_OK;
 8008762:	2300      	movs	r3, #0
 8008764:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
      break;
 8008768:	e03d      	b.n	80087e6 <USBH_HandleEnum+0xa7a>
        USBH_UsrLog("Serial Number : N/A");
 800876a:	2300      	movs	r3, #0
 800876c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800876e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008770:	4a20      	ldr	r2, [pc, #128]	@ (80087f4 <USBH_HandleEnum+0xa88>)
 8008772:	4413      	add	r3, r2
 8008774:	4920      	ldr	r1, [pc, #128]	@ (80087f8 <USBH_HandleEnum+0xa8c>)
 8008776:	4618      	mov	r0, r3
 8008778:	f001 fd02 	bl	800a180 <siprintf>
 800877c:	4602      	mov	r2, r0
 800877e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008780:	4413      	add	r3, r2
 8008782:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008784:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008786:	4a1b      	ldr	r2, [pc, #108]	@ (80087f4 <USBH_HandleEnum+0xa88>)
 8008788:	4413      	add	r3, r2
 800878a:	491f      	ldr	r1, [pc, #124]	@ (8008808 <USBH_HandleEnum+0xa9c>)
 800878c:	4618      	mov	r0, r3
 800878e:	f001 fcf7 	bl	800a180 <siprintf>
 8008792:	4602      	mov	r2, r0
 8008794:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008796:	4413      	add	r3, r2
 8008798:	64bb      	str	r3, [r7, #72]	@ 0x48
 800879a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800879c:	4a15      	ldr	r2, [pc, #84]	@ (80087f4 <USBH_HandleEnum+0xa88>)
 800879e:	4413      	add	r3, r2
 80087a0:	4917      	ldr	r1, [pc, #92]	@ (8008800 <USBH_HandleEnum+0xa94>)
 80087a2:	4618      	mov	r0, r3
 80087a4:	f001 fcec 	bl	800a180 <siprintf>
 80087a8:	4602      	mov	r2, r0
 80087aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80087ac:	4413      	add	r3, r2
 80087ae:	64bb      	str	r3, [r7, #72]	@ 0x48
 80087b0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80087b2:	b29a      	uxth	r2, r3
 80087b4:	2364      	movs	r3, #100	@ 0x64
 80087b6:	490f      	ldr	r1, [pc, #60]	@ (80087f4 <USBH_HandleEnum+0xa88>)
 80087b8:	4812      	ldr	r0, [pc, #72]	@ (8008804 <USBH_HandleEnum+0xa98>)
 80087ba:	f7fb fec9 	bl	8004550 <HAL_UART_Transmit>
        Status = USBH_OK;
 80087be:	2300      	movs	r3, #0
 80087c0:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
      break;
 80087c4:	e00f      	b.n	80087e6 <USBH_HandleEnum+0xa7a>

    default:
      break;
 80087c6:	bf00      	nop
 80087c8:	e00e      	b.n	80087e8 <USBH_HandleEnum+0xa7c>
      break;
 80087ca:	bf00      	nop
 80087cc:	e00c      	b.n	80087e8 <USBH_HandleEnum+0xa7c>
      break;
 80087ce:	bf00      	nop
 80087d0:	e00a      	b.n	80087e8 <USBH_HandleEnum+0xa7c>
      break;
 80087d2:	bf00      	nop
 80087d4:	e008      	b.n	80087e8 <USBH_HandleEnum+0xa7c>
      break;
 80087d6:	bf00      	nop
 80087d8:	e006      	b.n	80087e8 <USBH_HandleEnum+0xa7c>
      break;
 80087da:	bf00      	nop
 80087dc:	e004      	b.n	80087e8 <USBH_HandleEnum+0xa7c>
      break;
 80087de:	bf00      	nop
 80087e0:	e002      	b.n	80087e8 <USBH_HandleEnum+0xa7c>
      break;
 80087e2:	bf00      	nop
 80087e4:	e000      	b.n	80087e8 <USBH_HandleEnum+0xa7c>
      break;
 80087e6:	bf00      	nop
  }
  return Status;
 80087e8:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 80087ec:	4618      	mov	r0, r3
 80087ee:	3750      	adds	r7, #80	@ 0x50
 80087f0:	46bd      	mov	sp, r7
 80087f2:	bd80      	pop	{r7, pc}
 80087f4:	2000012c 	.word	0x2000012c
 80087f8:	0800b3a0 	.word	0x0800b3a0
 80087fc:	0800b7d4 	.word	0x0800b7d4
 8008800:	0800b3c8 	.word	0x0800b3c8
 8008804:	200000a4 	.word	0x200000a4
 8008808:	0800b7e8 	.word	0x0800b7e8

0800880c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800880c:	b480      	push	{r7}
 800880e:	b083      	sub	sp, #12
 8008810:	af00      	add	r7, sp, #0
 8008812:	6078      	str	r0, [r7, #4]
 8008814:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	683a      	ldr	r2, [r7, #0]
 800881a:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 800881e:	bf00      	nop
 8008820:	370c      	adds	r7, #12
 8008822:	46bd      	mov	sp, r7
 8008824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008828:	4770      	bx	lr

0800882a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800882a:	b580      	push	{r7, lr}
 800882c:	b082      	sub	sp, #8
 800882e:	af00      	add	r7, sp, #0
 8008830:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008838:	1c5a      	adds	r2, r3, #1
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 8008840:	6878      	ldr	r0, [r7, #4]
 8008842:	f000 f804 	bl	800884e <USBH_HandleSof>
}
 8008846:	bf00      	nop
 8008848:	3708      	adds	r7, #8
 800884a:	46bd      	mov	sp, r7
 800884c:	bd80      	pop	{r7, pc}

0800884e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800884e:	b580      	push	{r7, lr}
 8008850:	b082      	sub	sp, #8
 8008852:	af00      	add	r7, sp, #0
 8008854:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	781b      	ldrb	r3, [r3, #0]
 800885a:	b2db      	uxtb	r3, r3
 800885c:	2b0b      	cmp	r3, #11
 800885e:	d10a      	bne.n	8008876 <USBH_HandleSof+0x28>
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008866:	2b00      	cmp	r3, #0
 8008868:	d005      	beq.n	8008876 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008870:	699b      	ldr	r3, [r3, #24]
 8008872:	6878      	ldr	r0, [r7, #4]
 8008874:	4798      	blx	r3
  }
}
 8008876:	bf00      	nop
 8008878:	3708      	adds	r7, #8
 800887a:	46bd      	mov	sp, r7
 800887c:	bd80      	pop	{r7, pc}

0800887e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800887e:	b480      	push	{r7}
 8008880:	b083      	sub	sp, #12
 8008882:	af00      	add	r7, sp, #0
 8008884:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	2201      	movs	r2, #1
 800888a:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800888e:	bf00      	nop
}
 8008890:	370c      	adds	r7, #12
 8008892:	46bd      	mov	sp, r7
 8008894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008898:	4770      	bx	lr

0800889a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800889a:	b480      	push	{r7}
 800889c:	b083      	sub	sp, #12
 800889e:	af00      	add	r7, sp, #0
 80088a0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	2200      	movs	r2, #0
 80088a6:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 80088aa:	bf00      	nop
}
 80088ac:	370c      	adds	r7, #12
 80088ae:	46bd      	mov	sp, r7
 80088b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b4:	4770      	bx	lr

080088b6 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80088b6:	b480      	push	{r7}
 80088b8:	b083      	sub	sp, #12
 80088ba:	af00      	add	r7, sp, #0
 80088bc:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	2201      	movs	r2, #1
 80088c2:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	2200      	movs	r2, #0
 80088ca:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	2200      	movs	r2, #0
 80088d2:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80088d6:	2300      	movs	r3, #0
}
 80088d8:	4618      	mov	r0, r3
 80088da:	370c      	adds	r7, #12
 80088dc:	46bd      	mov	sp, r7
 80088de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e2:	4770      	bx	lr

080088e4 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80088e4:	b580      	push	{r7, lr}
 80088e6:	b082      	sub	sp, #8
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	2201      	movs	r2, #1
 80088f0:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	2200      	movs	r2, #0
 80088f8:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	2200      	movs	r2, #0
 8008900:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8008904:	6878      	ldr	r0, [r7, #4]
 8008906:	f001 f902 	bl	8009b0e <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	791b      	ldrb	r3, [r3, #4]
 800890e:	4619      	mov	r1, r3
 8008910:	6878      	ldr	r0, [r7, #4]
 8008912:	f000 ff1f 	bl	8009754 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	795b      	ldrb	r3, [r3, #5]
 800891a:	4619      	mov	r1, r3
 800891c:	6878      	ldr	r0, [r7, #4]
 800891e:	f000 ff19 	bl	8009754 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8008922:	2300      	movs	r3, #0
}
 8008924:	4618      	mov	r0, r3
 8008926:	3708      	adds	r7, #8
 8008928:	46bd      	mov	sp, r7
 800892a:	bd80      	pop	{r7, pc}

0800892c <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800892c:	b580      	push	{r7, lr}
 800892e:	b086      	sub	sp, #24
 8008930:	af02      	add	r7, sp, #8
 8008932:	6078      	str	r0, [r7, #4]
 8008934:	460b      	mov	r3, r1
 8008936:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 8008938:	887b      	ldrh	r3, [r7, #2]
 800893a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800893e:	d90a      	bls.n	8008956 <USBH_Get_DevDesc+0x2a>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
 8008940:	4815      	ldr	r0, [pc, #84]	@ (8008998 <USBH_Get_DevDesc+0x6c>)
 8008942:	f001 fc03 	bl	800a14c <iprintf>
 8008946:	4815      	ldr	r0, [pc, #84]	@ (800899c <USBH_Get_DevDesc+0x70>)
 8008948:	f001 fc00 	bl	800a14c <iprintf>
 800894c:	200a      	movs	r0, #10
 800894e:	f001 fc0f 	bl	800a170 <putchar>
    return USBH_NOT_SUPPORTED;
 8008952:	2303      	movs	r3, #3
 8008954:	e01b      	b.n	800898e <USBH_Get_DevDesc+0x62>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800895c:	887b      	ldrh	r3, [r7, #2]
 800895e:	9300      	str	r3, [sp, #0]
 8008960:	4613      	mov	r3, r2
 8008962:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008966:	2100      	movs	r1, #0
 8008968:	6878      	ldr	r0, [r7, #4]
 800896a:	f000 f893 	bl	8008a94 <USBH_GetDescriptor>
 800896e:	4603      	mov	r3, r0
 8008970:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 8008972:	7bfb      	ldrb	r3, [r7, #15]
 8008974:	2b00      	cmp	r3, #0
 8008976:	d109      	bne.n	800898c <USBH_Get_DevDesc+0x60>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800897e:	887a      	ldrh	r2, [r7, #2]
 8008980:	4619      	mov	r1, r3
 8008982:	6878      	ldr	r0, [r7, #4]
 8008984:	f000 f94a 	bl	8008c1c <USBH_ParseDevDesc>
 8008988:	4603      	mov	r3, r0
 800898a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800898c:	7bfb      	ldrb	r3, [r7, #15]
}
 800898e:	4618      	mov	r0, r3
 8008990:	3710      	adds	r7, #16
 8008992:	46bd      	mov	sp, r7
 8008994:	bd80      	pop	{r7, pc}
 8008996:	bf00      	nop
 8008998:	0800b7fc 	.word	0x0800b7fc
 800899c:	0800b804 	.word	0x0800b804

080089a0 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 80089a0:	b580      	push	{r7, lr}
 80089a2:	b086      	sub	sp, #24
 80089a4:	af02      	add	r7, sp, #8
 80089a6:	6078      	str	r0, [r7, #4]
 80089a8:	460b      	mov	r3, r1
 80089aa:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	331c      	adds	r3, #28
 80089b0:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 80089b2:	887b      	ldrh	r3, [r7, #2]
 80089b4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80089b8:	d90a      	bls.n	80089d0 <USBH_Get_CfgDesc+0x30>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
 80089ba:	4813      	ldr	r0, [pc, #76]	@ (8008a08 <USBH_Get_CfgDesc+0x68>)
 80089bc:	f001 fbc6 	bl	800a14c <iprintf>
 80089c0:	4812      	ldr	r0, [pc, #72]	@ (8008a0c <USBH_Get_CfgDesc+0x6c>)
 80089c2:	f001 fbc3 	bl	800a14c <iprintf>
 80089c6:	200a      	movs	r0, #10
 80089c8:	f001 fbd2 	bl	800a170 <putchar>
    return USBH_NOT_SUPPORTED;
 80089cc:	2303      	movs	r3, #3
 80089ce:	e016      	b.n	80089fe <USBH_Get_CfgDesc+0x5e>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80089d0:	887b      	ldrh	r3, [r7, #2]
 80089d2:	9300      	str	r3, [sp, #0]
 80089d4:	68bb      	ldr	r3, [r7, #8]
 80089d6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80089da:	2100      	movs	r1, #0
 80089dc:	6878      	ldr	r0, [r7, #4]
 80089de:	f000 f859 	bl	8008a94 <USBH_GetDescriptor>
 80089e2:	4603      	mov	r3, r0
 80089e4:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 80089e6:	7bfb      	ldrb	r3, [r7, #15]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d107      	bne.n	80089fc <USBH_Get_CfgDesc+0x5c>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 80089ec:	887b      	ldrh	r3, [r7, #2]
 80089ee:	461a      	mov	r2, r3
 80089f0:	68b9      	ldr	r1, [r7, #8]
 80089f2:	6878      	ldr	r0, [r7, #4]
 80089f4:	f000 f9c2 	bl	8008d7c <USBH_ParseCfgDesc>
 80089f8:	4603      	mov	r3, r0
 80089fa:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80089fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80089fe:	4618      	mov	r0, r3
 8008a00:	3710      	adds	r7, #16
 8008a02:	46bd      	mov	sp, r7
 8008a04:	bd80      	pop	{r7, pc}
 8008a06:	bf00      	nop
 8008a08:	0800b7fc 	.word	0x0800b7fc
 8008a0c:	0800b848 	.word	0x0800b848

08008a10 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 8008a10:	b580      	push	{r7, lr}
 8008a12:	b088      	sub	sp, #32
 8008a14:	af02      	add	r7, sp, #8
 8008a16:	60f8      	str	r0, [r7, #12]
 8008a18:	607a      	str	r2, [r7, #4]
 8008a1a:	461a      	mov	r2, r3
 8008a1c:	460b      	mov	r3, r1
 8008a1e:	72fb      	strb	r3, [r7, #11]
 8008a20:	4613      	mov	r3, r2
 8008a22:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 8008a24:	893b      	ldrh	r3, [r7, #8]
 8008a26:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008a2a:	d802      	bhi.n	8008a32 <USBH_Get_StringDesc+0x22>
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d10a      	bne.n	8008a48 <USBH_Get_StringDesc+0x38>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
 8008a32:	4816      	ldr	r0, [pc, #88]	@ (8008a8c <USBH_Get_StringDesc+0x7c>)
 8008a34:	f001 fb8a 	bl	800a14c <iprintf>
 8008a38:	4815      	ldr	r0, [pc, #84]	@ (8008a90 <USBH_Get_StringDesc+0x80>)
 8008a3a:	f001 fb87 	bl	800a14c <iprintf>
 8008a3e:	200a      	movs	r0, #10
 8008a40:	f001 fb96 	bl	800a170 <putchar>
    return USBH_NOT_SUPPORTED;
 8008a44:	2303      	movs	r3, #3
 8008a46:	e01c      	b.n	8008a82 <USBH_Get_StringDesc+0x72>
  }

  status = USBH_GetDescriptor(phost,
 8008a48:	7afb      	ldrb	r3, [r7, #11]
 8008a4a:	b29b      	uxth	r3, r3
 8008a4c:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8008a50:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8008a58:	893b      	ldrh	r3, [r7, #8]
 8008a5a:	9300      	str	r3, [sp, #0]
 8008a5c:	460b      	mov	r3, r1
 8008a5e:	2100      	movs	r1, #0
 8008a60:	68f8      	ldr	r0, [r7, #12]
 8008a62:	f000 f817 	bl	8008a94 <USBH_GetDescriptor>
 8008a66:	4603      	mov	r3, r0
 8008a68:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8008a6a:	7dfb      	ldrb	r3, [r7, #23]
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d107      	bne.n	8008a80 <USBH_Get_StringDesc+0x70>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8008a76:	893a      	ldrh	r2, [r7, #8]
 8008a78:	6879      	ldr	r1, [r7, #4]
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	f000 fb92 	bl	80091a4 <USBH_ParseStringDesc>
  }

  return status;
 8008a80:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a82:	4618      	mov	r0, r3
 8008a84:	3718      	adds	r7, #24
 8008a86:	46bd      	mov	sp, r7
 8008a88:	bd80      	pop	{r7, pc}
 8008a8a:	bf00      	nop
 8008a8c:	0800b7fc 	.word	0x0800b7fc
 8008a90:	0800b894 	.word	0x0800b894

08008a94 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 8008a94:	b580      	push	{r7, lr}
 8008a96:	b084      	sub	sp, #16
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	60f8      	str	r0, [r7, #12]
 8008a9c:	607b      	str	r3, [r7, #4]
 8008a9e:	460b      	mov	r3, r1
 8008aa0:	72fb      	strb	r3, [r7, #11]
 8008aa2:	4613      	mov	r3, r2
 8008aa4:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	789b      	ldrb	r3, [r3, #2]
 8008aaa:	2b01      	cmp	r3, #1
 8008aac:	d11c      	bne.n	8008ae8 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8008aae:	7afb      	ldrb	r3, [r7, #11]
 8008ab0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008ab4:	b2da      	uxtb	r2, r3
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	2206      	movs	r2, #6
 8008abe:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	893a      	ldrh	r2, [r7, #8]
 8008ac4:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8008ac6:	893b      	ldrh	r3, [r7, #8]
 8008ac8:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8008acc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008ad0:	d104      	bne.n	8008adc <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	f240 4209 	movw	r2, #1033	@ 0x409
 8008ad8:	829a      	strh	r2, [r3, #20]
 8008ada:	e002      	b.n	8008ae2 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	2200      	movs	r2, #0
 8008ae0:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	8b3a      	ldrh	r2, [r7, #24]
 8008ae6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8008ae8:	8b3b      	ldrh	r3, [r7, #24]
 8008aea:	461a      	mov	r2, r3
 8008aec:	6879      	ldr	r1, [r7, #4]
 8008aee:	68f8      	ldr	r0, [r7, #12]
 8008af0:	f000 fba5 	bl	800923e <USBH_CtlReq>
 8008af4:	4603      	mov	r3, r0
}
 8008af6:	4618      	mov	r0, r3
 8008af8:	3710      	adds	r7, #16
 8008afa:	46bd      	mov	sp, r7
 8008afc:	bd80      	pop	{r7, pc}

08008afe <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8008afe:	b580      	push	{r7, lr}
 8008b00:	b082      	sub	sp, #8
 8008b02:	af00      	add	r7, sp, #0
 8008b04:	6078      	str	r0, [r7, #4]
 8008b06:	460b      	mov	r3, r1
 8008b08:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	789b      	ldrb	r3, [r3, #2]
 8008b0e:	2b01      	cmp	r3, #1
 8008b10:	d10f      	bne.n	8008b32 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	2200      	movs	r2, #0
 8008b16:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	2205      	movs	r2, #5
 8008b1c:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8008b1e:	78fb      	ldrb	r3, [r7, #3]
 8008b20:	b29a      	uxth	r2, r3
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	2200      	movs	r2, #0
 8008b2a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	2200      	movs	r2, #0
 8008b30:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008b32:	2200      	movs	r2, #0
 8008b34:	2100      	movs	r1, #0
 8008b36:	6878      	ldr	r0, [r7, #4]
 8008b38:	f000 fb81 	bl	800923e <USBH_CtlReq>
 8008b3c:	4603      	mov	r3, r0
}
 8008b3e:	4618      	mov	r0, r3
 8008b40:	3708      	adds	r7, #8
 8008b42:	46bd      	mov	sp, r7
 8008b44:	bd80      	pop	{r7, pc}

08008b46 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8008b46:	b580      	push	{r7, lr}
 8008b48:	b082      	sub	sp, #8
 8008b4a:	af00      	add	r7, sp, #0
 8008b4c:	6078      	str	r0, [r7, #4]
 8008b4e:	460b      	mov	r3, r1
 8008b50:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	789b      	ldrb	r3, [r3, #2]
 8008b56:	2b01      	cmp	r3, #1
 8008b58:	d10e      	bne.n	8008b78 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	2200      	movs	r2, #0
 8008b5e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	2209      	movs	r2, #9
 8008b64:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	887a      	ldrh	r2, [r7, #2]
 8008b6a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	2200      	movs	r2, #0
 8008b70:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	2200      	movs	r2, #0
 8008b76:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008b78:	2200      	movs	r2, #0
 8008b7a:	2100      	movs	r1, #0
 8008b7c:	6878      	ldr	r0, [r7, #4]
 8008b7e:	f000 fb5e 	bl	800923e <USBH_CtlReq>
 8008b82:	4603      	mov	r3, r0
}
 8008b84:	4618      	mov	r0, r3
 8008b86:	3708      	adds	r7, #8
 8008b88:	46bd      	mov	sp, r7
 8008b8a:	bd80      	pop	{r7, pc}

08008b8c <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8008b8c:	b580      	push	{r7, lr}
 8008b8e:	b082      	sub	sp, #8
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	6078      	str	r0, [r7, #4]
 8008b94:	460b      	mov	r3, r1
 8008b96:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	789b      	ldrb	r3, [r3, #2]
 8008b9c:	2b01      	cmp	r3, #1
 8008b9e:	d10f      	bne.n	8008bc0 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	2200      	movs	r2, #0
 8008ba4:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	2203      	movs	r2, #3
 8008baa:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8008bac:	78fb      	ldrb	r3, [r7, #3]
 8008bae:	b29a      	uxth	r2, r3
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	2200      	movs	r2, #0
 8008bb8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	2200      	movs	r2, #0
 8008bbe:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008bc0:	2200      	movs	r2, #0
 8008bc2:	2100      	movs	r1, #0
 8008bc4:	6878      	ldr	r0, [r7, #4]
 8008bc6:	f000 fb3a 	bl	800923e <USBH_CtlReq>
 8008bca:	4603      	mov	r3, r0
}
 8008bcc:	4618      	mov	r0, r3
 8008bce:	3708      	adds	r7, #8
 8008bd0:	46bd      	mov	sp, r7
 8008bd2:	bd80      	pop	{r7, pc}

08008bd4 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8008bd4:	b580      	push	{r7, lr}
 8008bd6:	b082      	sub	sp, #8
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	6078      	str	r0, [r7, #4]
 8008bdc:	460b      	mov	r3, r1
 8008bde:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	789b      	ldrb	r3, [r3, #2]
 8008be4:	2b01      	cmp	r3, #1
 8008be6:	d10f      	bne.n	8008c08 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	2202      	movs	r2, #2
 8008bec:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	2201      	movs	r2, #1
 8008bf2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	2200      	movs	r2, #0
 8008bf8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8008bfa:	78fb      	ldrb	r3, [r7, #3]
 8008bfc:	b29a      	uxth	r2, r3
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	2200      	movs	r2, #0
 8008c06:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008c08:	2200      	movs	r2, #0
 8008c0a:	2100      	movs	r1, #0
 8008c0c:	6878      	ldr	r0, [r7, #4]
 8008c0e:	f000 fb16 	bl	800923e <USBH_CtlReq>
 8008c12:	4603      	mov	r3, r0
}
 8008c14:	4618      	mov	r0, r3
 8008c16:	3708      	adds	r7, #8
 8008c18:	46bd      	mov	sp, r7
 8008c1a:	bd80      	pop	{r7, pc}

08008c1c <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8008c1c:	b480      	push	{r7}
 8008c1e:	b087      	sub	sp, #28
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	60f8      	str	r0, [r7, #12]
 8008c24:	60b9      	str	r1, [r7, #8]
 8008c26:	4613      	mov	r3, r2
 8008c28:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8008c30:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 8008c32:	2300      	movs	r3, #0
 8008c34:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 8008c36:	68bb      	ldr	r3, [r7, #8]
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d101      	bne.n	8008c40 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 8008c3c:	2302      	movs	r3, #2
 8008c3e:	e094      	b.n	8008d6a <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 8008c40:	68bb      	ldr	r3, [r7, #8]
 8008c42:	781a      	ldrb	r2, [r3, #0]
 8008c44:	693b      	ldr	r3, [r7, #16]
 8008c46:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 8008c48:	68bb      	ldr	r3, [r7, #8]
 8008c4a:	785a      	ldrb	r2, [r3, #1]
 8008c4c:	693b      	ldr	r3, [r7, #16]
 8008c4e:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 8008c50:	68bb      	ldr	r3, [r7, #8]
 8008c52:	3302      	adds	r3, #2
 8008c54:	781b      	ldrb	r3, [r3, #0]
 8008c56:	461a      	mov	r2, r3
 8008c58:	68bb      	ldr	r3, [r7, #8]
 8008c5a:	3303      	adds	r3, #3
 8008c5c:	781b      	ldrb	r3, [r3, #0]
 8008c5e:	021b      	lsls	r3, r3, #8
 8008c60:	b29b      	uxth	r3, r3
 8008c62:	4313      	orrs	r3, r2
 8008c64:	b29a      	uxth	r2, r3
 8008c66:	693b      	ldr	r3, [r7, #16]
 8008c68:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 8008c6a:	68bb      	ldr	r3, [r7, #8]
 8008c6c:	791a      	ldrb	r2, [r3, #4]
 8008c6e:	693b      	ldr	r3, [r7, #16]
 8008c70:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 8008c72:	68bb      	ldr	r3, [r7, #8]
 8008c74:	795a      	ldrb	r2, [r3, #5]
 8008c76:	693b      	ldr	r3, [r7, #16]
 8008c78:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 8008c7a:	68bb      	ldr	r3, [r7, #8]
 8008c7c:	799a      	ldrb	r2, [r3, #6]
 8008c7e:	693b      	ldr	r3, [r7, #16]
 8008c80:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 8008c82:	68bb      	ldr	r3, [r7, #8]
 8008c84:	79da      	ldrb	r2, [r3, #7]
 8008c86:	693b      	ldr	r3, [r7, #16]
 8008c88:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d004      	beq.n	8008c9e <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8008c9a:	2b01      	cmp	r3, #1
 8008c9c:	d11b      	bne.n	8008cd6 <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 8008c9e:	693b      	ldr	r3, [r7, #16]
 8008ca0:	79db      	ldrb	r3, [r3, #7]
 8008ca2:	2b20      	cmp	r3, #32
 8008ca4:	dc0f      	bgt.n	8008cc6 <USBH_ParseDevDesc+0xaa>
 8008ca6:	2b08      	cmp	r3, #8
 8008ca8:	db0f      	blt.n	8008cca <USBH_ParseDevDesc+0xae>
 8008caa:	3b08      	subs	r3, #8
 8008cac:	4a32      	ldr	r2, [pc, #200]	@ (8008d78 <USBH_ParseDevDesc+0x15c>)
 8008cae:	fa22 f303 	lsr.w	r3, r2, r3
 8008cb2:	f003 0301 	and.w	r3, r3, #1
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	bf14      	ite	ne
 8008cba:	2301      	movne	r3, #1
 8008cbc:	2300      	moveq	r3, #0
 8008cbe:	b2db      	uxtb	r3, r3
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d106      	bne.n	8008cd2 <USBH_ParseDevDesc+0xb6>
 8008cc4:	e001      	b.n	8008cca <USBH_ParseDevDesc+0xae>
 8008cc6:	2b40      	cmp	r3, #64	@ 0x40
 8008cc8:	d003      	beq.n	8008cd2 <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 8008cca:	693b      	ldr	r3, [r7, #16]
 8008ccc:	2208      	movs	r2, #8
 8008cce:	71da      	strb	r2, [r3, #7]
        break;
 8008cd0:	e000      	b.n	8008cd4 <USBH_ParseDevDesc+0xb8>
        break;
 8008cd2:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 8008cd4:	e00e      	b.n	8008cf4 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008cdc:	2b02      	cmp	r3, #2
 8008cde:	d107      	bne.n	8008cf0 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 8008ce0:	693b      	ldr	r3, [r7, #16]
 8008ce2:	79db      	ldrb	r3, [r3, #7]
 8008ce4:	2b08      	cmp	r3, #8
 8008ce6:	d005      	beq.n	8008cf4 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 8008ce8:	693b      	ldr	r3, [r7, #16]
 8008cea:	2208      	movs	r2, #8
 8008cec:	71da      	strb	r2, [r3, #7]
 8008cee:	e001      	b.n	8008cf4 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8008cf0:	2303      	movs	r3, #3
 8008cf2:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 8008cf4:	88fb      	ldrh	r3, [r7, #6]
 8008cf6:	2b08      	cmp	r3, #8
 8008cf8:	d936      	bls.n	8008d68 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 8008cfa:	68bb      	ldr	r3, [r7, #8]
 8008cfc:	3308      	adds	r3, #8
 8008cfe:	781b      	ldrb	r3, [r3, #0]
 8008d00:	461a      	mov	r2, r3
 8008d02:	68bb      	ldr	r3, [r7, #8]
 8008d04:	3309      	adds	r3, #9
 8008d06:	781b      	ldrb	r3, [r3, #0]
 8008d08:	021b      	lsls	r3, r3, #8
 8008d0a:	b29b      	uxth	r3, r3
 8008d0c:	4313      	orrs	r3, r2
 8008d0e:	b29a      	uxth	r2, r3
 8008d10:	693b      	ldr	r3, [r7, #16]
 8008d12:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 8008d14:	68bb      	ldr	r3, [r7, #8]
 8008d16:	330a      	adds	r3, #10
 8008d18:	781b      	ldrb	r3, [r3, #0]
 8008d1a:	461a      	mov	r2, r3
 8008d1c:	68bb      	ldr	r3, [r7, #8]
 8008d1e:	330b      	adds	r3, #11
 8008d20:	781b      	ldrb	r3, [r3, #0]
 8008d22:	021b      	lsls	r3, r3, #8
 8008d24:	b29b      	uxth	r3, r3
 8008d26:	4313      	orrs	r3, r2
 8008d28:	b29a      	uxth	r2, r3
 8008d2a:	693b      	ldr	r3, [r7, #16]
 8008d2c:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 8008d2e:	68bb      	ldr	r3, [r7, #8]
 8008d30:	330c      	adds	r3, #12
 8008d32:	781b      	ldrb	r3, [r3, #0]
 8008d34:	461a      	mov	r2, r3
 8008d36:	68bb      	ldr	r3, [r7, #8]
 8008d38:	330d      	adds	r3, #13
 8008d3a:	781b      	ldrb	r3, [r3, #0]
 8008d3c:	021b      	lsls	r3, r3, #8
 8008d3e:	b29b      	uxth	r3, r3
 8008d40:	4313      	orrs	r3, r2
 8008d42:	b29a      	uxth	r2, r3
 8008d44:	693b      	ldr	r3, [r7, #16]
 8008d46:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 8008d48:	68bb      	ldr	r3, [r7, #8]
 8008d4a:	7b9a      	ldrb	r2, [r3, #14]
 8008d4c:	693b      	ldr	r3, [r7, #16]
 8008d4e:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 8008d50:	68bb      	ldr	r3, [r7, #8]
 8008d52:	7bda      	ldrb	r2, [r3, #15]
 8008d54:	693b      	ldr	r3, [r7, #16]
 8008d56:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 8008d58:	68bb      	ldr	r3, [r7, #8]
 8008d5a:	7c1a      	ldrb	r2, [r3, #16]
 8008d5c:	693b      	ldr	r3, [r7, #16]
 8008d5e:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 8008d60:	68bb      	ldr	r3, [r7, #8]
 8008d62:	7c5a      	ldrb	r2, [r3, #17]
 8008d64:	693b      	ldr	r3, [r7, #16]
 8008d66:	745a      	strb	r2, [r3, #17]
  }

  return status;
 8008d68:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d6a:	4618      	mov	r0, r3
 8008d6c:	371c      	adds	r7, #28
 8008d6e:	46bd      	mov	sp, r7
 8008d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d74:	4770      	bx	lr
 8008d76:	bf00      	nop
 8008d78:	01000101 	.word	0x01000101

08008d7c <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8008d7c:	b580      	push	{r7, lr}
 8008d7e:	b08c      	sub	sp, #48	@ 0x30
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	60f8      	str	r0, [r7, #12]
 8008d84:	60b9      	str	r1, [r7, #8]
 8008d86:	4613      	mov	r3, r2
 8008d88:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8008d90:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8008d92:	2300      	movs	r3, #0
 8008d94:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8008d98:	2300      	movs	r3, #0
 8008d9a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 8008d9e:	2300      	movs	r3, #0
 8008da0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 8008da4:	68bb      	ldr	r3, [r7, #8]
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d101      	bne.n	8008dae <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 8008daa:	2302      	movs	r3, #2
 8008dac:	e0da      	b.n	8008f64 <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 8008dae:	68bb      	ldr	r3, [r7, #8]
 8008db0:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 8008db2:	68bb      	ldr	r3, [r7, #8]
 8008db4:	781a      	ldrb	r2, [r3, #0]
 8008db6:	6a3b      	ldr	r3, [r7, #32]
 8008db8:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 8008dba:	68bb      	ldr	r3, [r7, #8]
 8008dbc:	785a      	ldrb	r2, [r3, #1]
 8008dbe:	6a3b      	ldr	r3, [r7, #32]
 8008dc0:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8008dc2:	68bb      	ldr	r3, [r7, #8]
 8008dc4:	3302      	adds	r3, #2
 8008dc6:	781b      	ldrb	r3, [r3, #0]
 8008dc8:	461a      	mov	r2, r3
 8008dca:	68bb      	ldr	r3, [r7, #8]
 8008dcc:	3303      	adds	r3, #3
 8008dce:	781b      	ldrb	r3, [r3, #0]
 8008dd0:	021b      	lsls	r3, r3, #8
 8008dd2:	b29b      	uxth	r3, r3
 8008dd4:	4313      	orrs	r3, r2
 8008dd6:	b29b      	uxth	r3, r3
 8008dd8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008ddc:	bf28      	it	cs
 8008dde:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 8008de2:	b29a      	uxth	r2, r3
 8008de4:	6a3b      	ldr	r3, [r7, #32]
 8008de6:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 8008de8:	68bb      	ldr	r3, [r7, #8]
 8008dea:	791a      	ldrb	r2, [r3, #4]
 8008dec:	6a3b      	ldr	r3, [r7, #32]
 8008dee:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 8008df0:	68bb      	ldr	r3, [r7, #8]
 8008df2:	795a      	ldrb	r2, [r3, #5]
 8008df4:	6a3b      	ldr	r3, [r7, #32]
 8008df6:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 8008df8:	68bb      	ldr	r3, [r7, #8]
 8008dfa:	799a      	ldrb	r2, [r3, #6]
 8008dfc:	6a3b      	ldr	r3, [r7, #32]
 8008dfe:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 8008e00:	68bb      	ldr	r3, [r7, #8]
 8008e02:	79da      	ldrb	r2, [r3, #7]
 8008e04:	6a3b      	ldr	r3, [r7, #32]
 8008e06:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 8008e08:	68bb      	ldr	r3, [r7, #8]
 8008e0a:	7a1a      	ldrb	r2, [r3, #8]
 8008e0c:	6a3b      	ldr	r3, [r7, #32]
 8008e0e:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength != USB_CONFIGURATION_DESC_SIZE)
 8008e10:	6a3b      	ldr	r3, [r7, #32]
 8008e12:	781b      	ldrb	r3, [r3, #0]
 8008e14:	2b09      	cmp	r3, #9
 8008e16:	d002      	beq.n	8008e1e <USBH_ParseCfgDesc+0xa2>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8008e18:	6a3b      	ldr	r3, [r7, #32]
 8008e1a:	2209      	movs	r2, #9
 8008e1c:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8008e1e:	88fb      	ldrh	r3, [r7, #6]
 8008e20:	2b09      	cmp	r3, #9
 8008e22:	f240 809d 	bls.w	8008f60 <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 8008e26:	2309      	movs	r3, #9
 8008e28:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8008e2a:	2300      	movs	r3, #0
 8008e2c:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008e2e:	e081      	b.n	8008f34 <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008e30:	f107 0316 	add.w	r3, r7, #22
 8008e34:	4619      	mov	r1, r3
 8008e36:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008e38:	f000 f9e7 	bl	800920a <USBH_GetNextDesc>
 8008e3c:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8008e3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e40:	785b      	ldrb	r3, [r3, #1]
 8008e42:	2b04      	cmp	r3, #4
 8008e44:	d176      	bne.n	8008f34 <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8008e46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e48:	781b      	ldrb	r3, [r3, #0]
 8008e4a:	2b09      	cmp	r3, #9
 8008e4c:	d002      	beq.n	8008e54 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8008e4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e50:	2209      	movs	r2, #9
 8008e52:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8008e54:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008e58:	221a      	movs	r2, #26
 8008e5a:	fb02 f303 	mul.w	r3, r2, r3
 8008e5e:	3308      	adds	r3, #8
 8008e60:	6a3a      	ldr	r2, [r7, #32]
 8008e62:	4413      	add	r3, r2
 8008e64:	3302      	adds	r3, #2
 8008e66:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8008e68:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008e6a:	69f8      	ldr	r0, [r7, #28]
 8008e6c:	f000 f87e 	bl	8008f6c <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8008e70:	2300      	movs	r3, #0
 8008e72:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8008e76:	2300      	movs	r3, #0
 8008e78:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008e7a:	e043      	b.n	8008f04 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008e7c:	f107 0316 	add.w	r3, r7, #22
 8008e80:	4619      	mov	r1, r3
 8008e82:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008e84:	f000 f9c1 	bl	800920a <USBH_GetNextDesc>
 8008e88:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008e8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e8c:	785b      	ldrb	r3, [r3, #1]
 8008e8e:	2b05      	cmp	r3, #5
 8008e90:	d138      	bne.n	8008f04 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 8008e92:	69fb      	ldr	r3, [r7, #28]
 8008e94:	795b      	ldrb	r3, [r3, #5]
 8008e96:	2b01      	cmp	r3, #1
 8008e98:	d113      	bne.n	8008ec2 <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8008e9a:	69fb      	ldr	r3, [r7, #28]
 8008e9c:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 8008e9e:	2b02      	cmp	r3, #2
 8008ea0:	d003      	beq.n	8008eaa <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8008ea2:	69fb      	ldr	r3, [r7, #28]
 8008ea4:	799b      	ldrb	r3, [r3, #6]
 8008ea6:	2b03      	cmp	r3, #3
 8008ea8:	d10b      	bne.n	8008ec2 <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008eaa:	69fb      	ldr	r3, [r7, #28]
 8008eac:	79db      	ldrb	r3, [r3, #7]
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d10b      	bne.n	8008eca <USBH_ParseCfgDesc+0x14e>
 8008eb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008eb4:	781b      	ldrb	r3, [r3, #0]
 8008eb6:	2b09      	cmp	r3, #9
 8008eb8:	d007      	beq.n	8008eca <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 8008eba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ebc:	2209      	movs	r2, #9
 8008ebe:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008ec0:	e003      	b.n	8008eca <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8008ec2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ec4:	2207      	movs	r2, #7
 8008ec6:	701a      	strb	r2, [r3, #0]
 8008ec8:	e000      	b.n	8008ecc <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008eca:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8008ecc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008ed0:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8008ed4:	3201      	adds	r2, #1
 8008ed6:	00d2      	lsls	r2, r2, #3
 8008ed8:	211a      	movs	r1, #26
 8008eda:	fb01 f303 	mul.w	r3, r1, r3
 8008ede:	4413      	add	r3, r2
 8008ee0:	3308      	adds	r3, #8
 8008ee2:	6a3a      	ldr	r2, [r7, #32]
 8008ee4:	4413      	add	r3, r2
 8008ee6:	3304      	adds	r3, #4
 8008ee8:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8008eea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008eec:	69b9      	ldr	r1, [r7, #24]
 8008eee:	68f8      	ldr	r0, [r7, #12]
 8008ef0:	f000 f870 	bl	8008fd4 <USBH_ParseEPDesc>
 8008ef4:	4603      	mov	r3, r0
 8008ef6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 8008efa:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008efe:	3301      	adds	r3, #1
 8008f00:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008f04:	69fb      	ldr	r3, [r7, #28]
 8008f06:	791b      	ldrb	r3, [r3, #4]
 8008f08:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8008f0c:	429a      	cmp	r2, r3
 8008f0e:	d204      	bcs.n	8008f1a <USBH_ParseCfgDesc+0x19e>
 8008f10:	6a3b      	ldr	r3, [r7, #32]
 8008f12:	885a      	ldrh	r2, [r3, #2]
 8008f14:	8afb      	ldrh	r3, [r7, #22]
 8008f16:	429a      	cmp	r2, r3
 8008f18:	d8b0      	bhi.n	8008e7c <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8008f1a:	69fb      	ldr	r3, [r7, #28]
 8008f1c:	791b      	ldrb	r3, [r3, #4]
 8008f1e:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8008f22:	429a      	cmp	r2, r3
 8008f24:	d201      	bcs.n	8008f2a <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 8008f26:	2303      	movs	r3, #3
 8008f28:	e01c      	b.n	8008f64 <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 8008f2a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008f2e:	3301      	adds	r3, #1
 8008f30:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008f34:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008f38:	2b01      	cmp	r3, #1
 8008f3a:	d805      	bhi.n	8008f48 <USBH_ParseCfgDesc+0x1cc>
 8008f3c:	6a3b      	ldr	r3, [r7, #32]
 8008f3e:	885a      	ldrh	r2, [r3, #2]
 8008f40:	8afb      	ldrh	r3, [r7, #22]
 8008f42:	429a      	cmp	r2, r3
 8008f44:	f63f af74 	bhi.w	8008e30 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8008f48:	6a3b      	ldr	r3, [r7, #32]
 8008f4a:	791b      	ldrb	r3, [r3, #4]
 8008f4c:	2b02      	cmp	r3, #2
 8008f4e:	bf28      	it	cs
 8008f50:	2302      	movcs	r3, #2
 8008f52:	b2db      	uxtb	r3, r3
 8008f54:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8008f58:	429a      	cmp	r2, r3
 8008f5a:	d201      	bcs.n	8008f60 <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 8008f5c:	2303      	movs	r3, #3
 8008f5e:	e001      	b.n	8008f64 <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 8008f60:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8008f64:	4618      	mov	r0, r3
 8008f66:	3730      	adds	r7, #48	@ 0x30
 8008f68:	46bd      	mov	sp, r7
 8008f6a:	bd80      	pop	{r7, pc}

08008f6c <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 8008f6c:	b480      	push	{r7}
 8008f6e:	b083      	sub	sp, #12
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	6078      	str	r0, [r7, #4]
 8008f74:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 8008f76:	683b      	ldr	r3, [r7, #0]
 8008f78:	781a      	ldrb	r2, [r3, #0]
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 8008f7e:	683b      	ldr	r3, [r7, #0]
 8008f80:	785a      	ldrb	r2, [r3, #1]
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 8008f86:	683b      	ldr	r3, [r7, #0]
 8008f88:	789a      	ldrb	r2, [r3, #2]
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 8008f8e:	683b      	ldr	r3, [r7, #0]
 8008f90:	78da      	ldrb	r2, [r3, #3]
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 8008f96:	683b      	ldr	r3, [r7, #0]
 8008f98:	3304      	adds	r3, #4
 8008f9a:	781b      	ldrb	r3, [r3, #0]
 8008f9c:	2b02      	cmp	r3, #2
 8008f9e:	bf28      	it	cs
 8008fa0:	2302      	movcs	r3, #2
 8008fa2:	b2da      	uxtb	r2, r3
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 8008fa8:	683b      	ldr	r3, [r7, #0]
 8008faa:	795a      	ldrb	r2, [r3, #5]
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 8008fb0:	683b      	ldr	r3, [r7, #0]
 8008fb2:	799a      	ldrb	r2, [r3, #6]
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 8008fb8:	683b      	ldr	r3, [r7, #0]
 8008fba:	79da      	ldrb	r2, [r3, #7]
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 8008fc0:	683b      	ldr	r3, [r7, #0]
 8008fc2:	7a1a      	ldrb	r2, [r3, #8]
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	721a      	strb	r2, [r3, #8]
}
 8008fc8:	bf00      	nop
 8008fca:	370c      	adds	r7, #12
 8008fcc:	46bd      	mov	sp, r7
 8008fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd2:	4770      	bx	lr

08008fd4 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 8008fd4:	b480      	push	{r7}
 8008fd6:	b087      	sub	sp, #28
 8008fd8:	af00      	add	r7, sp, #0
 8008fda:	60f8      	str	r0, [r7, #12]
 8008fdc:	60b9      	str	r1, [r7, #8]
 8008fde:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8008fe0:	2300      	movs	r3, #0
 8008fe2:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	781a      	ldrb	r2, [r3, #0]
 8008fe8:	68bb      	ldr	r3, [r7, #8]
 8008fea:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	785a      	ldrb	r2, [r3, #1]
 8008ff0:	68bb      	ldr	r3, [r7, #8]
 8008ff2:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	789a      	ldrb	r2, [r3, #2]
 8008ff8:	68bb      	ldr	r3, [r7, #8]
 8008ffa:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	78da      	ldrb	r2, [r3, #3]
 8009000:	68bb      	ldr	r3, [r7, #8]
 8009002:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	3304      	adds	r3, #4
 8009008:	781b      	ldrb	r3, [r3, #0]
 800900a:	461a      	mov	r2, r3
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	3305      	adds	r3, #5
 8009010:	781b      	ldrb	r3, [r3, #0]
 8009012:	021b      	lsls	r3, r3, #8
 8009014:	b29b      	uxth	r3, r3
 8009016:	4313      	orrs	r3, r2
 8009018:	b29a      	uxth	r2, r3
 800901a:	68bb      	ldr	r3, [r7, #8]
 800901c:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	799a      	ldrb	r2, [r3, #6]
 8009022:	68bb      	ldr	r3, [r7, #8]
 8009024:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8009026:	68bb      	ldr	r3, [r7, #8]
 8009028:	889b      	ldrh	r3, [r3, #4]
 800902a:	2b00      	cmp	r3, #0
 800902c:	d009      	beq.n	8009042 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800902e:	68bb      	ldr	r3, [r7, #8]
 8009030:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8009032:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009036:	d804      	bhi.n	8009042 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 8009038:	68bb      	ldr	r3, [r7, #8]
 800903a:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800903c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009040:	d901      	bls.n	8009046 <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 8009042:	2303      	movs	r3, #3
 8009044:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800904c:	2b00      	cmp	r3, #0
 800904e:	d136      	bne.n	80090be <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 8009050:	68bb      	ldr	r3, [r7, #8]
 8009052:	78db      	ldrb	r3, [r3, #3]
 8009054:	f003 0303 	and.w	r3, r3, #3
 8009058:	2b02      	cmp	r3, #2
 800905a:	d108      	bne.n	800906e <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 800905c:	68bb      	ldr	r3, [r7, #8]
 800905e:	889b      	ldrh	r3, [r3, #4]
 8009060:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009064:	f240 8097 	bls.w	8009196 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009068:	2303      	movs	r3, #3
 800906a:	75fb      	strb	r3, [r7, #23]
 800906c:	e093      	b.n	8009196 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800906e:	68bb      	ldr	r3, [r7, #8]
 8009070:	78db      	ldrb	r3, [r3, #3]
 8009072:	f003 0303 	and.w	r3, r3, #3
 8009076:	2b00      	cmp	r3, #0
 8009078:	d107      	bne.n	800908a <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800907a:	68bb      	ldr	r3, [r7, #8]
 800907c:	889b      	ldrh	r3, [r3, #4]
 800907e:	2b40      	cmp	r3, #64	@ 0x40
 8009080:	f240 8089 	bls.w	8009196 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009084:	2303      	movs	r3, #3
 8009086:	75fb      	strb	r3, [r7, #23]
 8009088:	e085      	b.n	8009196 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800908a:	68bb      	ldr	r3, [r7, #8]
 800908c:	78db      	ldrb	r3, [r3, #3]
 800908e:	f003 0303 	and.w	r3, r3, #3
 8009092:	2b01      	cmp	r3, #1
 8009094:	d005      	beq.n	80090a2 <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8009096:	68bb      	ldr	r3, [r7, #8]
 8009098:	78db      	ldrb	r3, [r3, #3]
 800909a:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800909e:	2b03      	cmp	r3, #3
 80090a0:	d10a      	bne.n	80090b8 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80090a2:	68bb      	ldr	r3, [r7, #8]
 80090a4:	799b      	ldrb	r3, [r3, #6]
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d003      	beq.n	80090b2 <USBH_ParseEPDesc+0xde>
 80090aa:	68bb      	ldr	r3, [r7, #8]
 80090ac:	799b      	ldrb	r3, [r3, #6]
 80090ae:	2b10      	cmp	r3, #16
 80090b0:	d970      	bls.n	8009194 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 80090b2:	2303      	movs	r3, #3
 80090b4:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80090b6:	e06d      	b.n	8009194 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 80090b8:	2303      	movs	r3, #3
 80090ba:	75fb      	strb	r3, [r7, #23]
 80090bc:	e06b      	b.n	8009196 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80090c4:	2b01      	cmp	r3, #1
 80090c6:	d13c      	bne.n	8009142 <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 80090c8:	68bb      	ldr	r3, [r7, #8]
 80090ca:	78db      	ldrb	r3, [r3, #3]
 80090cc:	f003 0303 	and.w	r3, r3, #3
 80090d0:	2b02      	cmp	r3, #2
 80090d2:	d005      	beq.n	80090e0 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 80090d4:	68bb      	ldr	r3, [r7, #8]
 80090d6:	78db      	ldrb	r3, [r3, #3]
 80090d8:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d106      	bne.n	80090ee <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 80090e0:	68bb      	ldr	r3, [r7, #8]
 80090e2:	889b      	ldrh	r3, [r3, #4]
 80090e4:	2b40      	cmp	r3, #64	@ 0x40
 80090e6:	d956      	bls.n	8009196 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80090e8:	2303      	movs	r3, #3
 80090ea:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 80090ec:	e053      	b.n	8009196 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 80090ee:	68bb      	ldr	r3, [r7, #8]
 80090f0:	78db      	ldrb	r3, [r3, #3]
 80090f2:	f003 0303 	and.w	r3, r3, #3
 80090f6:	2b01      	cmp	r3, #1
 80090f8:	d10e      	bne.n	8009118 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 80090fa:	68bb      	ldr	r3, [r7, #8]
 80090fc:	799b      	ldrb	r3, [r3, #6]
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d007      	beq.n	8009112 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 8009102:	68bb      	ldr	r3, [r7, #8]
 8009104:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 8009106:	2b10      	cmp	r3, #16
 8009108:	d803      	bhi.n	8009112 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 800910a:	68bb      	ldr	r3, [r7, #8]
 800910c:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 800910e:	2b40      	cmp	r3, #64	@ 0x40
 8009110:	d941      	bls.n	8009196 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009112:	2303      	movs	r3, #3
 8009114:	75fb      	strb	r3, [r7, #23]
 8009116:	e03e      	b.n	8009196 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8009118:	68bb      	ldr	r3, [r7, #8]
 800911a:	78db      	ldrb	r3, [r3, #3]
 800911c:	f003 0303 	and.w	r3, r3, #3
 8009120:	2b03      	cmp	r3, #3
 8009122:	d10b      	bne.n	800913c <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 8009124:	68bb      	ldr	r3, [r7, #8]
 8009126:	799b      	ldrb	r3, [r3, #6]
 8009128:	2b00      	cmp	r3, #0
 800912a:	d004      	beq.n	8009136 <USBH_ParseEPDesc+0x162>
 800912c:	68bb      	ldr	r3, [r7, #8]
 800912e:	889b      	ldrh	r3, [r3, #4]
 8009130:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009134:	d32f      	bcc.n	8009196 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009136:	2303      	movs	r3, #3
 8009138:	75fb      	strb	r3, [r7, #23]
 800913a:	e02c      	b.n	8009196 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800913c:	2303      	movs	r3, #3
 800913e:	75fb      	strb	r3, [r7, #23]
 8009140:	e029      	b.n	8009196 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009148:	2b02      	cmp	r3, #2
 800914a:	d120      	bne.n	800918e <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800914c:	68bb      	ldr	r3, [r7, #8]
 800914e:	78db      	ldrb	r3, [r3, #3]
 8009150:	f003 0303 	and.w	r3, r3, #3
 8009154:	2b00      	cmp	r3, #0
 8009156:	d106      	bne.n	8009166 <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 8009158:	68bb      	ldr	r3, [r7, #8]
 800915a:	889b      	ldrh	r3, [r3, #4]
 800915c:	2b08      	cmp	r3, #8
 800915e:	d01a      	beq.n	8009196 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009160:	2303      	movs	r3, #3
 8009162:	75fb      	strb	r3, [r7, #23]
 8009164:	e017      	b.n	8009196 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8009166:	68bb      	ldr	r3, [r7, #8]
 8009168:	78db      	ldrb	r3, [r3, #3]
 800916a:	f003 0303 	and.w	r3, r3, #3
 800916e:	2b03      	cmp	r3, #3
 8009170:	d10a      	bne.n	8009188 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 8009172:	68bb      	ldr	r3, [r7, #8]
 8009174:	799b      	ldrb	r3, [r3, #6]
 8009176:	2b00      	cmp	r3, #0
 8009178:	d003      	beq.n	8009182 <USBH_ParseEPDesc+0x1ae>
 800917a:	68bb      	ldr	r3, [r7, #8]
 800917c:	889b      	ldrh	r3, [r3, #4]
 800917e:	2b08      	cmp	r3, #8
 8009180:	d909      	bls.n	8009196 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009182:	2303      	movs	r3, #3
 8009184:	75fb      	strb	r3, [r7, #23]
 8009186:	e006      	b.n	8009196 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8009188:	2303      	movs	r3, #3
 800918a:	75fb      	strb	r3, [r7, #23]
 800918c:	e003      	b.n	8009196 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800918e:	2303      	movs	r3, #3
 8009190:	75fb      	strb	r3, [r7, #23]
 8009192:	e000      	b.n	8009196 <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8009194:	bf00      	nop
  }

  return status;
 8009196:	7dfb      	ldrb	r3, [r7, #23]
}
 8009198:	4618      	mov	r0, r3
 800919a:	371c      	adds	r7, #28
 800919c:	46bd      	mov	sp, r7
 800919e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a2:	4770      	bx	lr

080091a4 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 80091a4:	b480      	push	{r7}
 80091a6:	b087      	sub	sp, #28
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	60f8      	str	r0, [r7, #12]
 80091ac:	60b9      	str	r1, [r7, #8]
 80091ae:	4613      	mov	r3, r2
 80091b0:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	3301      	adds	r3, #1
 80091b6:	781b      	ldrb	r3, [r3, #0]
 80091b8:	2b03      	cmp	r3, #3
 80091ba:	d120      	bne.n	80091fe <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	781b      	ldrb	r3, [r3, #0]
 80091c0:	1e9a      	subs	r2, r3, #2
 80091c2:	88fb      	ldrh	r3, [r7, #6]
 80091c4:	4293      	cmp	r3, r2
 80091c6:	bf28      	it	cs
 80091c8:	4613      	movcs	r3, r2
 80091ca:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	3302      	adds	r3, #2
 80091d0:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80091d2:	2300      	movs	r3, #0
 80091d4:	82fb      	strh	r3, [r7, #22]
 80091d6:	e00b      	b.n	80091f0 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80091d8:	8afb      	ldrh	r3, [r7, #22]
 80091da:	68fa      	ldr	r2, [r7, #12]
 80091dc:	4413      	add	r3, r2
 80091de:	781a      	ldrb	r2, [r3, #0]
 80091e0:	68bb      	ldr	r3, [r7, #8]
 80091e2:	701a      	strb	r2, [r3, #0]
      pdest++;
 80091e4:	68bb      	ldr	r3, [r7, #8]
 80091e6:	3301      	adds	r3, #1
 80091e8:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 80091ea:	8afb      	ldrh	r3, [r7, #22]
 80091ec:	3302      	adds	r3, #2
 80091ee:	82fb      	strh	r3, [r7, #22]
 80091f0:	8afa      	ldrh	r2, [r7, #22]
 80091f2:	8abb      	ldrh	r3, [r7, #20]
 80091f4:	429a      	cmp	r2, r3
 80091f6:	d3ef      	bcc.n	80091d8 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 80091f8:	68bb      	ldr	r3, [r7, #8]
 80091fa:	2200      	movs	r2, #0
 80091fc:	701a      	strb	r2, [r3, #0]
  }
}
 80091fe:	bf00      	nop
 8009200:	371c      	adds	r7, #28
 8009202:	46bd      	mov	sp, r7
 8009204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009208:	4770      	bx	lr

0800920a <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800920a:	b480      	push	{r7}
 800920c:	b085      	sub	sp, #20
 800920e:	af00      	add	r7, sp, #0
 8009210:	6078      	str	r0, [r7, #4]
 8009212:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8009214:	683b      	ldr	r3, [r7, #0]
 8009216:	881b      	ldrh	r3, [r3, #0]
 8009218:	687a      	ldr	r2, [r7, #4]
 800921a:	7812      	ldrb	r2, [r2, #0]
 800921c:	4413      	add	r3, r2
 800921e:	b29a      	uxth	r2, r3
 8009220:	683b      	ldr	r3, [r7, #0]
 8009222:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	781b      	ldrb	r3, [r3, #0]
 8009228:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	4413      	add	r3, r2
 800922e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009230:	68fb      	ldr	r3, [r7, #12]
}
 8009232:	4618      	mov	r0, r3
 8009234:	3714      	adds	r7, #20
 8009236:	46bd      	mov	sp, r7
 8009238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800923c:	4770      	bx	lr

0800923e <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800923e:	b580      	push	{r7, lr}
 8009240:	b086      	sub	sp, #24
 8009242:	af00      	add	r7, sp, #0
 8009244:	60f8      	str	r0, [r7, #12]
 8009246:	60b9      	str	r1, [r7, #8]
 8009248:	4613      	mov	r3, r2
 800924a:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800924c:	2301      	movs	r3, #1
 800924e:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	789b      	ldrb	r3, [r3, #2]
 8009254:	2b01      	cmp	r3, #1
 8009256:	d002      	beq.n	800925e <USBH_CtlReq+0x20>
 8009258:	2b02      	cmp	r3, #2
 800925a:	d00f      	beq.n	800927c <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800925c:	e027      	b.n	80092ae <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	68ba      	ldr	r2, [r7, #8]
 8009262:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	88fa      	ldrh	r2, [r7, #6]
 8009268:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	2201      	movs	r2, #1
 800926e:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	2202      	movs	r2, #2
 8009274:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8009276:	2301      	movs	r3, #1
 8009278:	75fb      	strb	r3, [r7, #23]
      break;
 800927a:	e018      	b.n	80092ae <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800927c:	68f8      	ldr	r0, [r7, #12]
 800927e:	f000 f81b 	bl	80092b8 <USBH_HandleControl>
 8009282:	4603      	mov	r3, r0
 8009284:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8009286:	7dfb      	ldrb	r3, [r7, #23]
 8009288:	2b00      	cmp	r3, #0
 800928a:	d002      	beq.n	8009292 <USBH_CtlReq+0x54>
 800928c:	7dfb      	ldrb	r3, [r7, #23]
 800928e:	2b03      	cmp	r3, #3
 8009290:	d106      	bne.n	80092a0 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	2201      	movs	r2, #1
 8009296:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	2200      	movs	r2, #0
 800929c:	761a      	strb	r2, [r3, #24]
      break;
 800929e:	e005      	b.n	80092ac <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 80092a0:	7dfb      	ldrb	r3, [r7, #23]
 80092a2:	2b02      	cmp	r3, #2
 80092a4:	d102      	bne.n	80092ac <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	2201      	movs	r2, #1
 80092aa:	709a      	strb	r2, [r3, #2]
      break;
 80092ac:	bf00      	nop
  }
  return status;
 80092ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80092b0:	4618      	mov	r0, r3
 80092b2:	3718      	adds	r7, #24
 80092b4:	46bd      	mov	sp, r7
 80092b6:	bd80      	pop	{r7, pc}

080092b8 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80092b8:	b580      	push	{r7, lr}
 80092ba:	b086      	sub	sp, #24
 80092bc:	af02      	add	r7, sp, #8
 80092be:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80092c0:	2301      	movs	r3, #1
 80092c2:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80092c4:	2300      	movs	r3, #0
 80092c6:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	7e1b      	ldrb	r3, [r3, #24]
 80092cc:	3b01      	subs	r3, #1
 80092ce:	2b0a      	cmp	r3, #10
 80092d0:	f200 815f 	bhi.w	8009592 <USBH_HandleControl+0x2da>
 80092d4:	a201      	add	r2, pc, #4	@ (adr r2, 80092dc <USBH_HandleControl+0x24>)
 80092d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092da:	bf00      	nop
 80092dc:	08009309 	.word	0x08009309
 80092e0:	08009323 	.word	0x08009323
 80092e4:	0800938d 	.word	0x0800938d
 80092e8:	080093b3 	.word	0x080093b3
 80092ec:	080093eb 	.word	0x080093eb
 80092f0:	08009415 	.word	0x08009415
 80092f4:	08009467 	.word	0x08009467
 80092f8:	08009489 	.word	0x08009489
 80092fc:	080094c5 	.word	0x080094c5
 8009300:	080094eb 	.word	0x080094eb
 8009304:	08009529 	.word	0x08009529
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	f103 0110 	add.w	r1, r3, #16
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	795b      	ldrb	r3, [r3, #5]
 8009312:	461a      	mov	r2, r3
 8009314:	6878      	ldr	r0, [r7, #4]
 8009316:	f000 f951 	bl	80095bc <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	2202      	movs	r2, #2
 800931e:	761a      	strb	r2, [r3, #24]
      break;
 8009320:	e142      	b.n	80095a8 <USBH_HandleControl+0x2f0>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	795b      	ldrb	r3, [r3, #5]
 8009326:	4619      	mov	r1, r3
 8009328:	6878      	ldr	r0, [r7, #4]
 800932a:	f000 fcdf 	bl	8009cec <USBH_LL_GetURBState>
 800932e:	4603      	mov	r3, r0
 8009330:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8009332:	7bbb      	ldrb	r3, [r7, #14]
 8009334:	2b01      	cmp	r3, #1
 8009336:	d11e      	bne.n	8009376 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	7c1b      	ldrb	r3, [r3, #16]
 800933c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8009340:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	8adb      	ldrh	r3, [r3, #22]
 8009346:	2b00      	cmp	r3, #0
 8009348:	d00a      	beq.n	8009360 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800934a:	7b7b      	ldrb	r3, [r7, #13]
 800934c:	2b80      	cmp	r3, #128	@ 0x80
 800934e:	d103      	bne.n	8009358 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	2203      	movs	r2, #3
 8009354:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009356:	e11e      	b.n	8009596 <USBH_HandleControl+0x2de>
            phost->Control.state = CTRL_DATA_OUT;
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	2205      	movs	r2, #5
 800935c:	761a      	strb	r2, [r3, #24]
      break;
 800935e:	e11a      	b.n	8009596 <USBH_HandleControl+0x2de>
          if (direction == USB_D2H)
 8009360:	7b7b      	ldrb	r3, [r7, #13]
 8009362:	2b80      	cmp	r3, #128	@ 0x80
 8009364:	d103      	bne.n	800936e <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	2209      	movs	r2, #9
 800936a:	761a      	strb	r2, [r3, #24]
      break;
 800936c:	e113      	b.n	8009596 <USBH_HandleControl+0x2de>
            phost->Control.state = CTRL_STATUS_IN;
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	2207      	movs	r2, #7
 8009372:	761a      	strb	r2, [r3, #24]
      break;
 8009374:	e10f      	b.n	8009596 <USBH_HandleControl+0x2de>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8009376:	7bbb      	ldrb	r3, [r7, #14]
 8009378:	2b04      	cmp	r3, #4
 800937a:	d003      	beq.n	8009384 <USBH_HandleControl+0xcc>
 800937c:	7bbb      	ldrb	r3, [r7, #14]
 800937e:	2b02      	cmp	r3, #2
 8009380:	f040 8109 	bne.w	8009596 <USBH_HandleControl+0x2de>
          phost->Control.state = CTRL_ERROR;
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	220b      	movs	r2, #11
 8009388:	761a      	strb	r2, [r3, #24]
      break;
 800938a:	e104      	b.n	8009596 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009392:	b29a      	uxth	r2, r3
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	6899      	ldr	r1, [r3, #8]
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	899a      	ldrh	r2, [r3, #12]
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	791b      	ldrb	r3, [r3, #4]
 80093a4:	6878      	ldr	r0, [r7, #4]
 80093a6:	f000 f948 	bl	800963a <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	2204      	movs	r2, #4
 80093ae:	761a      	strb	r2, [r3, #24]
      break;
 80093b0:	e0fa      	b.n	80095a8 <USBH_HandleControl+0x2f0>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	791b      	ldrb	r3, [r3, #4]
 80093b6:	4619      	mov	r1, r3
 80093b8:	6878      	ldr	r0, [r7, #4]
 80093ba:	f000 fc97 	bl	8009cec <USBH_LL_GetURBState>
 80093be:	4603      	mov	r3, r0
 80093c0:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80093c2:	7bbb      	ldrb	r3, [r7, #14]
 80093c4:	2b01      	cmp	r3, #1
 80093c6:	d102      	bne.n	80093ce <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	2209      	movs	r2, #9
 80093cc:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80093ce:	7bbb      	ldrb	r3, [r7, #14]
 80093d0:	2b05      	cmp	r3, #5
 80093d2:	d102      	bne.n	80093da <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80093d4:	2303      	movs	r3, #3
 80093d6:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80093d8:	e0df      	b.n	800959a <USBH_HandleControl+0x2e2>
        if (URB_Status == USBH_URB_ERROR)
 80093da:	7bbb      	ldrb	r3, [r7, #14]
 80093dc:	2b04      	cmp	r3, #4
 80093de:	f040 80dc 	bne.w	800959a <USBH_HandleControl+0x2e2>
          phost->Control.state = CTRL_ERROR;
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	220b      	movs	r2, #11
 80093e6:	761a      	strb	r2, [r3, #24]
      break;
 80093e8:	e0d7      	b.n	800959a <USBH_HandleControl+0x2e2>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	6899      	ldr	r1, [r3, #8]
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	899a      	ldrh	r2, [r3, #12]
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	795b      	ldrb	r3, [r3, #5]
 80093f6:	2001      	movs	r0, #1
 80093f8:	9000      	str	r0, [sp, #0]
 80093fa:	6878      	ldr	r0, [r7, #4]
 80093fc:	f000 f8f8 	bl	80095f0 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009406:	b29a      	uxth	r2, r3
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	2206      	movs	r2, #6
 8009410:	761a      	strb	r2, [r3, #24]
      break;
 8009412:	e0c9      	b.n	80095a8 <USBH_HandleControl+0x2f0>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	795b      	ldrb	r3, [r3, #5]
 8009418:	4619      	mov	r1, r3
 800941a:	6878      	ldr	r0, [r7, #4]
 800941c:	f000 fc66 	bl	8009cec <USBH_LL_GetURBState>
 8009420:	4603      	mov	r3, r0
 8009422:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009424:	7bbb      	ldrb	r3, [r7, #14]
 8009426:	2b01      	cmp	r3, #1
 8009428:	d103      	bne.n	8009432 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	2207      	movs	r2, #7
 800942e:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009430:	e0b5      	b.n	800959e <USBH_HandleControl+0x2e6>
      else if (URB_Status == USBH_URB_STALL)
 8009432:	7bbb      	ldrb	r3, [r7, #14]
 8009434:	2b05      	cmp	r3, #5
 8009436:	d105      	bne.n	8009444 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	220c      	movs	r2, #12
 800943c:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800943e:	2303      	movs	r3, #3
 8009440:	73fb      	strb	r3, [r7, #15]
      break;
 8009442:	e0ac      	b.n	800959e <USBH_HandleControl+0x2e6>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009444:	7bbb      	ldrb	r3, [r7, #14]
 8009446:	2b02      	cmp	r3, #2
 8009448:	d103      	bne.n	8009452 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	2205      	movs	r2, #5
 800944e:	761a      	strb	r2, [r3, #24]
      break;
 8009450:	e0a5      	b.n	800959e <USBH_HandleControl+0x2e6>
        if (URB_Status == USBH_URB_ERROR)
 8009452:	7bbb      	ldrb	r3, [r7, #14]
 8009454:	2b04      	cmp	r3, #4
 8009456:	f040 80a2 	bne.w	800959e <USBH_HandleControl+0x2e6>
          phost->Control.state = CTRL_ERROR;
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	220b      	movs	r2, #11
 800945e:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8009460:	2302      	movs	r3, #2
 8009462:	73fb      	strb	r3, [r7, #15]
      break;
 8009464:	e09b      	b.n	800959e <USBH_HandleControl+0x2e6>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	791b      	ldrb	r3, [r3, #4]
 800946a:	2200      	movs	r2, #0
 800946c:	2100      	movs	r1, #0
 800946e:	6878      	ldr	r0, [r7, #4]
 8009470:	f000 f8e3 	bl	800963a <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800947a:	b29a      	uxth	r2, r3
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	2208      	movs	r2, #8
 8009484:	761a      	strb	r2, [r3, #24]

      break;
 8009486:	e08f      	b.n	80095a8 <USBH_HandleControl+0x2f0>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	791b      	ldrb	r3, [r3, #4]
 800948c:	4619      	mov	r1, r3
 800948e:	6878      	ldr	r0, [r7, #4]
 8009490:	f000 fc2c 	bl	8009cec <USBH_LL_GetURBState>
 8009494:	4603      	mov	r3, r0
 8009496:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009498:	7bbb      	ldrb	r3, [r7, #14]
 800949a:	2b01      	cmp	r3, #1
 800949c:	d105      	bne.n	80094aa <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	220d      	movs	r2, #13
 80094a2:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80094a4:	2300      	movs	r3, #0
 80094a6:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80094a8:	e07b      	b.n	80095a2 <USBH_HandleControl+0x2ea>
      else if (URB_Status == USBH_URB_ERROR)
 80094aa:	7bbb      	ldrb	r3, [r7, #14]
 80094ac:	2b04      	cmp	r3, #4
 80094ae:	d103      	bne.n	80094b8 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	220b      	movs	r2, #11
 80094b4:	761a      	strb	r2, [r3, #24]
      break;
 80094b6:	e074      	b.n	80095a2 <USBH_HandleControl+0x2ea>
        if (URB_Status == USBH_URB_STALL)
 80094b8:	7bbb      	ldrb	r3, [r7, #14]
 80094ba:	2b05      	cmp	r3, #5
 80094bc:	d171      	bne.n	80095a2 <USBH_HandleControl+0x2ea>
          status = USBH_NOT_SUPPORTED;
 80094be:	2303      	movs	r3, #3
 80094c0:	73fb      	strb	r3, [r7, #15]
      break;
 80094c2:	e06e      	b.n	80095a2 <USBH_HandleControl+0x2ea>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	795b      	ldrb	r3, [r3, #5]
 80094c8:	2201      	movs	r2, #1
 80094ca:	9200      	str	r2, [sp, #0]
 80094cc:	2200      	movs	r2, #0
 80094ce:	2100      	movs	r1, #0
 80094d0:	6878      	ldr	r0, [r7, #4]
 80094d2:	f000 f88d 	bl	80095f0 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80094dc:	b29a      	uxth	r2, r3
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	220a      	movs	r2, #10
 80094e6:	761a      	strb	r2, [r3, #24]
      break;
 80094e8:	e05e      	b.n	80095a8 <USBH_HandleControl+0x2f0>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	795b      	ldrb	r3, [r3, #5]
 80094ee:	4619      	mov	r1, r3
 80094f0:	6878      	ldr	r0, [r7, #4]
 80094f2:	f000 fbfb 	bl	8009cec <USBH_LL_GetURBState>
 80094f6:	4603      	mov	r3, r0
 80094f8:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 80094fa:	7bbb      	ldrb	r3, [r7, #14]
 80094fc:	2b01      	cmp	r3, #1
 80094fe:	d105      	bne.n	800950c <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8009500:	2300      	movs	r3, #0
 8009502:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	220d      	movs	r2, #13
 8009508:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800950a:	e04c      	b.n	80095a6 <USBH_HandleControl+0x2ee>
      else if (URB_Status == USBH_URB_NOTREADY)
 800950c:	7bbb      	ldrb	r3, [r7, #14]
 800950e:	2b02      	cmp	r3, #2
 8009510:	d103      	bne.n	800951a <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	2209      	movs	r2, #9
 8009516:	761a      	strb	r2, [r3, #24]
      break;
 8009518:	e045      	b.n	80095a6 <USBH_HandleControl+0x2ee>
        if (URB_Status == USBH_URB_ERROR)
 800951a:	7bbb      	ldrb	r3, [r7, #14]
 800951c:	2b04      	cmp	r3, #4
 800951e:	d142      	bne.n	80095a6 <USBH_HandleControl+0x2ee>
          phost->Control.state = CTRL_ERROR;
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	220b      	movs	r2, #11
 8009524:	761a      	strb	r2, [r3, #24]
      break;
 8009526:	e03e      	b.n	80095a6 <USBH_HandleControl+0x2ee>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	7e5b      	ldrb	r3, [r3, #25]
 800952c:	3301      	adds	r3, #1
 800952e:	b2da      	uxtb	r2, r3
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	765a      	strb	r2, [r3, #25]
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	7e5b      	ldrb	r3, [r3, #25]
 8009538:	2b02      	cmp	r3, #2
 800953a:	d806      	bhi.n	800954a <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	2201      	movs	r2, #1
 8009540:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	2201      	movs	r2, #1
 8009546:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8009548:	e02e      	b.n	80095a8 <USBH_HandleControl+0x2f0>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009550:	2106      	movs	r1, #6
 8009552:	6878      	ldr	r0, [r7, #4]
 8009554:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	2200      	movs	r2, #0
 800955a:	765a      	strb	r2, [r3, #25]
        USBH_ErrLog("Control error: Device not responding");
 800955c:	4815      	ldr	r0, [pc, #84]	@ (80095b4 <USBH_HandleControl+0x2fc>)
 800955e:	f000 fdf5 	bl	800a14c <iprintf>
 8009562:	4815      	ldr	r0, [pc, #84]	@ (80095b8 <USBH_HandleControl+0x300>)
 8009564:	f000 fdf2 	bl	800a14c <iprintf>
 8009568:	200a      	movs	r0, #10
 800956a:	f000 fe01 	bl	800a170 <putchar>
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	795b      	ldrb	r3, [r3, #5]
 8009572:	4619      	mov	r1, r3
 8009574:	6878      	ldr	r0, [r7, #4]
 8009576:	f000 f8ed 	bl	8009754 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	791b      	ldrb	r3, [r3, #4]
 800957e:	4619      	mov	r1, r3
 8009580:	6878      	ldr	r0, [r7, #4]
 8009582:	f000 f8e7 	bl	8009754 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	2200      	movs	r2, #0
 800958a:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800958c:	2302      	movs	r3, #2
 800958e:	73fb      	strb	r3, [r7, #15]
      break;
 8009590:	e00a      	b.n	80095a8 <USBH_HandleControl+0x2f0>

    default:
      break;
 8009592:	bf00      	nop
 8009594:	e008      	b.n	80095a8 <USBH_HandleControl+0x2f0>
      break;
 8009596:	bf00      	nop
 8009598:	e006      	b.n	80095a8 <USBH_HandleControl+0x2f0>
      break;
 800959a:	bf00      	nop
 800959c:	e004      	b.n	80095a8 <USBH_HandleControl+0x2f0>
      break;
 800959e:	bf00      	nop
 80095a0:	e002      	b.n	80095a8 <USBH_HandleControl+0x2f0>
      break;
 80095a2:	bf00      	nop
 80095a4:	e000      	b.n	80095a8 <USBH_HandleControl+0x2f0>
      break;
 80095a6:	bf00      	nop
  }

  return status;
 80095a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80095aa:	4618      	mov	r0, r3
 80095ac:	3710      	adds	r7, #16
 80095ae:	46bd      	mov	sp, r7
 80095b0:	bd80      	pop	{r7, pc}
 80095b2:	bf00      	nop
 80095b4:	0800b7fc 	.word	0x0800b7fc
 80095b8:	0800b8d8 	.word	0x0800b8d8

080095bc <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80095bc:	b580      	push	{r7, lr}
 80095be:	b088      	sub	sp, #32
 80095c0:	af04      	add	r7, sp, #16
 80095c2:	60f8      	str	r0, [r7, #12]
 80095c4:	60b9      	str	r1, [r7, #8]
 80095c6:	4613      	mov	r3, r2
 80095c8:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80095ca:	79f9      	ldrb	r1, [r7, #7]
 80095cc:	2300      	movs	r3, #0
 80095ce:	9303      	str	r3, [sp, #12]
 80095d0:	2308      	movs	r3, #8
 80095d2:	9302      	str	r3, [sp, #8]
 80095d4:	68bb      	ldr	r3, [r7, #8]
 80095d6:	9301      	str	r3, [sp, #4]
 80095d8:	2300      	movs	r3, #0
 80095da:	9300      	str	r3, [sp, #0]
 80095dc:	2300      	movs	r3, #0
 80095de:	2200      	movs	r2, #0
 80095e0:	68f8      	ldr	r0, [r7, #12]
 80095e2:	f000 fb52 	bl	8009c8a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 80095e6:	2300      	movs	r3, #0
}
 80095e8:	4618      	mov	r0, r3
 80095ea:	3710      	adds	r7, #16
 80095ec:	46bd      	mov	sp, r7
 80095ee:	bd80      	pop	{r7, pc}

080095f0 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80095f0:	b580      	push	{r7, lr}
 80095f2:	b088      	sub	sp, #32
 80095f4:	af04      	add	r7, sp, #16
 80095f6:	60f8      	str	r0, [r7, #12]
 80095f8:	60b9      	str	r1, [r7, #8]
 80095fa:	4611      	mov	r1, r2
 80095fc:	461a      	mov	r2, r3
 80095fe:	460b      	mov	r3, r1
 8009600:	80fb      	strh	r3, [r7, #6]
 8009602:	4613      	mov	r3, r2
 8009604:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800960c:	2b00      	cmp	r3, #0
 800960e:	d001      	beq.n	8009614 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8009610:	2300      	movs	r3, #0
 8009612:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009614:	7979      	ldrb	r1, [r7, #5]
 8009616:	7e3b      	ldrb	r3, [r7, #24]
 8009618:	9303      	str	r3, [sp, #12]
 800961a:	88fb      	ldrh	r3, [r7, #6]
 800961c:	9302      	str	r3, [sp, #8]
 800961e:	68bb      	ldr	r3, [r7, #8]
 8009620:	9301      	str	r3, [sp, #4]
 8009622:	2301      	movs	r3, #1
 8009624:	9300      	str	r3, [sp, #0]
 8009626:	2300      	movs	r3, #0
 8009628:	2200      	movs	r2, #0
 800962a:	68f8      	ldr	r0, [r7, #12]
 800962c:	f000 fb2d 	bl	8009c8a <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8009630:	2300      	movs	r3, #0
}
 8009632:	4618      	mov	r0, r3
 8009634:	3710      	adds	r7, #16
 8009636:	46bd      	mov	sp, r7
 8009638:	bd80      	pop	{r7, pc}

0800963a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800963a:	b580      	push	{r7, lr}
 800963c:	b088      	sub	sp, #32
 800963e:	af04      	add	r7, sp, #16
 8009640:	60f8      	str	r0, [r7, #12]
 8009642:	60b9      	str	r1, [r7, #8]
 8009644:	4611      	mov	r1, r2
 8009646:	461a      	mov	r2, r3
 8009648:	460b      	mov	r3, r1
 800964a:	80fb      	strh	r3, [r7, #6]
 800964c:	4613      	mov	r3, r2
 800964e:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009650:	7979      	ldrb	r1, [r7, #5]
 8009652:	2300      	movs	r3, #0
 8009654:	9303      	str	r3, [sp, #12]
 8009656:	88fb      	ldrh	r3, [r7, #6]
 8009658:	9302      	str	r3, [sp, #8]
 800965a:	68bb      	ldr	r3, [r7, #8]
 800965c:	9301      	str	r3, [sp, #4]
 800965e:	2301      	movs	r3, #1
 8009660:	9300      	str	r3, [sp, #0]
 8009662:	2300      	movs	r3, #0
 8009664:	2201      	movs	r2, #1
 8009666:	68f8      	ldr	r0, [r7, #12]
 8009668:	f000 fb0f 	bl	8009c8a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800966c:	2300      	movs	r3, #0

}
 800966e:	4618      	mov	r0, r3
 8009670:	3710      	adds	r7, #16
 8009672:	46bd      	mov	sp, r7
 8009674:	bd80      	pop	{r7, pc}

08009676 <USBH_InterruptReceiveData>:
  */
USBH_StatusTypeDef USBH_InterruptReceiveData(USBH_HandleTypeDef *phost,
                                             uint8_t *buff,
                                             uint8_t length,
                                             uint8_t pipe_num)
{
 8009676:	b580      	push	{r7, lr}
 8009678:	b088      	sub	sp, #32
 800967a:	af04      	add	r7, sp, #16
 800967c:	60f8      	str	r0, [r7, #12]
 800967e:	60b9      	str	r1, [r7, #8]
 8009680:	4611      	mov	r1, r2
 8009682:	461a      	mov	r2, r3
 8009684:	460b      	mov	r3, r1
 8009686:	71fb      	strb	r3, [r7, #7]
 8009688:	4613      	mov	r3, r2
 800968a:	71bb      	strb	r3, [r7, #6]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800968c:	79fb      	ldrb	r3, [r7, #7]
 800968e:	b29b      	uxth	r3, r3
 8009690:	79b9      	ldrb	r1, [r7, #6]
 8009692:	2200      	movs	r2, #0
 8009694:	9203      	str	r2, [sp, #12]
 8009696:	9302      	str	r3, [sp, #8]
 8009698:	68bb      	ldr	r3, [r7, #8]
 800969a:	9301      	str	r3, [sp, #4]
 800969c:	2301      	movs	r3, #1
 800969e:	9300      	str	r3, [sp, #0]
 80096a0:	2303      	movs	r3, #3
 80096a2:	2201      	movs	r2, #1
 80096a4:	68f8      	ldr	r0, [r7, #12]
 80096a6:	f000 faf0 	bl	8009c8a <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          (uint16_t)length,     /* data length      */
                          0U);

  return USBH_OK;
 80096aa:	2300      	movs	r3, #0
}
 80096ac:	4618      	mov	r0, r3
 80096ae:	3710      	adds	r7, #16
 80096b0:	46bd      	mov	sp, r7
 80096b2:	bd80      	pop	{r7, pc}

080096b4 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80096b4:	b580      	push	{r7, lr}
 80096b6:	b086      	sub	sp, #24
 80096b8:	af04      	add	r7, sp, #16
 80096ba:	6078      	str	r0, [r7, #4]
 80096bc:	4608      	mov	r0, r1
 80096be:	4611      	mov	r1, r2
 80096c0:	461a      	mov	r2, r3
 80096c2:	4603      	mov	r3, r0
 80096c4:	70fb      	strb	r3, [r7, #3]
 80096c6:	460b      	mov	r3, r1
 80096c8:	70bb      	strb	r3, [r7, #2]
 80096ca:	4613      	mov	r3, r2
 80096cc:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 80096ce:	7878      	ldrb	r0, [r7, #1]
 80096d0:	78ba      	ldrb	r2, [r7, #2]
 80096d2:	78f9      	ldrb	r1, [r7, #3]
 80096d4:	8b3b      	ldrh	r3, [r7, #24]
 80096d6:	9302      	str	r3, [sp, #8]
 80096d8:	7d3b      	ldrb	r3, [r7, #20]
 80096da:	9301      	str	r3, [sp, #4]
 80096dc:	7c3b      	ldrb	r3, [r7, #16]
 80096de:	9300      	str	r3, [sp, #0]
 80096e0:	4603      	mov	r3, r0
 80096e2:	6878      	ldr	r0, [r7, #4]
 80096e4:	f000 fa83 	bl	8009bee <USBH_LL_OpenPipe>

  return USBH_OK;
 80096e8:	2300      	movs	r3, #0
}
 80096ea:	4618      	mov	r0, r3
 80096ec:	3708      	adds	r7, #8
 80096ee:	46bd      	mov	sp, r7
 80096f0:	bd80      	pop	{r7, pc}

080096f2 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 80096f2:	b580      	push	{r7, lr}
 80096f4:	b082      	sub	sp, #8
 80096f6:	af00      	add	r7, sp, #0
 80096f8:	6078      	str	r0, [r7, #4]
 80096fa:	460b      	mov	r3, r1
 80096fc:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 80096fe:	78fb      	ldrb	r3, [r7, #3]
 8009700:	4619      	mov	r1, r3
 8009702:	6878      	ldr	r0, [r7, #4]
 8009704:	f000 faa2 	bl	8009c4c <USBH_LL_ClosePipe>

  return USBH_OK;
 8009708:	2300      	movs	r3, #0
}
 800970a:	4618      	mov	r0, r3
 800970c:	3708      	adds	r7, #8
 800970e:	46bd      	mov	sp, r7
 8009710:	bd80      	pop	{r7, pc}

08009712 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8009712:	b580      	push	{r7, lr}
 8009714:	b084      	sub	sp, #16
 8009716:	af00      	add	r7, sp, #0
 8009718:	6078      	str	r0, [r7, #4]
 800971a:	460b      	mov	r3, r1
 800971c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800971e:	6878      	ldr	r0, [r7, #4]
 8009720:	f000 f836 	bl	8009790 <USBH_GetFreePipe>
 8009724:	4603      	mov	r3, r0
 8009726:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8009728:	89fb      	ldrh	r3, [r7, #14]
 800972a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800972e:	4293      	cmp	r3, r2
 8009730:	d00a      	beq.n	8009748 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8009732:	78fa      	ldrb	r2, [r7, #3]
 8009734:	89fb      	ldrh	r3, [r7, #14]
 8009736:	f003 030f 	and.w	r3, r3, #15
 800973a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800973e:	6879      	ldr	r1, [r7, #4]
 8009740:	33e0      	adds	r3, #224	@ 0xe0
 8009742:	009b      	lsls	r3, r3, #2
 8009744:	440b      	add	r3, r1
 8009746:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8009748:	89fb      	ldrh	r3, [r7, #14]
 800974a:	b2db      	uxtb	r3, r3
}
 800974c:	4618      	mov	r0, r3
 800974e:	3710      	adds	r7, #16
 8009750:	46bd      	mov	sp, r7
 8009752:	bd80      	pop	{r7, pc}

08009754 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8009754:	b480      	push	{r7}
 8009756:	b083      	sub	sp, #12
 8009758:	af00      	add	r7, sp, #0
 800975a:	6078      	str	r0, [r7, #4]
 800975c:	460b      	mov	r3, r1
 800975e:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8009760:	78fb      	ldrb	r3, [r7, #3]
 8009762:	2b0f      	cmp	r3, #15
 8009764:	d80d      	bhi.n	8009782 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8009766:	78fb      	ldrb	r3, [r7, #3]
 8009768:	687a      	ldr	r2, [r7, #4]
 800976a:	33e0      	adds	r3, #224	@ 0xe0
 800976c:	009b      	lsls	r3, r3, #2
 800976e:	4413      	add	r3, r2
 8009770:	685a      	ldr	r2, [r3, #4]
 8009772:	78fb      	ldrb	r3, [r7, #3]
 8009774:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8009778:	6879      	ldr	r1, [r7, #4]
 800977a:	33e0      	adds	r3, #224	@ 0xe0
 800977c:	009b      	lsls	r3, r3, #2
 800977e:	440b      	add	r3, r1
 8009780:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8009782:	2300      	movs	r3, #0
}
 8009784:	4618      	mov	r0, r3
 8009786:	370c      	adds	r7, #12
 8009788:	46bd      	mov	sp, r7
 800978a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800978e:	4770      	bx	lr

08009790 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8009790:	b480      	push	{r7}
 8009792:	b085      	sub	sp, #20
 8009794:	af00      	add	r7, sp, #0
 8009796:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8009798:	2300      	movs	r3, #0
 800979a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800979c:	2300      	movs	r3, #0
 800979e:	73fb      	strb	r3, [r7, #15]
 80097a0:	e00f      	b.n	80097c2 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80097a2:	7bfb      	ldrb	r3, [r7, #15]
 80097a4:	687a      	ldr	r2, [r7, #4]
 80097a6:	33e0      	adds	r3, #224	@ 0xe0
 80097a8:	009b      	lsls	r3, r3, #2
 80097aa:	4413      	add	r3, r2
 80097ac:	685b      	ldr	r3, [r3, #4]
 80097ae:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d102      	bne.n	80097bc <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 80097b6:	7bfb      	ldrb	r3, [r7, #15]
 80097b8:	b29b      	uxth	r3, r3
 80097ba:	e007      	b.n	80097cc <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 80097bc:	7bfb      	ldrb	r3, [r7, #15]
 80097be:	3301      	adds	r3, #1
 80097c0:	73fb      	strb	r3, [r7, #15]
 80097c2:	7bfb      	ldrb	r3, [r7, #15]
 80097c4:	2b0f      	cmp	r3, #15
 80097c6:	d9ec      	bls.n	80097a2 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 80097c8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 80097cc:	4618      	mov	r0, r3
 80097ce:	3714      	adds	r7, #20
 80097d0:	46bd      	mov	sp, r7
 80097d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d6:	4770      	bx	lr

080097d8 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80097d8:	b580      	push	{r7, lr}
 80097da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 80097dc:	2201      	movs	r2, #1
 80097de:	490e      	ldr	r1, [pc, #56]	@ (8009818 <MX_USB_HOST_Init+0x40>)
 80097e0:	480e      	ldr	r0, [pc, #56]	@ (800981c <MX_USB_HOST_Init+0x44>)
 80097e2:	f7fd fbcd 	bl	8006f80 <USBH_Init>
 80097e6:	4603      	mov	r3, r0
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d001      	beq.n	80097f0 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 80097ec:	f7f7 f8e6 	bl	80009bc <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_HID_CLASS) != USBH_OK)
 80097f0:	490b      	ldr	r1, [pc, #44]	@ (8009820 <MX_USB_HOST_Init+0x48>)
 80097f2:	480a      	ldr	r0, [pc, #40]	@ (800981c <MX_USB_HOST_Init+0x44>)
 80097f4:	f7fd fc80 	bl	80070f8 <USBH_RegisterClass>
 80097f8:	4603      	mov	r3, r0
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d001      	beq.n	8009802 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80097fe:	f7f7 f8dd 	bl	80009bc <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8009802:	4806      	ldr	r0, [pc, #24]	@ (800981c <MX_USB_HOST_Init+0x44>)
 8009804:	f7fd fe3e 	bl	8007484 <USBH_Start>
 8009808:	4603      	mov	r3, r0
 800980a:	2b00      	cmp	r3, #0
 800980c:	d001      	beq.n	8009812 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800980e:	f7f7 f8d5 	bl	80009bc <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8009812:	bf00      	nop
 8009814:	bd80      	pop	{r7, pc}
 8009816:	bf00      	nop
 8009818:	08009839 	.word	0x08009839
 800981c:	20000580 	.word	0x20000580
 8009820:	2000000c 	.word	0x2000000c

08009824 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8009824:	b580      	push	{r7, lr}
 8009826:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8009828:	4802      	ldr	r0, [pc, #8]	@ (8009834 <MX_USB_HOST_Process+0x10>)
 800982a:	f7fd fe3b 	bl	80074a4 <USBH_Process>
}
 800982e:	bf00      	nop
 8009830:	bd80      	pop	{r7, pc}
 8009832:	bf00      	nop
 8009834:	20000580 	.word	0x20000580

08009838 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8009838:	b480      	push	{r7}
 800983a:	b083      	sub	sp, #12
 800983c:	af00      	add	r7, sp, #0
 800983e:	6078      	str	r0, [r7, #4]
 8009840:	460b      	mov	r3, r1
 8009842:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8009844:	78fb      	ldrb	r3, [r7, #3]
 8009846:	3b01      	subs	r3, #1
 8009848:	2b04      	cmp	r3, #4
 800984a:	d819      	bhi.n	8009880 <USBH_UserProcess+0x48>
 800984c:	a201      	add	r2, pc, #4	@ (adr r2, 8009854 <USBH_UserProcess+0x1c>)
 800984e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009852:	bf00      	nop
 8009854:	08009881 	.word	0x08009881
 8009858:	08009871 	.word	0x08009871
 800985c:	08009881 	.word	0x08009881
 8009860:	08009879 	.word	0x08009879
 8009864:	08009869 	.word	0x08009869
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8009868:	4b09      	ldr	r3, [pc, #36]	@ (8009890 <USBH_UserProcess+0x58>)
 800986a:	2203      	movs	r2, #3
 800986c:	701a      	strb	r2, [r3, #0]
  break;
 800986e:	e008      	b.n	8009882 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8009870:	4b07      	ldr	r3, [pc, #28]	@ (8009890 <USBH_UserProcess+0x58>)
 8009872:	2202      	movs	r2, #2
 8009874:	701a      	strb	r2, [r3, #0]
  break;
 8009876:	e004      	b.n	8009882 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8009878:	4b05      	ldr	r3, [pc, #20]	@ (8009890 <USBH_UserProcess+0x58>)
 800987a:	2201      	movs	r2, #1
 800987c:	701a      	strb	r2, [r3, #0]
  break;
 800987e:	e000      	b.n	8009882 <USBH_UserProcess+0x4a>

  default:
  break;
 8009880:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8009882:	bf00      	nop
 8009884:	370c      	adds	r7, #12
 8009886:	46bd      	mov	sp, r7
 8009888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800988c:	4770      	bx	lr
 800988e:	bf00      	nop
 8009890:	20000958 	.word	0x20000958

08009894 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8009894:	b580      	push	{r7, lr}
 8009896:	b0ae      	sub	sp, #184	@ 0xb8
 8009898:	af00      	add	r7, sp, #0
 800989a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800989c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80098a0:	2200      	movs	r2, #0
 80098a2:	601a      	str	r2, [r3, #0]
 80098a4:	605a      	str	r2, [r3, #4]
 80098a6:	609a      	str	r2, [r3, #8]
 80098a8:	60da      	str	r2, [r3, #12]
 80098aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80098ac:	f107 0318 	add.w	r3, r7, #24
 80098b0:	228c      	movs	r2, #140	@ 0x8c
 80098b2:	2100      	movs	r1, #0
 80098b4:	4618      	mov	r0, r3
 80098b6:	f000 fcc6 	bl	800a246 <memset>
  if(hcdHandle->Instance==USB_OTG_FS)
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80098c2:	d173      	bne.n	80099ac <HAL_HCD_MspInit+0x118>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80098c4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80098c8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80098ca:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80098ce:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80098d2:	2301      	movs	r3, #1
 80098d4:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 5;
 80098d6:	2305      	movs	r3, #5
 80098d8:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 20;
 80098da:	2314      	movs	r3, #20
 80098dc:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 80098de:	2302      	movs	r3, #2
 80098e0:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80098e2:	2302      	movs	r3, #2
 80098e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80098e6:	2302      	movs	r3, #2
 80098e8:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 80098ea:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80098ee:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80098f0:	f107 0318 	add.w	r3, r7, #24
 80098f4:	4618      	mov	r0, r3
 80098f6:	f7fa f903 	bl	8003b00 <HAL_RCCEx_PeriphCLKConfig>
 80098fa:	4603      	mov	r3, r0
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d001      	beq.n	8009904 <HAL_HCD_MspInit+0x70>
    {
      Error_Handler();
 8009900:	f7f7 f85c 	bl	80009bc <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009904:	4b2b      	ldr	r3, [pc, #172]	@ (80099b4 <HAL_HCD_MspInit+0x120>)
 8009906:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009908:	4a2a      	ldr	r2, [pc, #168]	@ (80099b4 <HAL_HCD_MspInit+0x120>)
 800990a:	f043 0301 	orr.w	r3, r3, #1
 800990e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009910:	4b28      	ldr	r3, [pc, #160]	@ (80099b4 <HAL_HCD_MspInit+0x120>)
 8009912:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009914:	f003 0301 	and.w	r3, r3, #1
 8009918:	617b      	str	r3, [r7, #20]
 800991a:	697b      	ldr	r3, [r7, #20]
    PA8     ------> USB_OTG_FS_SOF
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800991c:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8009920:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009924:	2302      	movs	r3, #2
 8009926:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800992a:	2300      	movs	r3, #0
 800992c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009930:	2303      	movs	r3, #3
 8009932:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009936:	230a      	movs	r3, #10
 8009938:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800993c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8009940:	4619      	mov	r1, r3
 8009942:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8009946:	f7f7 fb87 	bl	8001058 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800994a:	4b1a      	ldr	r3, [pc, #104]	@ (80099b4 <HAL_HCD_MspInit+0x120>)
 800994c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800994e:	4a19      	ldr	r2, [pc, #100]	@ (80099b4 <HAL_HCD_MspInit+0x120>)
 8009950:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8009954:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009956:	4b17      	ldr	r3, [pc, #92]	@ (80099b4 <HAL_HCD_MspInit+0x120>)
 8009958:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800995a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800995e:	613b      	str	r3, [r7, #16]
 8009960:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009962:	4b14      	ldr	r3, [pc, #80]	@ (80099b4 <HAL_HCD_MspInit+0x120>)
 8009964:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009966:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800996a:	2b00      	cmp	r3, #0
 800996c:	d114      	bne.n	8009998 <HAL_HCD_MspInit+0x104>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800996e:	4b11      	ldr	r3, [pc, #68]	@ (80099b4 <HAL_HCD_MspInit+0x120>)
 8009970:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009972:	4a10      	ldr	r2, [pc, #64]	@ (80099b4 <HAL_HCD_MspInit+0x120>)
 8009974:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009978:	6593      	str	r3, [r2, #88]	@ 0x58
 800997a:	4b0e      	ldr	r3, [pc, #56]	@ (80099b4 <HAL_HCD_MspInit+0x120>)
 800997c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800997e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009982:	60fb      	str	r3, [r7, #12]
 8009984:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 8009986:	f7f9 fa5d 	bl	8002e44 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800998a:	4b0a      	ldr	r3, [pc, #40]	@ (80099b4 <HAL_HCD_MspInit+0x120>)
 800998c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800998e:	4a09      	ldr	r2, [pc, #36]	@ (80099b4 <HAL_HCD_MspInit+0x120>)
 8009990:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009994:	6593      	str	r3, [r2, #88]	@ 0x58
 8009996:	e001      	b.n	800999c <HAL_HCD_MspInit+0x108>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 8009998:	f7f9 fa54 	bl	8002e44 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800999c:	2200      	movs	r2, #0
 800999e:	2100      	movs	r1, #0
 80099a0:	2043      	movs	r0, #67	@ 0x43
 80099a2:	f7f7 fb22 	bl	8000fea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80099a6:	2043      	movs	r0, #67	@ 0x43
 80099a8:	f7f7 fb3b 	bl	8001022 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80099ac:	bf00      	nop
 80099ae:	37b8      	adds	r7, #184	@ 0xb8
 80099b0:	46bd      	mov	sp, r7
 80099b2:	bd80      	pop	{r7, pc}
 80099b4:	40021000 	.word	0x40021000

080099b8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80099b8:	b580      	push	{r7, lr}
 80099ba:	b082      	sub	sp, #8
 80099bc:	af00      	add	r7, sp, #0
 80099be:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 80099c6:	4618      	mov	r0, r3
 80099c8:	f7fe ff2f 	bl	800882a <USBH_LL_IncTimer>
}
 80099cc:	bf00      	nop
 80099ce:	3708      	adds	r7, #8
 80099d0:	46bd      	mov	sp, r7
 80099d2:	bd80      	pop	{r7, pc}

080099d4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80099d4:	b580      	push	{r7, lr}
 80099d6:	b082      	sub	sp, #8
 80099d8:	af00      	add	r7, sp, #0
 80099da:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 80099e2:	4618      	mov	r0, r3
 80099e4:	f7fe ff67 	bl	80088b6 <USBH_LL_Connect>
}
 80099e8:	bf00      	nop
 80099ea:	3708      	adds	r7, #8
 80099ec:	46bd      	mov	sp, r7
 80099ee:	bd80      	pop	{r7, pc}

080099f0 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80099f0:	b580      	push	{r7, lr}
 80099f2:	b082      	sub	sp, #8
 80099f4:	af00      	add	r7, sp, #0
 80099f6:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 80099fe:	4618      	mov	r0, r3
 8009a00:	f7fe ff70 	bl	80088e4 <USBH_LL_Disconnect>
}
 8009a04:	bf00      	nop
 8009a06:	3708      	adds	r7, #8
 8009a08:	46bd      	mov	sp, r7
 8009a0a:	bd80      	pop	{r7, pc}

08009a0c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8009a0c:	b480      	push	{r7}
 8009a0e:	b083      	sub	sp, #12
 8009a10:	af00      	add	r7, sp, #0
 8009a12:	6078      	str	r0, [r7, #4]
 8009a14:	460b      	mov	r3, r1
 8009a16:	70fb      	strb	r3, [r7, #3]
 8009a18:	4613      	mov	r3, r2
 8009a1a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8009a1c:	bf00      	nop
 8009a1e:	370c      	adds	r7, #12
 8009a20:	46bd      	mov	sp, r7
 8009a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a26:	4770      	bx	lr

08009a28 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009a28:	b580      	push	{r7, lr}
 8009a2a:	b082      	sub	sp, #8
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8009a36:	4618      	mov	r0, r3
 8009a38:	f7fe ff21 	bl	800887e <USBH_LL_PortEnabled>
}
 8009a3c:	bf00      	nop
 8009a3e:	3708      	adds	r7, #8
 8009a40:	46bd      	mov	sp, r7
 8009a42:	bd80      	pop	{r7, pc}

08009a44 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009a44:	b580      	push	{r7, lr}
 8009a46:	b082      	sub	sp, #8
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8009a52:	4618      	mov	r0, r3
 8009a54:	f7fe ff21 	bl	800889a <USBH_LL_PortDisabled>
}
 8009a58:	bf00      	nop
 8009a5a:	3708      	adds	r7, #8
 8009a5c:	46bd      	mov	sp, r7
 8009a5e:	bd80      	pop	{r7, pc}

08009a60 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8009a60:	b580      	push	{r7, lr}
 8009a62:	b082      	sub	sp, #8
 8009a64:	af00      	add	r7, sp, #0
 8009a66:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8009a6e:	2b01      	cmp	r3, #1
 8009a70:	d12a      	bne.n	8009ac8 <USBH_LL_Init+0x68>
  /* Enable USB power on Pwrctrl CR2 register */
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8009a72:	4a18      	ldr	r2, [pc, #96]	@ (8009ad4 <USBH_LL_Init+0x74>)
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
  phost->pData = &hhcd_USB_OTG_FS;
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	4a15      	ldr	r2, [pc, #84]	@ (8009ad4 <USBH_LL_Init+0x74>)
 8009a7e:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009a82:	4b14      	ldr	r3, [pc, #80]	@ (8009ad4 <USBH_LL_Init+0x74>)
 8009a84:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8009a88:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 12;
 8009a8a:	4b12      	ldr	r3, [pc, #72]	@ (8009ad4 <USBH_LL_Init+0x74>)
 8009a8c:	220c      	movs	r2, #12
 8009a8e:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8009a90:	4b10      	ldr	r3, [pc, #64]	@ (8009ad4 <USBH_LL_Init+0x74>)
 8009a92:	2201      	movs	r2, #1
 8009a94:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009a96:	4b0f      	ldr	r3, [pc, #60]	@ (8009ad4 <USBH_LL_Init+0x74>)
 8009a98:	2200      	movs	r2, #0
 8009a9a:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8009a9c:	4b0d      	ldr	r3, [pc, #52]	@ (8009ad4 <USBH_LL_Init+0x74>)
 8009a9e:	2202      	movs	r2, #2
 8009aa0:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009aa2:	4b0c      	ldr	r3, [pc, #48]	@ (8009ad4 <USBH_LL_Init+0x74>)
 8009aa4:	2200      	movs	r2, #0
 8009aa6:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8009aa8:	480a      	ldr	r0, [pc, #40]	@ (8009ad4 <USBH_LL_Init+0x74>)
 8009aaa:	f7f7 fc99 	bl	80013e0 <HAL_HCD_Init>
 8009aae:	4603      	mov	r3, r0
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d001      	beq.n	8009ab8 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8009ab4:	f7f6 ff82 	bl	80009bc <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8009ab8:	4806      	ldr	r0, [pc, #24]	@ (8009ad4 <USBH_LL_Init+0x74>)
 8009aba:	f7f8 f8ae 	bl	8001c1a <HAL_HCD_GetCurrentFrame>
 8009abe:	4603      	mov	r3, r0
 8009ac0:	4619      	mov	r1, r3
 8009ac2:	6878      	ldr	r0, [r7, #4]
 8009ac4:	f7fe fea2 	bl	800880c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8009ac8:	2300      	movs	r3, #0
}
 8009aca:	4618      	mov	r0, r3
 8009acc:	3708      	adds	r7, #8
 8009ace:	46bd      	mov	sp, r7
 8009ad0:	bd80      	pop	{r7, pc}
 8009ad2:	bf00      	nop
 8009ad4:	2000095c 	.word	0x2000095c

08009ad8 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8009ad8:	b580      	push	{r7, lr}
 8009ada:	b084      	sub	sp, #16
 8009adc:	af00      	add	r7, sp, #0
 8009ade:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ae0:	2300      	movs	r3, #0
 8009ae2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009ae4:	2300      	movs	r3, #0
 8009ae6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009aee:	4618      	mov	r0, r3
 8009af0:	f7f8 f81b 	bl	8001b2a <HAL_HCD_Start>
 8009af4:	4603      	mov	r3, r0
 8009af6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009af8:	7bfb      	ldrb	r3, [r7, #15]
 8009afa:	4618      	mov	r0, r3
 8009afc:	f000 f95e 	bl	8009dbc <USBH_Get_USB_Status>
 8009b00:	4603      	mov	r3, r0
 8009b02:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009b04:	7bbb      	ldrb	r3, [r7, #14]
}
 8009b06:	4618      	mov	r0, r3
 8009b08:	3710      	adds	r7, #16
 8009b0a:	46bd      	mov	sp, r7
 8009b0c:	bd80      	pop	{r7, pc}

08009b0e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8009b0e:	b580      	push	{r7, lr}
 8009b10:	b084      	sub	sp, #16
 8009b12:	af00      	add	r7, sp, #0
 8009b14:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b16:	2300      	movs	r3, #0
 8009b18:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009b1a:	2300      	movs	r3, #0
 8009b1c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009b24:	4618      	mov	r0, r3
 8009b26:	f7f8 f823 	bl	8001b70 <HAL_HCD_Stop>
 8009b2a:	4603      	mov	r3, r0
 8009b2c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009b2e:	7bfb      	ldrb	r3, [r7, #15]
 8009b30:	4618      	mov	r0, r3
 8009b32:	f000 f943 	bl	8009dbc <USBH_Get_USB_Status>
 8009b36:	4603      	mov	r3, r0
 8009b38:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009b3a:	7bbb      	ldrb	r3, [r7, #14]
}
 8009b3c:	4618      	mov	r0, r3
 8009b3e:	3710      	adds	r7, #16
 8009b40:	46bd      	mov	sp, r7
 8009b42:	bd80      	pop	{r7, pc}

08009b44 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8009b44:	b580      	push	{r7, lr}
 8009b46:	b084      	sub	sp, #16
 8009b48:	af00      	add	r7, sp, #0
 8009b4a:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8009b4c:	2301      	movs	r3, #1
 8009b4e:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009b56:	4618      	mov	r0, r3
 8009b58:	f7f8 f86d 	bl	8001c36 <HAL_HCD_GetCurrentSpeed>
 8009b5c:	4603      	mov	r3, r0
 8009b5e:	2b02      	cmp	r3, #2
 8009b60:	d00c      	beq.n	8009b7c <USBH_LL_GetSpeed+0x38>
 8009b62:	2b02      	cmp	r3, #2
 8009b64:	d80d      	bhi.n	8009b82 <USBH_LL_GetSpeed+0x3e>
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d002      	beq.n	8009b70 <USBH_LL_GetSpeed+0x2c>
 8009b6a:	2b01      	cmp	r3, #1
 8009b6c:	d003      	beq.n	8009b76 <USBH_LL_GetSpeed+0x32>
 8009b6e:	e008      	b.n	8009b82 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8009b70:	2300      	movs	r3, #0
 8009b72:	73fb      	strb	r3, [r7, #15]
    break;
 8009b74:	e008      	b.n	8009b88 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8009b76:	2301      	movs	r3, #1
 8009b78:	73fb      	strb	r3, [r7, #15]
    break;
 8009b7a:	e005      	b.n	8009b88 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8009b7c:	2302      	movs	r3, #2
 8009b7e:	73fb      	strb	r3, [r7, #15]
    break;
 8009b80:	e002      	b.n	8009b88 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8009b82:	2301      	movs	r3, #1
 8009b84:	73fb      	strb	r3, [r7, #15]
    break;
 8009b86:	bf00      	nop
  }
  return  speed;
 8009b88:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b8a:	4618      	mov	r0, r3
 8009b8c:	3710      	adds	r7, #16
 8009b8e:	46bd      	mov	sp, r7
 8009b90:	bd80      	pop	{r7, pc}

08009b92 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8009b92:	b580      	push	{r7, lr}
 8009b94:	b084      	sub	sp, #16
 8009b96:	af00      	add	r7, sp, #0
 8009b98:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b9a:	2300      	movs	r3, #0
 8009b9c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009b9e:	2300      	movs	r3, #0
 8009ba0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009ba8:	4618      	mov	r0, r3
 8009baa:	f7f7 fffe 	bl	8001baa <HAL_HCD_ResetPort>
 8009bae:	4603      	mov	r3, r0
 8009bb0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009bb2:	7bfb      	ldrb	r3, [r7, #15]
 8009bb4:	4618      	mov	r0, r3
 8009bb6:	f000 f901 	bl	8009dbc <USBH_Get_USB_Status>
 8009bba:	4603      	mov	r3, r0
 8009bbc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009bbe:	7bbb      	ldrb	r3, [r7, #14]
}
 8009bc0:	4618      	mov	r0, r3
 8009bc2:	3710      	adds	r7, #16
 8009bc4:	46bd      	mov	sp, r7
 8009bc6:	bd80      	pop	{r7, pc}

08009bc8 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009bc8:	b580      	push	{r7, lr}
 8009bca:	b082      	sub	sp, #8
 8009bcc:	af00      	add	r7, sp, #0
 8009bce:	6078      	str	r0, [r7, #4]
 8009bd0:	460b      	mov	r3, r1
 8009bd2:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009bda:	78fa      	ldrb	r2, [r7, #3]
 8009bdc:	4611      	mov	r1, r2
 8009bde:	4618      	mov	r0, r3
 8009be0:	f7f8 f806 	bl	8001bf0 <HAL_HCD_HC_GetXferCount>
 8009be4:	4603      	mov	r3, r0
}
 8009be6:	4618      	mov	r0, r3
 8009be8:	3708      	adds	r7, #8
 8009bea:	46bd      	mov	sp, r7
 8009bec:	bd80      	pop	{r7, pc}

08009bee <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009bee:	b590      	push	{r4, r7, lr}
 8009bf0:	b089      	sub	sp, #36	@ 0x24
 8009bf2:	af04      	add	r7, sp, #16
 8009bf4:	6078      	str	r0, [r7, #4]
 8009bf6:	4608      	mov	r0, r1
 8009bf8:	4611      	mov	r1, r2
 8009bfa:	461a      	mov	r2, r3
 8009bfc:	4603      	mov	r3, r0
 8009bfe:	70fb      	strb	r3, [r7, #3]
 8009c00:	460b      	mov	r3, r1
 8009c02:	70bb      	strb	r3, [r7, #2]
 8009c04:	4613      	mov	r3, r2
 8009c06:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c08:	2300      	movs	r3, #0
 8009c0a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009c0c:	2300      	movs	r3, #0
 8009c0e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 8009c16:	787c      	ldrb	r4, [r7, #1]
 8009c18:	78ba      	ldrb	r2, [r7, #2]
 8009c1a:	78f9      	ldrb	r1, [r7, #3]
 8009c1c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8009c1e:	9302      	str	r3, [sp, #8]
 8009c20:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009c24:	9301      	str	r3, [sp, #4]
 8009c26:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009c2a:	9300      	str	r3, [sp, #0]
 8009c2c:	4623      	mov	r3, r4
 8009c2e:	f7f7 fc39 	bl	80014a4 <HAL_HCD_HC_Init>
 8009c32:	4603      	mov	r3, r0
 8009c34:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8009c36:	7bfb      	ldrb	r3, [r7, #15]
 8009c38:	4618      	mov	r0, r3
 8009c3a:	f000 f8bf 	bl	8009dbc <USBH_Get_USB_Status>
 8009c3e:	4603      	mov	r3, r0
 8009c40:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009c42:	7bbb      	ldrb	r3, [r7, #14]
}
 8009c44:	4618      	mov	r0, r3
 8009c46:	3714      	adds	r7, #20
 8009c48:	46bd      	mov	sp, r7
 8009c4a:	bd90      	pop	{r4, r7, pc}

08009c4c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009c4c:	b580      	push	{r7, lr}
 8009c4e:	b084      	sub	sp, #16
 8009c50:	af00      	add	r7, sp, #0
 8009c52:	6078      	str	r0, [r7, #4]
 8009c54:	460b      	mov	r3, r1
 8009c56:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c58:	2300      	movs	r3, #0
 8009c5a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009c5c:	2300      	movs	r3, #0
 8009c5e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009c66:	78fa      	ldrb	r2, [r7, #3]
 8009c68:	4611      	mov	r1, r2
 8009c6a:	4618      	mov	r0, r3
 8009c6c:	f7f7 fcbc 	bl	80015e8 <HAL_HCD_HC_Halt>
 8009c70:	4603      	mov	r3, r0
 8009c72:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009c74:	7bfb      	ldrb	r3, [r7, #15]
 8009c76:	4618      	mov	r0, r3
 8009c78:	f000 f8a0 	bl	8009dbc <USBH_Get_USB_Status>
 8009c7c:	4603      	mov	r3, r0
 8009c7e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009c80:	7bbb      	ldrb	r3, [r7, #14]
}
 8009c82:	4618      	mov	r0, r3
 8009c84:	3710      	adds	r7, #16
 8009c86:	46bd      	mov	sp, r7
 8009c88:	bd80      	pop	{r7, pc}

08009c8a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8009c8a:	b590      	push	{r4, r7, lr}
 8009c8c:	b089      	sub	sp, #36	@ 0x24
 8009c8e:	af04      	add	r7, sp, #16
 8009c90:	6078      	str	r0, [r7, #4]
 8009c92:	4608      	mov	r0, r1
 8009c94:	4611      	mov	r1, r2
 8009c96:	461a      	mov	r2, r3
 8009c98:	4603      	mov	r3, r0
 8009c9a:	70fb      	strb	r3, [r7, #3]
 8009c9c:	460b      	mov	r3, r1
 8009c9e:	70bb      	strb	r3, [r7, #2]
 8009ca0:	4613      	mov	r3, r2
 8009ca2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ca4:	2300      	movs	r3, #0
 8009ca6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009ca8:	2300      	movs	r3, #0
 8009caa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 8009cb2:	787c      	ldrb	r4, [r7, #1]
 8009cb4:	78ba      	ldrb	r2, [r7, #2]
 8009cb6:	78f9      	ldrb	r1, [r7, #3]
 8009cb8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8009cbc:	9303      	str	r3, [sp, #12]
 8009cbe:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8009cc0:	9302      	str	r3, [sp, #8]
 8009cc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cc4:	9301      	str	r3, [sp, #4]
 8009cc6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009cca:	9300      	str	r3, [sp, #0]
 8009ccc:	4623      	mov	r3, r4
 8009cce:	f7f7 fcaf 	bl	8001630 <HAL_HCD_HC_SubmitRequest>
 8009cd2:	4603      	mov	r3, r0
 8009cd4:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);

  usb_status = USBH_Get_USB_Status(hal_status);
 8009cd6:	7bfb      	ldrb	r3, [r7, #15]
 8009cd8:	4618      	mov	r0, r3
 8009cda:	f000 f86f 	bl	8009dbc <USBH_Get_USB_Status>
 8009cde:	4603      	mov	r3, r0
 8009ce0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009ce2:	7bbb      	ldrb	r3, [r7, #14]
}
 8009ce4:	4618      	mov	r0, r3
 8009ce6:	3714      	adds	r7, #20
 8009ce8:	46bd      	mov	sp, r7
 8009cea:	bd90      	pop	{r4, r7, pc}

08009cec <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009cec:	b580      	push	{r7, lr}
 8009cee:	b082      	sub	sp, #8
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	6078      	str	r0, [r7, #4]
 8009cf4:	460b      	mov	r3, r1
 8009cf6:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009cfe:	78fa      	ldrb	r2, [r7, #3]
 8009d00:	4611      	mov	r1, r2
 8009d02:	4618      	mov	r0, r3
 8009d04:	f7f7 ff5f 	bl	8001bc6 <HAL_HCD_HC_GetURBState>
 8009d08:	4603      	mov	r3, r0
}
 8009d0a:	4618      	mov	r0, r3
 8009d0c:	3708      	adds	r7, #8
 8009d0e:	46bd      	mov	sp, r7
 8009d10:	bd80      	pop	{r7, pc}

08009d12 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8009d12:	b580      	push	{r7, lr}
 8009d14:	b082      	sub	sp, #8
 8009d16:	af00      	add	r7, sp, #0
 8009d18:	6078      	str	r0, [r7, #4]
 8009d1a:	460b      	mov	r3, r1
 8009d1c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8009d24:	2b01      	cmp	r3, #1
 8009d26:	d103      	bne.n	8009d30 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8009d28:	78fb      	ldrb	r3, [r7, #3]
 8009d2a:	4618      	mov	r0, r3
 8009d2c:	f000 f872 	bl	8009e14 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8009d30:	20c8      	movs	r0, #200	@ 0xc8
 8009d32:	f7f7 f85b 	bl	8000dec <HAL_Delay>
  return USBH_OK;
 8009d36:	2300      	movs	r3, #0
}
 8009d38:	4618      	mov	r0, r3
 8009d3a:	3708      	adds	r7, #8
 8009d3c:	46bd      	mov	sp, r7
 8009d3e:	bd80      	pop	{r7, pc}

08009d40 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8009d40:	b480      	push	{r7}
 8009d42:	b085      	sub	sp, #20
 8009d44:	af00      	add	r7, sp, #0
 8009d46:	6078      	str	r0, [r7, #4]
 8009d48:	460b      	mov	r3, r1
 8009d4a:	70fb      	strb	r3, [r7, #3]
 8009d4c:	4613      	mov	r3, r2
 8009d4e:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009d56:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8009d58:	78fa      	ldrb	r2, [r7, #3]
 8009d5a:	68f9      	ldr	r1, [r7, #12]
 8009d5c:	4613      	mov	r3, r2
 8009d5e:	005b      	lsls	r3, r3, #1
 8009d60:	4413      	add	r3, r2
 8009d62:	011b      	lsls	r3, r3, #4
 8009d64:	440b      	add	r3, r1
 8009d66:	333b      	adds	r3, #59	@ 0x3b
 8009d68:	781b      	ldrb	r3, [r3, #0]
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d00a      	beq.n	8009d84 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8009d6e:	78fa      	ldrb	r2, [r7, #3]
 8009d70:	68f9      	ldr	r1, [r7, #12]
 8009d72:	4613      	mov	r3, r2
 8009d74:	005b      	lsls	r3, r3, #1
 8009d76:	4413      	add	r3, r2
 8009d78:	011b      	lsls	r3, r3, #4
 8009d7a:	440b      	add	r3, r1
 8009d7c:	3358      	adds	r3, #88	@ 0x58
 8009d7e:	78ba      	ldrb	r2, [r7, #2]
 8009d80:	701a      	strb	r2, [r3, #0]
 8009d82:	e009      	b.n	8009d98 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8009d84:	78fa      	ldrb	r2, [r7, #3]
 8009d86:	68f9      	ldr	r1, [r7, #12]
 8009d88:	4613      	mov	r3, r2
 8009d8a:	005b      	lsls	r3, r3, #1
 8009d8c:	4413      	add	r3, r2
 8009d8e:	011b      	lsls	r3, r3, #4
 8009d90:	440b      	add	r3, r1
 8009d92:	3359      	adds	r3, #89	@ 0x59
 8009d94:	78ba      	ldrb	r2, [r7, #2]
 8009d96:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8009d98:	2300      	movs	r3, #0
}
 8009d9a:	4618      	mov	r0, r3
 8009d9c:	3714      	adds	r7, #20
 8009d9e:	46bd      	mov	sp, r7
 8009da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da4:	4770      	bx	lr

08009da6 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8009da6:	b580      	push	{r7, lr}
 8009da8:	b082      	sub	sp, #8
 8009daa:	af00      	add	r7, sp, #0
 8009dac:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8009dae:	6878      	ldr	r0, [r7, #4]
 8009db0:	f7f7 f81c 	bl	8000dec <HAL_Delay>
}
 8009db4:	bf00      	nop
 8009db6:	3708      	adds	r7, #8
 8009db8:	46bd      	mov	sp, r7
 8009dba:	bd80      	pop	{r7, pc}

08009dbc <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009dbc:	b480      	push	{r7}
 8009dbe:	b085      	sub	sp, #20
 8009dc0:	af00      	add	r7, sp, #0
 8009dc2:	4603      	mov	r3, r0
 8009dc4:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009dc6:	2300      	movs	r3, #0
 8009dc8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009dca:	79fb      	ldrb	r3, [r7, #7]
 8009dcc:	2b03      	cmp	r3, #3
 8009dce:	d817      	bhi.n	8009e00 <USBH_Get_USB_Status+0x44>
 8009dd0:	a201      	add	r2, pc, #4	@ (adr r2, 8009dd8 <USBH_Get_USB_Status+0x1c>)
 8009dd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dd6:	bf00      	nop
 8009dd8:	08009de9 	.word	0x08009de9
 8009ddc:	08009def 	.word	0x08009def
 8009de0:	08009df5 	.word	0x08009df5
 8009de4:	08009dfb 	.word	0x08009dfb
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8009de8:	2300      	movs	r3, #0
 8009dea:	73fb      	strb	r3, [r7, #15]
    break;
 8009dec:	e00b      	b.n	8009e06 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8009dee:	2302      	movs	r3, #2
 8009df0:	73fb      	strb	r3, [r7, #15]
    break;
 8009df2:	e008      	b.n	8009e06 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8009df4:	2301      	movs	r3, #1
 8009df6:	73fb      	strb	r3, [r7, #15]
    break;
 8009df8:	e005      	b.n	8009e06 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8009dfa:	2302      	movs	r3, #2
 8009dfc:	73fb      	strb	r3, [r7, #15]
    break;
 8009dfe:	e002      	b.n	8009e06 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8009e00:	2302      	movs	r3, #2
 8009e02:	73fb      	strb	r3, [r7, #15]
    break;
 8009e04:	bf00      	nop
  }
  return usb_status;
 8009e06:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e08:	4618      	mov	r0, r3
 8009e0a:	3714      	adds	r7, #20
 8009e0c:	46bd      	mov	sp, r7
 8009e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e12:	4770      	bx	lr

08009e14 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8009e14:	b580      	push	{r7, lr}
 8009e16:	b084      	sub	sp, #16
 8009e18:	af00      	add	r7, sp, #0
 8009e1a:	4603      	mov	r3, r0
 8009e1c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8009e1e:	79fb      	ldrb	r3, [r7, #7]
 8009e20:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8009e22:	79fb      	ldrb	r3, [r7, #7]
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d102      	bne.n	8009e2e <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8009e28:	2300      	movs	r3, #0
 8009e2a:	73fb      	strb	r3, [r7, #15]
 8009e2c:	e001      	b.n	8009e32 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8009e2e:	2301      	movs	r3, #1
 8009e30:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOG,GPIO_PIN_6,(GPIO_PinState)data);
 8009e32:	7bfb      	ldrb	r3, [r7, #15]
 8009e34:	461a      	mov	r2, r3
 8009e36:	2140      	movs	r1, #64	@ 0x40
 8009e38:	4803      	ldr	r0, [pc, #12]	@ (8009e48 <MX_DriverVbusFS+0x34>)
 8009e3a:	f7f7 fa9f 	bl	800137c <HAL_GPIO_WritePin>
}
 8009e3e:	bf00      	nop
 8009e40:	3710      	adds	r7, #16
 8009e42:	46bd      	mov	sp, r7
 8009e44:	bd80      	pop	{r7, pc}
 8009e46:	bf00      	nop
 8009e48:	48001800 	.word	0x48001800

08009e4c <malloc>:
 8009e4c:	4b02      	ldr	r3, [pc, #8]	@ (8009e58 <malloc+0xc>)
 8009e4e:	4601      	mov	r1, r0
 8009e50:	6818      	ldr	r0, [r3, #0]
 8009e52:	f000 b82d 	b.w	8009eb0 <_malloc_r>
 8009e56:	bf00      	nop
 8009e58:	20000038 	.word	0x20000038

08009e5c <free>:
 8009e5c:	4b02      	ldr	r3, [pc, #8]	@ (8009e68 <free+0xc>)
 8009e5e:	4601      	mov	r1, r0
 8009e60:	6818      	ldr	r0, [r3, #0]
 8009e62:	f000 ba7d 	b.w	800a360 <_free_r>
 8009e66:	bf00      	nop
 8009e68:	20000038 	.word	0x20000038

08009e6c <sbrk_aligned>:
 8009e6c:	b570      	push	{r4, r5, r6, lr}
 8009e6e:	4e0f      	ldr	r6, [pc, #60]	@ (8009eac <sbrk_aligned+0x40>)
 8009e70:	460c      	mov	r4, r1
 8009e72:	6831      	ldr	r1, [r6, #0]
 8009e74:	4605      	mov	r5, r0
 8009e76:	b911      	cbnz	r1, 8009e7e <sbrk_aligned+0x12>
 8009e78:	f000 fa22 	bl	800a2c0 <_sbrk_r>
 8009e7c:	6030      	str	r0, [r6, #0]
 8009e7e:	4621      	mov	r1, r4
 8009e80:	4628      	mov	r0, r5
 8009e82:	f000 fa1d 	bl	800a2c0 <_sbrk_r>
 8009e86:	1c43      	adds	r3, r0, #1
 8009e88:	d103      	bne.n	8009e92 <sbrk_aligned+0x26>
 8009e8a:	f04f 34ff 	mov.w	r4, #4294967295
 8009e8e:	4620      	mov	r0, r4
 8009e90:	bd70      	pop	{r4, r5, r6, pc}
 8009e92:	1cc4      	adds	r4, r0, #3
 8009e94:	f024 0403 	bic.w	r4, r4, #3
 8009e98:	42a0      	cmp	r0, r4
 8009e9a:	d0f8      	beq.n	8009e8e <sbrk_aligned+0x22>
 8009e9c:	1a21      	subs	r1, r4, r0
 8009e9e:	4628      	mov	r0, r5
 8009ea0:	f000 fa0e 	bl	800a2c0 <_sbrk_r>
 8009ea4:	3001      	adds	r0, #1
 8009ea6:	d1f2      	bne.n	8009e8e <sbrk_aligned+0x22>
 8009ea8:	e7ef      	b.n	8009e8a <sbrk_aligned+0x1e>
 8009eaa:	bf00      	nop
 8009eac:	20000ca0 	.word	0x20000ca0

08009eb0 <_malloc_r>:
 8009eb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009eb4:	1ccd      	adds	r5, r1, #3
 8009eb6:	f025 0503 	bic.w	r5, r5, #3
 8009eba:	3508      	adds	r5, #8
 8009ebc:	2d0c      	cmp	r5, #12
 8009ebe:	bf38      	it	cc
 8009ec0:	250c      	movcc	r5, #12
 8009ec2:	2d00      	cmp	r5, #0
 8009ec4:	4606      	mov	r6, r0
 8009ec6:	db01      	blt.n	8009ecc <_malloc_r+0x1c>
 8009ec8:	42a9      	cmp	r1, r5
 8009eca:	d904      	bls.n	8009ed6 <_malloc_r+0x26>
 8009ecc:	230c      	movs	r3, #12
 8009ece:	6033      	str	r3, [r6, #0]
 8009ed0:	2000      	movs	r0, #0
 8009ed2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009ed6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009fac <_malloc_r+0xfc>
 8009eda:	f000 f869 	bl	8009fb0 <__malloc_lock>
 8009ede:	f8d8 3000 	ldr.w	r3, [r8]
 8009ee2:	461c      	mov	r4, r3
 8009ee4:	bb44      	cbnz	r4, 8009f38 <_malloc_r+0x88>
 8009ee6:	4629      	mov	r1, r5
 8009ee8:	4630      	mov	r0, r6
 8009eea:	f7ff ffbf 	bl	8009e6c <sbrk_aligned>
 8009eee:	1c43      	adds	r3, r0, #1
 8009ef0:	4604      	mov	r4, r0
 8009ef2:	d158      	bne.n	8009fa6 <_malloc_r+0xf6>
 8009ef4:	f8d8 4000 	ldr.w	r4, [r8]
 8009ef8:	4627      	mov	r7, r4
 8009efa:	2f00      	cmp	r7, #0
 8009efc:	d143      	bne.n	8009f86 <_malloc_r+0xd6>
 8009efe:	2c00      	cmp	r4, #0
 8009f00:	d04b      	beq.n	8009f9a <_malloc_r+0xea>
 8009f02:	6823      	ldr	r3, [r4, #0]
 8009f04:	4639      	mov	r1, r7
 8009f06:	4630      	mov	r0, r6
 8009f08:	eb04 0903 	add.w	r9, r4, r3
 8009f0c:	f000 f9d8 	bl	800a2c0 <_sbrk_r>
 8009f10:	4581      	cmp	r9, r0
 8009f12:	d142      	bne.n	8009f9a <_malloc_r+0xea>
 8009f14:	6821      	ldr	r1, [r4, #0]
 8009f16:	1a6d      	subs	r5, r5, r1
 8009f18:	4629      	mov	r1, r5
 8009f1a:	4630      	mov	r0, r6
 8009f1c:	f7ff ffa6 	bl	8009e6c <sbrk_aligned>
 8009f20:	3001      	adds	r0, #1
 8009f22:	d03a      	beq.n	8009f9a <_malloc_r+0xea>
 8009f24:	6823      	ldr	r3, [r4, #0]
 8009f26:	442b      	add	r3, r5
 8009f28:	6023      	str	r3, [r4, #0]
 8009f2a:	f8d8 3000 	ldr.w	r3, [r8]
 8009f2e:	685a      	ldr	r2, [r3, #4]
 8009f30:	bb62      	cbnz	r2, 8009f8c <_malloc_r+0xdc>
 8009f32:	f8c8 7000 	str.w	r7, [r8]
 8009f36:	e00f      	b.n	8009f58 <_malloc_r+0xa8>
 8009f38:	6822      	ldr	r2, [r4, #0]
 8009f3a:	1b52      	subs	r2, r2, r5
 8009f3c:	d420      	bmi.n	8009f80 <_malloc_r+0xd0>
 8009f3e:	2a0b      	cmp	r2, #11
 8009f40:	d917      	bls.n	8009f72 <_malloc_r+0xc2>
 8009f42:	1961      	adds	r1, r4, r5
 8009f44:	42a3      	cmp	r3, r4
 8009f46:	6025      	str	r5, [r4, #0]
 8009f48:	bf18      	it	ne
 8009f4a:	6059      	strne	r1, [r3, #4]
 8009f4c:	6863      	ldr	r3, [r4, #4]
 8009f4e:	bf08      	it	eq
 8009f50:	f8c8 1000 	streq.w	r1, [r8]
 8009f54:	5162      	str	r2, [r4, r5]
 8009f56:	604b      	str	r3, [r1, #4]
 8009f58:	4630      	mov	r0, r6
 8009f5a:	f000 f82f 	bl	8009fbc <__malloc_unlock>
 8009f5e:	f104 000b 	add.w	r0, r4, #11
 8009f62:	1d23      	adds	r3, r4, #4
 8009f64:	f020 0007 	bic.w	r0, r0, #7
 8009f68:	1ac2      	subs	r2, r0, r3
 8009f6a:	bf1c      	itt	ne
 8009f6c:	1a1b      	subne	r3, r3, r0
 8009f6e:	50a3      	strne	r3, [r4, r2]
 8009f70:	e7af      	b.n	8009ed2 <_malloc_r+0x22>
 8009f72:	6862      	ldr	r2, [r4, #4]
 8009f74:	42a3      	cmp	r3, r4
 8009f76:	bf0c      	ite	eq
 8009f78:	f8c8 2000 	streq.w	r2, [r8]
 8009f7c:	605a      	strne	r2, [r3, #4]
 8009f7e:	e7eb      	b.n	8009f58 <_malloc_r+0xa8>
 8009f80:	4623      	mov	r3, r4
 8009f82:	6864      	ldr	r4, [r4, #4]
 8009f84:	e7ae      	b.n	8009ee4 <_malloc_r+0x34>
 8009f86:	463c      	mov	r4, r7
 8009f88:	687f      	ldr	r7, [r7, #4]
 8009f8a:	e7b6      	b.n	8009efa <_malloc_r+0x4a>
 8009f8c:	461a      	mov	r2, r3
 8009f8e:	685b      	ldr	r3, [r3, #4]
 8009f90:	42a3      	cmp	r3, r4
 8009f92:	d1fb      	bne.n	8009f8c <_malloc_r+0xdc>
 8009f94:	2300      	movs	r3, #0
 8009f96:	6053      	str	r3, [r2, #4]
 8009f98:	e7de      	b.n	8009f58 <_malloc_r+0xa8>
 8009f9a:	230c      	movs	r3, #12
 8009f9c:	6033      	str	r3, [r6, #0]
 8009f9e:	4630      	mov	r0, r6
 8009fa0:	f000 f80c 	bl	8009fbc <__malloc_unlock>
 8009fa4:	e794      	b.n	8009ed0 <_malloc_r+0x20>
 8009fa6:	6005      	str	r5, [r0, #0]
 8009fa8:	e7d6      	b.n	8009f58 <_malloc_r+0xa8>
 8009faa:	bf00      	nop
 8009fac:	20000ca4 	.word	0x20000ca4

08009fb0 <__malloc_lock>:
 8009fb0:	4801      	ldr	r0, [pc, #4]	@ (8009fb8 <__malloc_lock+0x8>)
 8009fb2:	f000 b9d2 	b.w	800a35a <__retarget_lock_acquire_recursive>
 8009fb6:	bf00      	nop
 8009fb8:	20000de8 	.word	0x20000de8

08009fbc <__malloc_unlock>:
 8009fbc:	4801      	ldr	r0, [pc, #4]	@ (8009fc4 <__malloc_unlock+0x8>)
 8009fbe:	f000 b9cd 	b.w	800a35c <__retarget_lock_release_recursive>
 8009fc2:	bf00      	nop
 8009fc4:	20000de8 	.word	0x20000de8

08009fc8 <std>:
 8009fc8:	2300      	movs	r3, #0
 8009fca:	b510      	push	{r4, lr}
 8009fcc:	4604      	mov	r4, r0
 8009fce:	e9c0 3300 	strd	r3, r3, [r0]
 8009fd2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009fd6:	6083      	str	r3, [r0, #8]
 8009fd8:	8181      	strh	r1, [r0, #12]
 8009fda:	6643      	str	r3, [r0, #100]	@ 0x64
 8009fdc:	81c2      	strh	r2, [r0, #14]
 8009fde:	6183      	str	r3, [r0, #24]
 8009fe0:	4619      	mov	r1, r3
 8009fe2:	2208      	movs	r2, #8
 8009fe4:	305c      	adds	r0, #92	@ 0x5c
 8009fe6:	f000 f92e 	bl	800a246 <memset>
 8009fea:	4b0d      	ldr	r3, [pc, #52]	@ (800a020 <std+0x58>)
 8009fec:	6263      	str	r3, [r4, #36]	@ 0x24
 8009fee:	4b0d      	ldr	r3, [pc, #52]	@ (800a024 <std+0x5c>)
 8009ff0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009ff2:	4b0d      	ldr	r3, [pc, #52]	@ (800a028 <std+0x60>)
 8009ff4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009ff6:	4b0d      	ldr	r3, [pc, #52]	@ (800a02c <std+0x64>)
 8009ff8:	6323      	str	r3, [r4, #48]	@ 0x30
 8009ffa:	4b0d      	ldr	r3, [pc, #52]	@ (800a030 <std+0x68>)
 8009ffc:	6224      	str	r4, [r4, #32]
 8009ffe:	429c      	cmp	r4, r3
 800a000:	d006      	beq.n	800a010 <std+0x48>
 800a002:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a006:	4294      	cmp	r4, r2
 800a008:	d002      	beq.n	800a010 <std+0x48>
 800a00a:	33d0      	adds	r3, #208	@ 0xd0
 800a00c:	429c      	cmp	r4, r3
 800a00e:	d105      	bne.n	800a01c <std+0x54>
 800a010:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a014:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a018:	f000 b99e 	b.w	800a358 <__retarget_lock_init_recursive>
 800a01c:	bd10      	pop	{r4, pc}
 800a01e:	bf00      	nop
 800a020:	0800a1c1 	.word	0x0800a1c1
 800a024:	0800a1e3 	.word	0x0800a1e3
 800a028:	0800a21b 	.word	0x0800a21b
 800a02c:	0800a23f 	.word	0x0800a23f
 800a030:	20000ca8 	.word	0x20000ca8

0800a034 <stdio_exit_handler>:
 800a034:	4a02      	ldr	r2, [pc, #8]	@ (800a040 <stdio_exit_handler+0xc>)
 800a036:	4903      	ldr	r1, [pc, #12]	@ (800a044 <stdio_exit_handler+0x10>)
 800a038:	4803      	ldr	r0, [pc, #12]	@ (800a048 <stdio_exit_handler+0x14>)
 800a03a:	f000 b869 	b.w	800a110 <_fwalk_sglue>
 800a03e:	bf00      	nop
 800a040:	2000002c 	.word	0x2000002c
 800a044:	0800ad4d 	.word	0x0800ad4d
 800a048:	2000003c 	.word	0x2000003c

0800a04c <cleanup_stdio>:
 800a04c:	6841      	ldr	r1, [r0, #4]
 800a04e:	4b0c      	ldr	r3, [pc, #48]	@ (800a080 <cleanup_stdio+0x34>)
 800a050:	4299      	cmp	r1, r3
 800a052:	b510      	push	{r4, lr}
 800a054:	4604      	mov	r4, r0
 800a056:	d001      	beq.n	800a05c <cleanup_stdio+0x10>
 800a058:	f000 fe78 	bl	800ad4c <_fflush_r>
 800a05c:	68a1      	ldr	r1, [r4, #8]
 800a05e:	4b09      	ldr	r3, [pc, #36]	@ (800a084 <cleanup_stdio+0x38>)
 800a060:	4299      	cmp	r1, r3
 800a062:	d002      	beq.n	800a06a <cleanup_stdio+0x1e>
 800a064:	4620      	mov	r0, r4
 800a066:	f000 fe71 	bl	800ad4c <_fflush_r>
 800a06a:	68e1      	ldr	r1, [r4, #12]
 800a06c:	4b06      	ldr	r3, [pc, #24]	@ (800a088 <cleanup_stdio+0x3c>)
 800a06e:	4299      	cmp	r1, r3
 800a070:	d004      	beq.n	800a07c <cleanup_stdio+0x30>
 800a072:	4620      	mov	r0, r4
 800a074:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a078:	f000 be68 	b.w	800ad4c <_fflush_r>
 800a07c:	bd10      	pop	{r4, pc}
 800a07e:	bf00      	nop
 800a080:	20000ca8 	.word	0x20000ca8
 800a084:	20000d10 	.word	0x20000d10
 800a088:	20000d78 	.word	0x20000d78

0800a08c <global_stdio_init.part.0>:
 800a08c:	b510      	push	{r4, lr}
 800a08e:	4b0b      	ldr	r3, [pc, #44]	@ (800a0bc <global_stdio_init.part.0+0x30>)
 800a090:	4c0b      	ldr	r4, [pc, #44]	@ (800a0c0 <global_stdio_init.part.0+0x34>)
 800a092:	4a0c      	ldr	r2, [pc, #48]	@ (800a0c4 <global_stdio_init.part.0+0x38>)
 800a094:	601a      	str	r2, [r3, #0]
 800a096:	4620      	mov	r0, r4
 800a098:	2200      	movs	r2, #0
 800a09a:	2104      	movs	r1, #4
 800a09c:	f7ff ff94 	bl	8009fc8 <std>
 800a0a0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a0a4:	2201      	movs	r2, #1
 800a0a6:	2109      	movs	r1, #9
 800a0a8:	f7ff ff8e 	bl	8009fc8 <std>
 800a0ac:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a0b0:	2202      	movs	r2, #2
 800a0b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a0b6:	2112      	movs	r1, #18
 800a0b8:	f7ff bf86 	b.w	8009fc8 <std>
 800a0bc:	20000de0 	.word	0x20000de0
 800a0c0:	20000ca8 	.word	0x20000ca8
 800a0c4:	0800a035 	.word	0x0800a035

0800a0c8 <__sfp_lock_acquire>:
 800a0c8:	4801      	ldr	r0, [pc, #4]	@ (800a0d0 <__sfp_lock_acquire+0x8>)
 800a0ca:	f000 b946 	b.w	800a35a <__retarget_lock_acquire_recursive>
 800a0ce:	bf00      	nop
 800a0d0:	20000de9 	.word	0x20000de9

0800a0d4 <__sfp_lock_release>:
 800a0d4:	4801      	ldr	r0, [pc, #4]	@ (800a0dc <__sfp_lock_release+0x8>)
 800a0d6:	f000 b941 	b.w	800a35c <__retarget_lock_release_recursive>
 800a0da:	bf00      	nop
 800a0dc:	20000de9 	.word	0x20000de9

0800a0e0 <__sinit>:
 800a0e0:	b510      	push	{r4, lr}
 800a0e2:	4604      	mov	r4, r0
 800a0e4:	f7ff fff0 	bl	800a0c8 <__sfp_lock_acquire>
 800a0e8:	6a23      	ldr	r3, [r4, #32]
 800a0ea:	b11b      	cbz	r3, 800a0f4 <__sinit+0x14>
 800a0ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a0f0:	f7ff bff0 	b.w	800a0d4 <__sfp_lock_release>
 800a0f4:	4b04      	ldr	r3, [pc, #16]	@ (800a108 <__sinit+0x28>)
 800a0f6:	6223      	str	r3, [r4, #32]
 800a0f8:	4b04      	ldr	r3, [pc, #16]	@ (800a10c <__sinit+0x2c>)
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d1f5      	bne.n	800a0ec <__sinit+0xc>
 800a100:	f7ff ffc4 	bl	800a08c <global_stdio_init.part.0>
 800a104:	e7f2      	b.n	800a0ec <__sinit+0xc>
 800a106:	bf00      	nop
 800a108:	0800a04d 	.word	0x0800a04d
 800a10c:	20000de0 	.word	0x20000de0

0800a110 <_fwalk_sglue>:
 800a110:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a114:	4607      	mov	r7, r0
 800a116:	4688      	mov	r8, r1
 800a118:	4614      	mov	r4, r2
 800a11a:	2600      	movs	r6, #0
 800a11c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a120:	f1b9 0901 	subs.w	r9, r9, #1
 800a124:	d505      	bpl.n	800a132 <_fwalk_sglue+0x22>
 800a126:	6824      	ldr	r4, [r4, #0]
 800a128:	2c00      	cmp	r4, #0
 800a12a:	d1f7      	bne.n	800a11c <_fwalk_sglue+0xc>
 800a12c:	4630      	mov	r0, r6
 800a12e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a132:	89ab      	ldrh	r3, [r5, #12]
 800a134:	2b01      	cmp	r3, #1
 800a136:	d907      	bls.n	800a148 <_fwalk_sglue+0x38>
 800a138:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a13c:	3301      	adds	r3, #1
 800a13e:	d003      	beq.n	800a148 <_fwalk_sglue+0x38>
 800a140:	4629      	mov	r1, r5
 800a142:	4638      	mov	r0, r7
 800a144:	47c0      	blx	r8
 800a146:	4306      	orrs	r6, r0
 800a148:	3568      	adds	r5, #104	@ 0x68
 800a14a:	e7e9      	b.n	800a120 <_fwalk_sglue+0x10>

0800a14c <iprintf>:
 800a14c:	b40f      	push	{r0, r1, r2, r3}
 800a14e:	b507      	push	{r0, r1, r2, lr}
 800a150:	4906      	ldr	r1, [pc, #24]	@ (800a16c <iprintf+0x20>)
 800a152:	ab04      	add	r3, sp, #16
 800a154:	6808      	ldr	r0, [r1, #0]
 800a156:	f853 2b04 	ldr.w	r2, [r3], #4
 800a15a:	6881      	ldr	r1, [r0, #8]
 800a15c:	9301      	str	r3, [sp, #4]
 800a15e:	f000 facb 	bl	800a6f8 <_vfiprintf_r>
 800a162:	b003      	add	sp, #12
 800a164:	f85d eb04 	ldr.w	lr, [sp], #4
 800a168:	b004      	add	sp, #16
 800a16a:	4770      	bx	lr
 800a16c:	20000038 	.word	0x20000038

0800a170 <putchar>:
 800a170:	4b02      	ldr	r3, [pc, #8]	@ (800a17c <putchar+0xc>)
 800a172:	4601      	mov	r1, r0
 800a174:	6818      	ldr	r0, [r3, #0]
 800a176:	6882      	ldr	r2, [r0, #8]
 800a178:	f000 be10 	b.w	800ad9c <_putc_r>
 800a17c:	20000038 	.word	0x20000038

0800a180 <siprintf>:
 800a180:	b40e      	push	{r1, r2, r3}
 800a182:	b500      	push	{lr}
 800a184:	b09c      	sub	sp, #112	@ 0x70
 800a186:	ab1d      	add	r3, sp, #116	@ 0x74
 800a188:	9002      	str	r0, [sp, #8]
 800a18a:	9006      	str	r0, [sp, #24]
 800a18c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800a190:	4809      	ldr	r0, [pc, #36]	@ (800a1b8 <siprintf+0x38>)
 800a192:	9107      	str	r1, [sp, #28]
 800a194:	9104      	str	r1, [sp, #16]
 800a196:	4909      	ldr	r1, [pc, #36]	@ (800a1bc <siprintf+0x3c>)
 800a198:	f853 2b04 	ldr.w	r2, [r3], #4
 800a19c:	9105      	str	r1, [sp, #20]
 800a19e:	6800      	ldr	r0, [r0, #0]
 800a1a0:	9301      	str	r3, [sp, #4]
 800a1a2:	a902      	add	r1, sp, #8
 800a1a4:	f000 f982 	bl	800a4ac <_svfiprintf_r>
 800a1a8:	9b02      	ldr	r3, [sp, #8]
 800a1aa:	2200      	movs	r2, #0
 800a1ac:	701a      	strb	r2, [r3, #0]
 800a1ae:	b01c      	add	sp, #112	@ 0x70
 800a1b0:	f85d eb04 	ldr.w	lr, [sp], #4
 800a1b4:	b003      	add	sp, #12
 800a1b6:	4770      	bx	lr
 800a1b8:	20000038 	.word	0x20000038
 800a1bc:	ffff0208 	.word	0xffff0208

0800a1c0 <__sread>:
 800a1c0:	b510      	push	{r4, lr}
 800a1c2:	460c      	mov	r4, r1
 800a1c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1c8:	f000 f868 	bl	800a29c <_read_r>
 800a1cc:	2800      	cmp	r0, #0
 800a1ce:	bfab      	itete	ge
 800a1d0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a1d2:	89a3      	ldrhlt	r3, [r4, #12]
 800a1d4:	181b      	addge	r3, r3, r0
 800a1d6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a1da:	bfac      	ite	ge
 800a1dc:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a1de:	81a3      	strhlt	r3, [r4, #12]
 800a1e0:	bd10      	pop	{r4, pc}

0800a1e2 <__swrite>:
 800a1e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a1e6:	461f      	mov	r7, r3
 800a1e8:	898b      	ldrh	r3, [r1, #12]
 800a1ea:	05db      	lsls	r3, r3, #23
 800a1ec:	4605      	mov	r5, r0
 800a1ee:	460c      	mov	r4, r1
 800a1f0:	4616      	mov	r6, r2
 800a1f2:	d505      	bpl.n	800a200 <__swrite+0x1e>
 800a1f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1f8:	2302      	movs	r3, #2
 800a1fa:	2200      	movs	r2, #0
 800a1fc:	f000 f83c 	bl	800a278 <_lseek_r>
 800a200:	89a3      	ldrh	r3, [r4, #12]
 800a202:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a206:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a20a:	81a3      	strh	r3, [r4, #12]
 800a20c:	4632      	mov	r2, r6
 800a20e:	463b      	mov	r3, r7
 800a210:	4628      	mov	r0, r5
 800a212:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a216:	f000 b863 	b.w	800a2e0 <_write_r>

0800a21a <__sseek>:
 800a21a:	b510      	push	{r4, lr}
 800a21c:	460c      	mov	r4, r1
 800a21e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a222:	f000 f829 	bl	800a278 <_lseek_r>
 800a226:	1c43      	adds	r3, r0, #1
 800a228:	89a3      	ldrh	r3, [r4, #12]
 800a22a:	bf15      	itete	ne
 800a22c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a22e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a232:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a236:	81a3      	strheq	r3, [r4, #12]
 800a238:	bf18      	it	ne
 800a23a:	81a3      	strhne	r3, [r4, #12]
 800a23c:	bd10      	pop	{r4, pc}

0800a23e <__sclose>:
 800a23e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a242:	f000 b809 	b.w	800a258 <_close_r>

0800a246 <memset>:
 800a246:	4402      	add	r2, r0
 800a248:	4603      	mov	r3, r0
 800a24a:	4293      	cmp	r3, r2
 800a24c:	d100      	bne.n	800a250 <memset+0xa>
 800a24e:	4770      	bx	lr
 800a250:	f803 1b01 	strb.w	r1, [r3], #1
 800a254:	e7f9      	b.n	800a24a <memset+0x4>
	...

0800a258 <_close_r>:
 800a258:	b538      	push	{r3, r4, r5, lr}
 800a25a:	4d06      	ldr	r5, [pc, #24]	@ (800a274 <_close_r+0x1c>)
 800a25c:	2300      	movs	r3, #0
 800a25e:	4604      	mov	r4, r0
 800a260:	4608      	mov	r0, r1
 800a262:	602b      	str	r3, [r5, #0]
 800a264:	f7f6 fca7 	bl	8000bb6 <_close>
 800a268:	1c43      	adds	r3, r0, #1
 800a26a:	d102      	bne.n	800a272 <_close_r+0x1a>
 800a26c:	682b      	ldr	r3, [r5, #0]
 800a26e:	b103      	cbz	r3, 800a272 <_close_r+0x1a>
 800a270:	6023      	str	r3, [r4, #0]
 800a272:	bd38      	pop	{r3, r4, r5, pc}
 800a274:	20000de4 	.word	0x20000de4

0800a278 <_lseek_r>:
 800a278:	b538      	push	{r3, r4, r5, lr}
 800a27a:	4d07      	ldr	r5, [pc, #28]	@ (800a298 <_lseek_r+0x20>)
 800a27c:	4604      	mov	r4, r0
 800a27e:	4608      	mov	r0, r1
 800a280:	4611      	mov	r1, r2
 800a282:	2200      	movs	r2, #0
 800a284:	602a      	str	r2, [r5, #0]
 800a286:	461a      	mov	r2, r3
 800a288:	f7f6 fcbc 	bl	8000c04 <_lseek>
 800a28c:	1c43      	adds	r3, r0, #1
 800a28e:	d102      	bne.n	800a296 <_lseek_r+0x1e>
 800a290:	682b      	ldr	r3, [r5, #0]
 800a292:	b103      	cbz	r3, 800a296 <_lseek_r+0x1e>
 800a294:	6023      	str	r3, [r4, #0]
 800a296:	bd38      	pop	{r3, r4, r5, pc}
 800a298:	20000de4 	.word	0x20000de4

0800a29c <_read_r>:
 800a29c:	b538      	push	{r3, r4, r5, lr}
 800a29e:	4d07      	ldr	r5, [pc, #28]	@ (800a2bc <_read_r+0x20>)
 800a2a0:	4604      	mov	r4, r0
 800a2a2:	4608      	mov	r0, r1
 800a2a4:	4611      	mov	r1, r2
 800a2a6:	2200      	movs	r2, #0
 800a2a8:	602a      	str	r2, [r5, #0]
 800a2aa:	461a      	mov	r2, r3
 800a2ac:	f7f6 fc4a 	bl	8000b44 <_read>
 800a2b0:	1c43      	adds	r3, r0, #1
 800a2b2:	d102      	bne.n	800a2ba <_read_r+0x1e>
 800a2b4:	682b      	ldr	r3, [r5, #0]
 800a2b6:	b103      	cbz	r3, 800a2ba <_read_r+0x1e>
 800a2b8:	6023      	str	r3, [r4, #0]
 800a2ba:	bd38      	pop	{r3, r4, r5, pc}
 800a2bc:	20000de4 	.word	0x20000de4

0800a2c0 <_sbrk_r>:
 800a2c0:	b538      	push	{r3, r4, r5, lr}
 800a2c2:	4d06      	ldr	r5, [pc, #24]	@ (800a2dc <_sbrk_r+0x1c>)
 800a2c4:	2300      	movs	r3, #0
 800a2c6:	4604      	mov	r4, r0
 800a2c8:	4608      	mov	r0, r1
 800a2ca:	602b      	str	r3, [r5, #0]
 800a2cc:	f7f6 fca8 	bl	8000c20 <_sbrk>
 800a2d0:	1c43      	adds	r3, r0, #1
 800a2d2:	d102      	bne.n	800a2da <_sbrk_r+0x1a>
 800a2d4:	682b      	ldr	r3, [r5, #0]
 800a2d6:	b103      	cbz	r3, 800a2da <_sbrk_r+0x1a>
 800a2d8:	6023      	str	r3, [r4, #0]
 800a2da:	bd38      	pop	{r3, r4, r5, pc}
 800a2dc:	20000de4 	.word	0x20000de4

0800a2e0 <_write_r>:
 800a2e0:	b538      	push	{r3, r4, r5, lr}
 800a2e2:	4d07      	ldr	r5, [pc, #28]	@ (800a300 <_write_r+0x20>)
 800a2e4:	4604      	mov	r4, r0
 800a2e6:	4608      	mov	r0, r1
 800a2e8:	4611      	mov	r1, r2
 800a2ea:	2200      	movs	r2, #0
 800a2ec:	602a      	str	r2, [r5, #0]
 800a2ee:	461a      	mov	r2, r3
 800a2f0:	f7f6 fc45 	bl	8000b7e <_write>
 800a2f4:	1c43      	adds	r3, r0, #1
 800a2f6:	d102      	bne.n	800a2fe <_write_r+0x1e>
 800a2f8:	682b      	ldr	r3, [r5, #0]
 800a2fa:	b103      	cbz	r3, 800a2fe <_write_r+0x1e>
 800a2fc:	6023      	str	r3, [r4, #0]
 800a2fe:	bd38      	pop	{r3, r4, r5, pc}
 800a300:	20000de4 	.word	0x20000de4

0800a304 <__errno>:
 800a304:	4b01      	ldr	r3, [pc, #4]	@ (800a30c <__errno+0x8>)
 800a306:	6818      	ldr	r0, [r3, #0]
 800a308:	4770      	bx	lr
 800a30a:	bf00      	nop
 800a30c:	20000038 	.word	0x20000038

0800a310 <__libc_init_array>:
 800a310:	b570      	push	{r4, r5, r6, lr}
 800a312:	4d0d      	ldr	r5, [pc, #52]	@ (800a348 <__libc_init_array+0x38>)
 800a314:	4c0d      	ldr	r4, [pc, #52]	@ (800a34c <__libc_init_array+0x3c>)
 800a316:	1b64      	subs	r4, r4, r5
 800a318:	10a4      	asrs	r4, r4, #2
 800a31a:	2600      	movs	r6, #0
 800a31c:	42a6      	cmp	r6, r4
 800a31e:	d109      	bne.n	800a334 <__libc_init_array+0x24>
 800a320:	4d0b      	ldr	r5, [pc, #44]	@ (800a350 <__libc_init_array+0x40>)
 800a322:	4c0c      	ldr	r4, [pc, #48]	@ (800a354 <__libc_init_array+0x44>)
 800a324:	f000 fee4 	bl	800b0f0 <_init>
 800a328:	1b64      	subs	r4, r4, r5
 800a32a:	10a4      	asrs	r4, r4, #2
 800a32c:	2600      	movs	r6, #0
 800a32e:	42a6      	cmp	r6, r4
 800a330:	d105      	bne.n	800a33e <__libc_init_array+0x2e>
 800a332:	bd70      	pop	{r4, r5, r6, pc}
 800a334:	f855 3b04 	ldr.w	r3, [r5], #4
 800a338:	4798      	blx	r3
 800a33a:	3601      	adds	r6, #1
 800a33c:	e7ee      	b.n	800a31c <__libc_init_array+0xc>
 800a33e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a342:	4798      	blx	r3
 800a344:	3601      	adds	r6, #1
 800a346:	e7f2      	b.n	800a32e <__libc_init_array+0x1e>
 800a348:	0800ba84 	.word	0x0800ba84
 800a34c:	0800ba84 	.word	0x0800ba84
 800a350:	0800ba84 	.word	0x0800ba84
 800a354:	0800ba88 	.word	0x0800ba88

0800a358 <__retarget_lock_init_recursive>:
 800a358:	4770      	bx	lr

0800a35a <__retarget_lock_acquire_recursive>:
 800a35a:	4770      	bx	lr

0800a35c <__retarget_lock_release_recursive>:
 800a35c:	4770      	bx	lr
	...

0800a360 <_free_r>:
 800a360:	b538      	push	{r3, r4, r5, lr}
 800a362:	4605      	mov	r5, r0
 800a364:	2900      	cmp	r1, #0
 800a366:	d041      	beq.n	800a3ec <_free_r+0x8c>
 800a368:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a36c:	1f0c      	subs	r4, r1, #4
 800a36e:	2b00      	cmp	r3, #0
 800a370:	bfb8      	it	lt
 800a372:	18e4      	addlt	r4, r4, r3
 800a374:	f7ff fe1c 	bl	8009fb0 <__malloc_lock>
 800a378:	4a1d      	ldr	r2, [pc, #116]	@ (800a3f0 <_free_r+0x90>)
 800a37a:	6813      	ldr	r3, [r2, #0]
 800a37c:	b933      	cbnz	r3, 800a38c <_free_r+0x2c>
 800a37e:	6063      	str	r3, [r4, #4]
 800a380:	6014      	str	r4, [r2, #0]
 800a382:	4628      	mov	r0, r5
 800a384:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a388:	f7ff be18 	b.w	8009fbc <__malloc_unlock>
 800a38c:	42a3      	cmp	r3, r4
 800a38e:	d908      	bls.n	800a3a2 <_free_r+0x42>
 800a390:	6820      	ldr	r0, [r4, #0]
 800a392:	1821      	adds	r1, r4, r0
 800a394:	428b      	cmp	r3, r1
 800a396:	bf01      	itttt	eq
 800a398:	6819      	ldreq	r1, [r3, #0]
 800a39a:	685b      	ldreq	r3, [r3, #4]
 800a39c:	1809      	addeq	r1, r1, r0
 800a39e:	6021      	streq	r1, [r4, #0]
 800a3a0:	e7ed      	b.n	800a37e <_free_r+0x1e>
 800a3a2:	461a      	mov	r2, r3
 800a3a4:	685b      	ldr	r3, [r3, #4]
 800a3a6:	b10b      	cbz	r3, 800a3ac <_free_r+0x4c>
 800a3a8:	42a3      	cmp	r3, r4
 800a3aa:	d9fa      	bls.n	800a3a2 <_free_r+0x42>
 800a3ac:	6811      	ldr	r1, [r2, #0]
 800a3ae:	1850      	adds	r0, r2, r1
 800a3b0:	42a0      	cmp	r0, r4
 800a3b2:	d10b      	bne.n	800a3cc <_free_r+0x6c>
 800a3b4:	6820      	ldr	r0, [r4, #0]
 800a3b6:	4401      	add	r1, r0
 800a3b8:	1850      	adds	r0, r2, r1
 800a3ba:	4283      	cmp	r3, r0
 800a3bc:	6011      	str	r1, [r2, #0]
 800a3be:	d1e0      	bne.n	800a382 <_free_r+0x22>
 800a3c0:	6818      	ldr	r0, [r3, #0]
 800a3c2:	685b      	ldr	r3, [r3, #4]
 800a3c4:	6053      	str	r3, [r2, #4]
 800a3c6:	4408      	add	r0, r1
 800a3c8:	6010      	str	r0, [r2, #0]
 800a3ca:	e7da      	b.n	800a382 <_free_r+0x22>
 800a3cc:	d902      	bls.n	800a3d4 <_free_r+0x74>
 800a3ce:	230c      	movs	r3, #12
 800a3d0:	602b      	str	r3, [r5, #0]
 800a3d2:	e7d6      	b.n	800a382 <_free_r+0x22>
 800a3d4:	6820      	ldr	r0, [r4, #0]
 800a3d6:	1821      	adds	r1, r4, r0
 800a3d8:	428b      	cmp	r3, r1
 800a3da:	bf04      	itt	eq
 800a3dc:	6819      	ldreq	r1, [r3, #0]
 800a3de:	685b      	ldreq	r3, [r3, #4]
 800a3e0:	6063      	str	r3, [r4, #4]
 800a3e2:	bf04      	itt	eq
 800a3e4:	1809      	addeq	r1, r1, r0
 800a3e6:	6021      	streq	r1, [r4, #0]
 800a3e8:	6054      	str	r4, [r2, #4]
 800a3ea:	e7ca      	b.n	800a382 <_free_r+0x22>
 800a3ec:	bd38      	pop	{r3, r4, r5, pc}
 800a3ee:	bf00      	nop
 800a3f0:	20000ca4 	.word	0x20000ca4

0800a3f4 <__ssputs_r>:
 800a3f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a3f8:	688e      	ldr	r6, [r1, #8]
 800a3fa:	461f      	mov	r7, r3
 800a3fc:	42be      	cmp	r6, r7
 800a3fe:	680b      	ldr	r3, [r1, #0]
 800a400:	4682      	mov	sl, r0
 800a402:	460c      	mov	r4, r1
 800a404:	4690      	mov	r8, r2
 800a406:	d82d      	bhi.n	800a464 <__ssputs_r+0x70>
 800a408:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a40c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a410:	d026      	beq.n	800a460 <__ssputs_r+0x6c>
 800a412:	6965      	ldr	r5, [r4, #20]
 800a414:	6909      	ldr	r1, [r1, #16]
 800a416:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a41a:	eba3 0901 	sub.w	r9, r3, r1
 800a41e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a422:	1c7b      	adds	r3, r7, #1
 800a424:	444b      	add	r3, r9
 800a426:	106d      	asrs	r5, r5, #1
 800a428:	429d      	cmp	r5, r3
 800a42a:	bf38      	it	cc
 800a42c:	461d      	movcc	r5, r3
 800a42e:	0553      	lsls	r3, r2, #21
 800a430:	d527      	bpl.n	800a482 <__ssputs_r+0x8e>
 800a432:	4629      	mov	r1, r5
 800a434:	f7ff fd3c 	bl	8009eb0 <_malloc_r>
 800a438:	4606      	mov	r6, r0
 800a43a:	b360      	cbz	r0, 800a496 <__ssputs_r+0xa2>
 800a43c:	6921      	ldr	r1, [r4, #16]
 800a43e:	464a      	mov	r2, r9
 800a440:	f000 fd8e 	bl	800af60 <memcpy>
 800a444:	89a3      	ldrh	r3, [r4, #12]
 800a446:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a44a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a44e:	81a3      	strh	r3, [r4, #12]
 800a450:	6126      	str	r6, [r4, #16]
 800a452:	6165      	str	r5, [r4, #20]
 800a454:	444e      	add	r6, r9
 800a456:	eba5 0509 	sub.w	r5, r5, r9
 800a45a:	6026      	str	r6, [r4, #0]
 800a45c:	60a5      	str	r5, [r4, #8]
 800a45e:	463e      	mov	r6, r7
 800a460:	42be      	cmp	r6, r7
 800a462:	d900      	bls.n	800a466 <__ssputs_r+0x72>
 800a464:	463e      	mov	r6, r7
 800a466:	6820      	ldr	r0, [r4, #0]
 800a468:	4632      	mov	r2, r6
 800a46a:	4641      	mov	r1, r8
 800a46c:	f000 fd5e 	bl	800af2c <memmove>
 800a470:	68a3      	ldr	r3, [r4, #8]
 800a472:	1b9b      	subs	r3, r3, r6
 800a474:	60a3      	str	r3, [r4, #8]
 800a476:	6823      	ldr	r3, [r4, #0]
 800a478:	4433      	add	r3, r6
 800a47a:	6023      	str	r3, [r4, #0]
 800a47c:	2000      	movs	r0, #0
 800a47e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a482:	462a      	mov	r2, r5
 800a484:	f000 fd7a 	bl	800af7c <_realloc_r>
 800a488:	4606      	mov	r6, r0
 800a48a:	2800      	cmp	r0, #0
 800a48c:	d1e0      	bne.n	800a450 <__ssputs_r+0x5c>
 800a48e:	6921      	ldr	r1, [r4, #16]
 800a490:	4650      	mov	r0, sl
 800a492:	f7ff ff65 	bl	800a360 <_free_r>
 800a496:	230c      	movs	r3, #12
 800a498:	f8ca 3000 	str.w	r3, [sl]
 800a49c:	89a3      	ldrh	r3, [r4, #12]
 800a49e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a4a2:	81a3      	strh	r3, [r4, #12]
 800a4a4:	f04f 30ff 	mov.w	r0, #4294967295
 800a4a8:	e7e9      	b.n	800a47e <__ssputs_r+0x8a>
	...

0800a4ac <_svfiprintf_r>:
 800a4ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4b0:	4698      	mov	r8, r3
 800a4b2:	898b      	ldrh	r3, [r1, #12]
 800a4b4:	061b      	lsls	r3, r3, #24
 800a4b6:	b09d      	sub	sp, #116	@ 0x74
 800a4b8:	4607      	mov	r7, r0
 800a4ba:	460d      	mov	r5, r1
 800a4bc:	4614      	mov	r4, r2
 800a4be:	d510      	bpl.n	800a4e2 <_svfiprintf_r+0x36>
 800a4c0:	690b      	ldr	r3, [r1, #16]
 800a4c2:	b973      	cbnz	r3, 800a4e2 <_svfiprintf_r+0x36>
 800a4c4:	2140      	movs	r1, #64	@ 0x40
 800a4c6:	f7ff fcf3 	bl	8009eb0 <_malloc_r>
 800a4ca:	6028      	str	r0, [r5, #0]
 800a4cc:	6128      	str	r0, [r5, #16]
 800a4ce:	b930      	cbnz	r0, 800a4de <_svfiprintf_r+0x32>
 800a4d0:	230c      	movs	r3, #12
 800a4d2:	603b      	str	r3, [r7, #0]
 800a4d4:	f04f 30ff 	mov.w	r0, #4294967295
 800a4d8:	b01d      	add	sp, #116	@ 0x74
 800a4da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4de:	2340      	movs	r3, #64	@ 0x40
 800a4e0:	616b      	str	r3, [r5, #20]
 800a4e2:	2300      	movs	r3, #0
 800a4e4:	9309      	str	r3, [sp, #36]	@ 0x24
 800a4e6:	2320      	movs	r3, #32
 800a4e8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a4ec:	f8cd 800c 	str.w	r8, [sp, #12]
 800a4f0:	2330      	movs	r3, #48	@ 0x30
 800a4f2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800a690 <_svfiprintf_r+0x1e4>
 800a4f6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a4fa:	f04f 0901 	mov.w	r9, #1
 800a4fe:	4623      	mov	r3, r4
 800a500:	469a      	mov	sl, r3
 800a502:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a506:	b10a      	cbz	r2, 800a50c <_svfiprintf_r+0x60>
 800a508:	2a25      	cmp	r2, #37	@ 0x25
 800a50a:	d1f9      	bne.n	800a500 <_svfiprintf_r+0x54>
 800a50c:	ebba 0b04 	subs.w	fp, sl, r4
 800a510:	d00b      	beq.n	800a52a <_svfiprintf_r+0x7e>
 800a512:	465b      	mov	r3, fp
 800a514:	4622      	mov	r2, r4
 800a516:	4629      	mov	r1, r5
 800a518:	4638      	mov	r0, r7
 800a51a:	f7ff ff6b 	bl	800a3f4 <__ssputs_r>
 800a51e:	3001      	adds	r0, #1
 800a520:	f000 80a7 	beq.w	800a672 <_svfiprintf_r+0x1c6>
 800a524:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a526:	445a      	add	r2, fp
 800a528:	9209      	str	r2, [sp, #36]	@ 0x24
 800a52a:	f89a 3000 	ldrb.w	r3, [sl]
 800a52e:	2b00      	cmp	r3, #0
 800a530:	f000 809f 	beq.w	800a672 <_svfiprintf_r+0x1c6>
 800a534:	2300      	movs	r3, #0
 800a536:	f04f 32ff 	mov.w	r2, #4294967295
 800a53a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a53e:	f10a 0a01 	add.w	sl, sl, #1
 800a542:	9304      	str	r3, [sp, #16]
 800a544:	9307      	str	r3, [sp, #28]
 800a546:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a54a:	931a      	str	r3, [sp, #104]	@ 0x68
 800a54c:	4654      	mov	r4, sl
 800a54e:	2205      	movs	r2, #5
 800a550:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a554:	484e      	ldr	r0, [pc, #312]	@ (800a690 <_svfiprintf_r+0x1e4>)
 800a556:	f7f5 fe4b 	bl	80001f0 <memchr>
 800a55a:	9a04      	ldr	r2, [sp, #16]
 800a55c:	b9d8      	cbnz	r0, 800a596 <_svfiprintf_r+0xea>
 800a55e:	06d0      	lsls	r0, r2, #27
 800a560:	bf44      	itt	mi
 800a562:	2320      	movmi	r3, #32
 800a564:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a568:	0711      	lsls	r1, r2, #28
 800a56a:	bf44      	itt	mi
 800a56c:	232b      	movmi	r3, #43	@ 0x2b
 800a56e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a572:	f89a 3000 	ldrb.w	r3, [sl]
 800a576:	2b2a      	cmp	r3, #42	@ 0x2a
 800a578:	d015      	beq.n	800a5a6 <_svfiprintf_r+0xfa>
 800a57a:	9a07      	ldr	r2, [sp, #28]
 800a57c:	4654      	mov	r4, sl
 800a57e:	2000      	movs	r0, #0
 800a580:	f04f 0c0a 	mov.w	ip, #10
 800a584:	4621      	mov	r1, r4
 800a586:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a58a:	3b30      	subs	r3, #48	@ 0x30
 800a58c:	2b09      	cmp	r3, #9
 800a58e:	d94b      	bls.n	800a628 <_svfiprintf_r+0x17c>
 800a590:	b1b0      	cbz	r0, 800a5c0 <_svfiprintf_r+0x114>
 800a592:	9207      	str	r2, [sp, #28]
 800a594:	e014      	b.n	800a5c0 <_svfiprintf_r+0x114>
 800a596:	eba0 0308 	sub.w	r3, r0, r8
 800a59a:	fa09 f303 	lsl.w	r3, r9, r3
 800a59e:	4313      	orrs	r3, r2
 800a5a0:	9304      	str	r3, [sp, #16]
 800a5a2:	46a2      	mov	sl, r4
 800a5a4:	e7d2      	b.n	800a54c <_svfiprintf_r+0xa0>
 800a5a6:	9b03      	ldr	r3, [sp, #12]
 800a5a8:	1d19      	adds	r1, r3, #4
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	9103      	str	r1, [sp, #12]
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	bfbb      	ittet	lt
 800a5b2:	425b      	neglt	r3, r3
 800a5b4:	f042 0202 	orrlt.w	r2, r2, #2
 800a5b8:	9307      	strge	r3, [sp, #28]
 800a5ba:	9307      	strlt	r3, [sp, #28]
 800a5bc:	bfb8      	it	lt
 800a5be:	9204      	strlt	r2, [sp, #16]
 800a5c0:	7823      	ldrb	r3, [r4, #0]
 800a5c2:	2b2e      	cmp	r3, #46	@ 0x2e
 800a5c4:	d10a      	bne.n	800a5dc <_svfiprintf_r+0x130>
 800a5c6:	7863      	ldrb	r3, [r4, #1]
 800a5c8:	2b2a      	cmp	r3, #42	@ 0x2a
 800a5ca:	d132      	bne.n	800a632 <_svfiprintf_r+0x186>
 800a5cc:	9b03      	ldr	r3, [sp, #12]
 800a5ce:	1d1a      	adds	r2, r3, #4
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	9203      	str	r2, [sp, #12]
 800a5d4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a5d8:	3402      	adds	r4, #2
 800a5da:	9305      	str	r3, [sp, #20]
 800a5dc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a6a0 <_svfiprintf_r+0x1f4>
 800a5e0:	7821      	ldrb	r1, [r4, #0]
 800a5e2:	2203      	movs	r2, #3
 800a5e4:	4650      	mov	r0, sl
 800a5e6:	f7f5 fe03 	bl	80001f0 <memchr>
 800a5ea:	b138      	cbz	r0, 800a5fc <_svfiprintf_r+0x150>
 800a5ec:	9b04      	ldr	r3, [sp, #16]
 800a5ee:	eba0 000a 	sub.w	r0, r0, sl
 800a5f2:	2240      	movs	r2, #64	@ 0x40
 800a5f4:	4082      	lsls	r2, r0
 800a5f6:	4313      	orrs	r3, r2
 800a5f8:	3401      	adds	r4, #1
 800a5fa:	9304      	str	r3, [sp, #16]
 800a5fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a600:	4824      	ldr	r0, [pc, #144]	@ (800a694 <_svfiprintf_r+0x1e8>)
 800a602:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a606:	2206      	movs	r2, #6
 800a608:	f7f5 fdf2 	bl	80001f0 <memchr>
 800a60c:	2800      	cmp	r0, #0
 800a60e:	d036      	beq.n	800a67e <_svfiprintf_r+0x1d2>
 800a610:	4b21      	ldr	r3, [pc, #132]	@ (800a698 <_svfiprintf_r+0x1ec>)
 800a612:	bb1b      	cbnz	r3, 800a65c <_svfiprintf_r+0x1b0>
 800a614:	9b03      	ldr	r3, [sp, #12]
 800a616:	3307      	adds	r3, #7
 800a618:	f023 0307 	bic.w	r3, r3, #7
 800a61c:	3308      	adds	r3, #8
 800a61e:	9303      	str	r3, [sp, #12]
 800a620:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a622:	4433      	add	r3, r6
 800a624:	9309      	str	r3, [sp, #36]	@ 0x24
 800a626:	e76a      	b.n	800a4fe <_svfiprintf_r+0x52>
 800a628:	fb0c 3202 	mla	r2, ip, r2, r3
 800a62c:	460c      	mov	r4, r1
 800a62e:	2001      	movs	r0, #1
 800a630:	e7a8      	b.n	800a584 <_svfiprintf_r+0xd8>
 800a632:	2300      	movs	r3, #0
 800a634:	3401      	adds	r4, #1
 800a636:	9305      	str	r3, [sp, #20]
 800a638:	4619      	mov	r1, r3
 800a63a:	f04f 0c0a 	mov.w	ip, #10
 800a63e:	4620      	mov	r0, r4
 800a640:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a644:	3a30      	subs	r2, #48	@ 0x30
 800a646:	2a09      	cmp	r2, #9
 800a648:	d903      	bls.n	800a652 <_svfiprintf_r+0x1a6>
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d0c6      	beq.n	800a5dc <_svfiprintf_r+0x130>
 800a64e:	9105      	str	r1, [sp, #20]
 800a650:	e7c4      	b.n	800a5dc <_svfiprintf_r+0x130>
 800a652:	fb0c 2101 	mla	r1, ip, r1, r2
 800a656:	4604      	mov	r4, r0
 800a658:	2301      	movs	r3, #1
 800a65a:	e7f0      	b.n	800a63e <_svfiprintf_r+0x192>
 800a65c:	ab03      	add	r3, sp, #12
 800a65e:	9300      	str	r3, [sp, #0]
 800a660:	462a      	mov	r2, r5
 800a662:	4b0e      	ldr	r3, [pc, #56]	@ (800a69c <_svfiprintf_r+0x1f0>)
 800a664:	a904      	add	r1, sp, #16
 800a666:	4638      	mov	r0, r7
 800a668:	f3af 8000 	nop.w
 800a66c:	1c42      	adds	r2, r0, #1
 800a66e:	4606      	mov	r6, r0
 800a670:	d1d6      	bne.n	800a620 <_svfiprintf_r+0x174>
 800a672:	89ab      	ldrh	r3, [r5, #12]
 800a674:	065b      	lsls	r3, r3, #25
 800a676:	f53f af2d 	bmi.w	800a4d4 <_svfiprintf_r+0x28>
 800a67a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a67c:	e72c      	b.n	800a4d8 <_svfiprintf_r+0x2c>
 800a67e:	ab03      	add	r3, sp, #12
 800a680:	9300      	str	r3, [sp, #0]
 800a682:	462a      	mov	r2, r5
 800a684:	4b05      	ldr	r3, [pc, #20]	@ (800a69c <_svfiprintf_r+0x1f0>)
 800a686:	a904      	add	r1, sp, #16
 800a688:	4638      	mov	r0, r7
 800a68a:	f000 f9bb 	bl	800aa04 <_printf_i>
 800a68e:	e7ed      	b.n	800a66c <_svfiprintf_r+0x1c0>
 800a690:	0800ba48 	.word	0x0800ba48
 800a694:	0800ba52 	.word	0x0800ba52
 800a698:	00000000 	.word	0x00000000
 800a69c:	0800a3f5 	.word	0x0800a3f5
 800a6a0:	0800ba4e 	.word	0x0800ba4e

0800a6a4 <__sfputc_r>:
 800a6a4:	6893      	ldr	r3, [r2, #8]
 800a6a6:	3b01      	subs	r3, #1
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	b410      	push	{r4}
 800a6ac:	6093      	str	r3, [r2, #8]
 800a6ae:	da08      	bge.n	800a6c2 <__sfputc_r+0x1e>
 800a6b0:	6994      	ldr	r4, [r2, #24]
 800a6b2:	42a3      	cmp	r3, r4
 800a6b4:	db01      	blt.n	800a6ba <__sfputc_r+0x16>
 800a6b6:	290a      	cmp	r1, #10
 800a6b8:	d103      	bne.n	800a6c2 <__sfputc_r+0x1e>
 800a6ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a6be:	f000 bba1 	b.w	800ae04 <__swbuf_r>
 800a6c2:	6813      	ldr	r3, [r2, #0]
 800a6c4:	1c58      	adds	r0, r3, #1
 800a6c6:	6010      	str	r0, [r2, #0]
 800a6c8:	7019      	strb	r1, [r3, #0]
 800a6ca:	4608      	mov	r0, r1
 800a6cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a6d0:	4770      	bx	lr

0800a6d2 <__sfputs_r>:
 800a6d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6d4:	4606      	mov	r6, r0
 800a6d6:	460f      	mov	r7, r1
 800a6d8:	4614      	mov	r4, r2
 800a6da:	18d5      	adds	r5, r2, r3
 800a6dc:	42ac      	cmp	r4, r5
 800a6de:	d101      	bne.n	800a6e4 <__sfputs_r+0x12>
 800a6e0:	2000      	movs	r0, #0
 800a6e2:	e007      	b.n	800a6f4 <__sfputs_r+0x22>
 800a6e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a6e8:	463a      	mov	r2, r7
 800a6ea:	4630      	mov	r0, r6
 800a6ec:	f7ff ffda 	bl	800a6a4 <__sfputc_r>
 800a6f0:	1c43      	adds	r3, r0, #1
 800a6f2:	d1f3      	bne.n	800a6dc <__sfputs_r+0xa>
 800a6f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a6f8 <_vfiprintf_r>:
 800a6f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6fc:	460d      	mov	r5, r1
 800a6fe:	b09d      	sub	sp, #116	@ 0x74
 800a700:	4614      	mov	r4, r2
 800a702:	4698      	mov	r8, r3
 800a704:	4606      	mov	r6, r0
 800a706:	b118      	cbz	r0, 800a710 <_vfiprintf_r+0x18>
 800a708:	6a03      	ldr	r3, [r0, #32]
 800a70a:	b90b      	cbnz	r3, 800a710 <_vfiprintf_r+0x18>
 800a70c:	f7ff fce8 	bl	800a0e0 <__sinit>
 800a710:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a712:	07d9      	lsls	r1, r3, #31
 800a714:	d405      	bmi.n	800a722 <_vfiprintf_r+0x2a>
 800a716:	89ab      	ldrh	r3, [r5, #12]
 800a718:	059a      	lsls	r2, r3, #22
 800a71a:	d402      	bmi.n	800a722 <_vfiprintf_r+0x2a>
 800a71c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a71e:	f7ff fe1c 	bl	800a35a <__retarget_lock_acquire_recursive>
 800a722:	89ab      	ldrh	r3, [r5, #12]
 800a724:	071b      	lsls	r3, r3, #28
 800a726:	d501      	bpl.n	800a72c <_vfiprintf_r+0x34>
 800a728:	692b      	ldr	r3, [r5, #16]
 800a72a:	b99b      	cbnz	r3, 800a754 <_vfiprintf_r+0x5c>
 800a72c:	4629      	mov	r1, r5
 800a72e:	4630      	mov	r0, r6
 800a730:	f000 fba6 	bl	800ae80 <__swsetup_r>
 800a734:	b170      	cbz	r0, 800a754 <_vfiprintf_r+0x5c>
 800a736:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a738:	07dc      	lsls	r4, r3, #31
 800a73a:	d504      	bpl.n	800a746 <_vfiprintf_r+0x4e>
 800a73c:	f04f 30ff 	mov.w	r0, #4294967295
 800a740:	b01d      	add	sp, #116	@ 0x74
 800a742:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a746:	89ab      	ldrh	r3, [r5, #12]
 800a748:	0598      	lsls	r0, r3, #22
 800a74a:	d4f7      	bmi.n	800a73c <_vfiprintf_r+0x44>
 800a74c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a74e:	f7ff fe05 	bl	800a35c <__retarget_lock_release_recursive>
 800a752:	e7f3      	b.n	800a73c <_vfiprintf_r+0x44>
 800a754:	2300      	movs	r3, #0
 800a756:	9309      	str	r3, [sp, #36]	@ 0x24
 800a758:	2320      	movs	r3, #32
 800a75a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a75e:	f8cd 800c 	str.w	r8, [sp, #12]
 800a762:	2330      	movs	r3, #48	@ 0x30
 800a764:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a914 <_vfiprintf_r+0x21c>
 800a768:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a76c:	f04f 0901 	mov.w	r9, #1
 800a770:	4623      	mov	r3, r4
 800a772:	469a      	mov	sl, r3
 800a774:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a778:	b10a      	cbz	r2, 800a77e <_vfiprintf_r+0x86>
 800a77a:	2a25      	cmp	r2, #37	@ 0x25
 800a77c:	d1f9      	bne.n	800a772 <_vfiprintf_r+0x7a>
 800a77e:	ebba 0b04 	subs.w	fp, sl, r4
 800a782:	d00b      	beq.n	800a79c <_vfiprintf_r+0xa4>
 800a784:	465b      	mov	r3, fp
 800a786:	4622      	mov	r2, r4
 800a788:	4629      	mov	r1, r5
 800a78a:	4630      	mov	r0, r6
 800a78c:	f7ff ffa1 	bl	800a6d2 <__sfputs_r>
 800a790:	3001      	adds	r0, #1
 800a792:	f000 80a7 	beq.w	800a8e4 <_vfiprintf_r+0x1ec>
 800a796:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a798:	445a      	add	r2, fp
 800a79a:	9209      	str	r2, [sp, #36]	@ 0x24
 800a79c:	f89a 3000 	ldrb.w	r3, [sl]
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	f000 809f 	beq.w	800a8e4 <_vfiprintf_r+0x1ec>
 800a7a6:	2300      	movs	r3, #0
 800a7a8:	f04f 32ff 	mov.w	r2, #4294967295
 800a7ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a7b0:	f10a 0a01 	add.w	sl, sl, #1
 800a7b4:	9304      	str	r3, [sp, #16]
 800a7b6:	9307      	str	r3, [sp, #28]
 800a7b8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a7bc:	931a      	str	r3, [sp, #104]	@ 0x68
 800a7be:	4654      	mov	r4, sl
 800a7c0:	2205      	movs	r2, #5
 800a7c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a7c6:	4853      	ldr	r0, [pc, #332]	@ (800a914 <_vfiprintf_r+0x21c>)
 800a7c8:	f7f5 fd12 	bl	80001f0 <memchr>
 800a7cc:	9a04      	ldr	r2, [sp, #16]
 800a7ce:	b9d8      	cbnz	r0, 800a808 <_vfiprintf_r+0x110>
 800a7d0:	06d1      	lsls	r1, r2, #27
 800a7d2:	bf44      	itt	mi
 800a7d4:	2320      	movmi	r3, #32
 800a7d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a7da:	0713      	lsls	r3, r2, #28
 800a7dc:	bf44      	itt	mi
 800a7de:	232b      	movmi	r3, #43	@ 0x2b
 800a7e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a7e4:	f89a 3000 	ldrb.w	r3, [sl]
 800a7e8:	2b2a      	cmp	r3, #42	@ 0x2a
 800a7ea:	d015      	beq.n	800a818 <_vfiprintf_r+0x120>
 800a7ec:	9a07      	ldr	r2, [sp, #28]
 800a7ee:	4654      	mov	r4, sl
 800a7f0:	2000      	movs	r0, #0
 800a7f2:	f04f 0c0a 	mov.w	ip, #10
 800a7f6:	4621      	mov	r1, r4
 800a7f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a7fc:	3b30      	subs	r3, #48	@ 0x30
 800a7fe:	2b09      	cmp	r3, #9
 800a800:	d94b      	bls.n	800a89a <_vfiprintf_r+0x1a2>
 800a802:	b1b0      	cbz	r0, 800a832 <_vfiprintf_r+0x13a>
 800a804:	9207      	str	r2, [sp, #28]
 800a806:	e014      	b.n	800a832 <_vfiprintf_r+0x13a>
 800a808:	eba0 0308 	sub.w	r3, r0, r8
 800a80c:	fa09 f303 	lsl.w	r3, r9, r3
 800a810:	4313      	orrs	r3, r2
 800a812:	9304      	str	r3, [sp, #16]
 800a814:	46a2      	mov	sl, r4
 800a816:	e7d2      	b.n	800a7be <_vfiprintf_r+0xc6>
 800a818:	9b03      	ldr	r3, [sp, #12]
 800a81a:	1d19      	adds	r1, r3, #4
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	9103      	str	r1, [sp, #12]
 800a820:	2b00      	cmp	r3, #0
 800a822:	bfbb      	ittet	lt
 800a824:	425b      	neglt	r3, r3
 800a826:	f042 0202 	orrlt.w	r2, r2, #2
 800a82a:	9307      	strge	r3, [sp, #28]
 800a82c:	9307      	strlt	r3, [sp, #28]
 800a82e:	bfb8      	it	lt
 800a830:	9204      	strlt	r2, [sp, #16]
 800a832:	7823      	ldrb	r3, [r4, #0]
 800a834:	2b2e      	cmp	r3, #46	@ 0x2e
 800a836:	d10a      	bne.n	800a84e <_vfiprintf_r+0x156>
 800a838:	7863      	ldrb	r3, [r4, #1]
 800a83a:	2b2a      	cmp	r3, #42	@ 0x2a
 800a83c:	d132      	bne.n	800a8a4 <_vfiprintf_r+0x1ac>
 800a83e:	9b03      	ldr	r3, [sp, #12]
 800a840:	1d1a      	adds	r2, r3, #4
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	9203      	str	r2, [sp, #12]
 800a846:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a84a:	3402      	adds	r4, #2
 800a84c:	9305      	str	r3, [sp, #20]
 800a84e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a924 <_vfiprintf_r+0x22c>
 800a852:	7821      	ldrb	r1, [r4, #0]
 800a854:	2203      	movs	r2, #3
 800a856:	4650      	mov	r0, sl
 800a858:	f7f5 fcca 	bl	80001f0 <memchr>
 800a85c:	b138      	cbz	r0, 800a86e <_vfiprintf_r+0x176>
 800a85e:	9b04      	ldr	r3, [sp, #16]
 800a860:	eba0 000a 	sub.w	r0, r0, sl
 800a864:	2240      	movs	r2, #64	@ 0x40
 800a866:	4082      	lsls	r2, r0
 800a868:	4313      	orrs	r3, r2
 800a86a:	3401      	adds	r4, #1
 800a86c:	9304      	str	r3, [sp, #16]
 800a86e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a872:	4829      	ldr	r0, [pc, #164]	@ (800a918 <_vfiprintf_r+0x220>)
 800a874:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a878:	2206      	movs	r2, #6
 800a87a:	f7f5 fcb9 	bl	80001f0 <memchr>
 800a87e:	2800      	cmp	r0, #0
 800a880:	d03f      	beq.n	800a902 <_vfiprintf_r+0x20a>
 800a882:	4b26      	ldr	r3, [pc, #152]	@ (800a91c <_vfiprintf_r+0x224>)
 800a884:	bb1b      	cbnz	r3, 800a8ce <_vfiprintf_r+0x1d6>
 800a886:	9b03      	ldr	r3, [sp, #12]
 800a888:	3307      	adds	r3, #7
 800a88a:	f023 0307 	bic.w	r3, r3, #7
 800a88e:	3308      	adds	r3, #8
 800a890:	9303      	str	r3, [sp, #12]
 800a892:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a894:	443b      	add	r3, r7
 800a896:	9309      	str	r3, [sp, #36]	@ 0x24
 800a898:	e76a      	b.n	800a770 <_vfiprintf_r+0x78>
 800a89a:	fb0c 3202 	mla	r2, ip, r2, r3
 800a89e:	460c      	mov	r4, r1
 800a8a0:	2001      	movs	r0, #1
 800a8a2:	e7a8      	b.n	800a7f6 <_vfiprintf_r+0xfe>
 800a8a4:	2300      	movs	r3, #0
 800a8a6:	3401      	adds	r4, #1
 800a8a8:	9305      	str	r3, [sp, #20]
 800a8aa:	4619      	mov	r1, r3
 800a8ac:	f04f 0c0a 	mov.w	ip, #10
 800a8b0:	4620      	mov	r0, r4
 800a8b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a8b6:	3a30      	subs	r2, #48	@ 0x30
 800a8b8:	2a09      	cmp	r2, #9
 800a8ba:	d903      	bls.n	800a8c4 <_vfiprintf_r+0x1cc>
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d0c6      	beq.n	800a84e <_vfiprintf_r+0x156>
 800a8c0:	9105      	str	r1, [sp, #20]
 800a8c2:	e7c4      	b.n	800a84e <_vfiprintf_r+0x156>
 800a8c4:	fb0c 2101 	mla	r1, ip, r1, r2
 800a8c8:	4604      	mov	r4, r0
 800a8ca:	2301      	movs	r3, #1
 800a8cc:	e7f0      	b.n	800a8b0 <_vfiprintf_r+0x1b8>
 800a8ce:	ab03      	add	r3, sp, #12
 800a8d0:	9300      	str	r3, [sp, #0]
 800a8d2:	462a      	mov	r2, r5
 800a8d4:	4b12      	ldr	r3, [pc, #72]	@ (800a920 <_vfiprintf_r+0x228>)
 800a8d6:	a904      	add	r1, sp, #16
 800a8d8:	4630      	mov	r0, r6
 800a8da:	f3af 8000 	nop.w
 800a8de:	4607      	mov	r7, r0
 800a8e0:	1c78      	adds	r0, r7, #1
 800a8e2:	d1d6      	bne.n	800a892 <_vfiprintf_r+0x19a>
 800a8e4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a8e6:	07d9      	lsls	r1, r3, #31
 800a8e8:	d405      	bmi.n	800a8f6 <_vfiprintf_r+0x1fe>
 800a8ea:	89ab      	ldrh	r3, [r5, #12]
 800a8ec:	059a      	lsls	r2, r3, #22
 800a8ee:	d402      	bmi.n	800a8f6 <_vfiprintf_r+0x1fe>
 800a8f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a8f2:	f7ff fd33 	bl	800a35c <__retarget_lock_release_recursive>
 800a8f6:	89ab      	ldrh	r3, [r5, #12]
 800a8f8:	065b      	lsls	r3, r3, #25
 800a8fa:	f53f af1f 	bmi.w	800a73c <_vfiprintf_r+0x44>
 800a8fe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a900:	e71e      	b.n	800a740 <_vfiprintf_r+0x48>
 800a902:	ab03      	add	r3, sp, #12
 800a904:	9300      	str	r3, [sp, #0]
 800a906:	462a      	mov	r2, r5
 800a908:	4b05      	ldr	r3, [pc, #20]	@ (800a920 <_vfiprintf_r+0x228>)
 800a90a:	a904      	add	r1, sp, #16
 800a90c:	4630      	mov	r0, r6
 800a90e:	f000 f879 	bl	800aa04 <_printf_i>
 800a912:	e7e4      	b.n	800a8de <_vfiprintf_r+0x1e6>
 800a914:	0800ba48 	.word	0x0800ba48
 800a918:	0800ba52 	.word	0x0800ba52
 800a91c:	00000000 	.word	0x00000000
 800a920:	0800a6d3 	.word	0x0800a6d3
 800a924:	0800ba4e 	.word	0x0800ba4e

0800a928 <_printf_common>:
 800a928:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a92c:	4616      	mov	r6, r2
 800a92e:	4698      	mov	r8, r3
 800a930:	688a      	ldr	r2, [r1, #8]
 800a932:	690b      	ldr	r3, [r1, #16]
 800a934:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a938:	4293      	cmp	r3, r2
 800a93a:	bfb8      	it	lt
 800a93c:	4613      	movlt	r3, r2
 800a93e:	6033      	str	r3, [r6, #0]
 800a940:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a944:	4607      	mov	r7, r0
 800a946:	460c      	mov	r4, r1
 800a948:	b10a      	cbz	r2, 800a94e <_printf_common+0x26>
 800a94a:	3301      	adds	r3, #1
 800a94c:	6033      	str	r3, [r6, #0]
 800a94e:	6823      	ldr	r3, [r4, #0]
 800a950:	0699      	lsls	r1, r3, #26
 800a952:	bf42      	ittt	mi
 800a954:	6833      	ldrmi	r3, [r6, #0]
 800a956:	3302      	addmi	r3, #2
 800a958:	6033      	strmi	r3, [r6, #0]
 800a95a:	6825      	ldr	r5, [r4, #0]
 800a95c:	f015 0506 	ands.w	r5, r5, #6
 800a960:	d106      	bne.n	800a970 <_printf_common+0x48>
 800a962:	f104 0a19 	add.w	sl, r4, #25
 800a966:	68e3      	ldr	r3, [r4, #12]
 800a968:	6832      	ldr	r2, [r6, #0]
 800a96a:	1a9b      	subs	r3, r3, r2
 800a96c:	42ab      	cmp	r3, r5
 800a96e:	dc26      	bgt.n	800a9be <_printf_common+0x96>
 800a970:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a974:	6822      	ldr	r2, [r4, #0]
 800a976:	3b00      	subs	r3, #0
 800a978:	bf18      	it	ne
 800a97a:	2301      	movne	r3, #1
 800a97c:	0692      	lsls	r2, r2, #26
 800a97e:	d42b      	bmi.n	800a9d8 <_printf_common+0xb0>
 800a980:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a984:	4641      	mov	r1, r8
 800a986:	4638      	mov	r0, r7
 800a988:	47c8      	blx	r9
 800a98a:	3001      	adds	r0, #1
 800a98c:	d01e      	beq.n	800a9cc <_printf_common+0xa4>
 800a98e:	6823      	ldr	r3, [r4, #0]
 800a990:	6922      	ldr	r2, [r4, #16]
 800a992:	f003 0306 	and.w	r3, r3, #6
 800a996:	2b04      	cmp	r3, #4
 800a998:	bf02      	ittt	eq
 800a99a:	68e5      	ldreq	r5, [r4, #12]
 800a99c:	6833      	ldreq	r3, [r6, #0]
 800a99e:	1aed      	subeq	r5, r5, r3
 800a9a0:	68a3      	ldr	r3, [r4, #8]
 800a9a2:	bf0c      	ite	eq
 800a9a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a9a8:	2500      	movne	r5, #0
 800a9aa:	4293      	cmp	r3, r2
 800a9ac:	bfc4      	itt	gt
 800a9ae:	1a9b      	subgt	r3, r3, r2
 800a9b0:	18ed      	addgt	r5, r5, r3
 800a9b2:	2600      	movs	r6, #0
 800a9b4:	341a      	adds	r4, #26
 800a9b6:	42b5      	cmp	r5, r6
 800a9b8:	d11a      	bne.n	800a9f0 <_printf_common+0xc8>
 800a9ba:	2000      	movs	r0, #0
 800a9bc:	e008      	b.n	800a9d0 <_printf_common+0xa8>
 800a9be:	2301      	movs	r3, #1
 800a9c0:	4652      	mov	r2, sl
 800a9c2:	4641      	mov	r1, r8
 800a9c4:	4638      	mov	r0, r7
 800a9c6:	47c8      	blx	r9
 800a9c8:	3001      	adds	r0, #1
 800a9ca:	d103      	bne.n	800a9d4 <_printf_common+0xac>
 800a9cc:	f04f 30ff 	mov.w	r0, #4294967295
 800a9d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a9d4:	3501      	adds	r5, #1
 800a9d6:	e7c6      	b.n	800a966 <_printf_common+0x3e>
 800a9d8:	18e1      	adds	r1, r4, r3
 800a9da:	1c5a      	adds	r2, r3, #1
 800a9dc:	2030      	movs	r0, #48	@ 0x30
 800a9de:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a9e2:	4422      	add	r2, r4
 800a9e4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a9e8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a9ec:	3302      	adds	r3, #2
 800a9ee:	e7c7      	b.n	800a980 <_printf_common+0x58>
 800a9f0:	2301      	movs	r3, #1
 800a9f2:	4622      	mov	r2, r4
 800a9f4:	4641      	mov	r1, r8
 800a9f6:	4638      	mov	r0, r7
 800a9f8:	47c8      	blx	r9
 800a9fa:	3001      	adds	r0, #1
 800a9fc:	d0e6      	beq.n	800a9cc <_printf_common+0xa4>
 800a9fe:	3601      	adds	r6, #1
 800aa00:	e7d9      	b.n	800a9b6 <_printf_common+0x8e>
	...

0800aa04 <_printf_i>:
 800aa04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800aa08:	7e0f      	ldrb	r7, [r1, #24]
 800aa0a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800aa0c:	2f78      	cmp	r7, #120	@ 0x78
 800aa0e:	4691      	mov	r9, r2
 800aa10:	4680      	mov	r8, r0
 800aa12:	460c      	mov	r4, r1
 800aa14:	469a      	mov	sl, r3
 800aa16:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800aa1a:	d807      	bhi.n	800aa2c <_printf_i+0x28>
 800aa1c:	2f62      	cmp	r7, #98	@ 0x62
 800aa1e:	d80a      	bhi.n	800aa36 <_printf_i+0x32>
 800aa20:	2f00      	cmp	r7, #0
 800aa22:	f000 80d2 	beq.w	800abca <_printf_i+0x1c6>
 800aa26:	2f58      	cmp	r7, #88	@ 0x58
 800aa28:	f000 80b9 	beq.w	800ab9e <_printf_i+0x19a>
 800aa2c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800aa30:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800aa34:	e03a      	b.n	800aaac <_printf_i+0xa8>
 800aa36:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800aa3a:	2b15      	cmp	r3, #21
 800aa3c:	d8f6      	bhi.n	800aa2c <_printf_i+0x28>
 800aa3e:	a101      	add	r1, pc, #4	@ (adr r1, 800aa44 <_printf_i+0x40>)
 800aa40:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800aa44:	0800aa9d 	.word	0x0800aa9d
 800aa48:	0800aab1 	.word	0x0800aab1
 800aa4c:	0800aa2d 	.word	0x0800aa2d
 800aa50:	0800aa2d 	.word	0x0800aa2d
 800aa54:	0800aa2d 	.word	0x0800aa2d
 800aa58:	0800aa2d 	.word	0x0800aa2d
 800aa5c:	0800aab1 	.word	0x0800aab1
 800aa60:	0800aa2d 	.word	0x0800aa2d
 800aa64:	0800aa2d 	.word	0x0800aa2d
 800aa68:	0800aa2d 	.word	0x0800aa2d
 800aa6c:	0800aa2d 	.word	0x0800aa2d
 800aa70:	0800abb1 	.word	0x0800abb1
 800aa74:	0800aadb 	.word	0x0800aadb
 800aa78:	0800ab6b 	.word	0x0800ab6b
 800aa7c:	0800aa2d 	.word	0x0800aa2d
 800aa80:	0800aa2d 	.word	0x0800aa2d
 800aa84:	0800abd3 	.word	0x0800abd3
 800aa88:	0800aa2d 	.word	0x0800aa2d
 800aa8c:	0800aadb 	.word	0x0800aadb
 800aa90:	0800aa2d 	.word	0x0800aa2d
 800aa94:	0800aa2d 	.word	0x0800aa2d
 800aa98:	0800ab73 	.word	0x0800ab73
 800aa9c:	6833      	ldr	r3, [r6, #0]
 800aa9e:	1d1a      	adds	r2, r3, #4
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	6032      	str	r2, [r6, #0]
 800aaa4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800aaa8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800aaac:	2301      	movs	r3, #1
 800aaae:	e09d      	b.n	800abec <_printf_i+0x1e8>
 800aab0:	6833      	ldr	r3, [r6, #0]
 800aab2:	6820      	ldr	r0, [r4, #0]
 800aab4:	1d19      	adds	r1, r3, #4
 800aab6:	6031      	str	r1, [r6, #0]
 800aab8:	0606      	lsls	r6, r0, #24
 800aaba:	d501      	bpl.n	800aac0 <_printf_i+0xbc>
 800aabc:	681d      	ldr	r5, [r3, #0]
 800aabe:	e003      	b.n	800aac8 <_printf_i+0xc4>
 800aac0:	0645      	lsls	r5, r0, #25
 800aac2:	d5fb      	bpl.n	800aabc <_printf_i+0xb8>
 800aac4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800aac8:	2d00      	cmp	r5, #0
 800aaca:	da03      	bge.n	800aad4 <_printf_i+0xd0>
 800aacc:	232d      	movs	r3, #45	@ 0x2d
 800aace:	426d      	negs	r5, r5
 800aad0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800aad4:	4859      	ldr	r0, [pc, #356]	@ (800ac3c <_printf_i+0x238>)
 800aad6:	230a      	movs	r3, #10
 800aad8:	e011      	b.n	800aafe <_printf_i+0xfa>
 800aada:	6821      	ldr	r1, [r4, #0]
 800aadc:	6833      	ldr	r3, [r6, #0]
 800aade:	0608      	lsls	r0, r1, #24
 800aae0:	f853 5b04 	ldr.w	r5, [r3], #4
 800aae4:	d402      	bmi.n	800aaec <_printf_i+0xe8>
 800aae6:	0649      	lsls	r1, r1, #25
 800aae8:	bf48      	it	mi
 800aaea:	b2ad      	uxthmi	r5, r5
 800aaec:	2f6f      	cmp	r7, #111	@ 0x6f
 800aaee:	4853      	ldr	r0, [pc, #332]	@ (800ac3c <_printf_i+0x238>)
 800aaf0:	6033      	str	r3, [r6, #0]
 800aaf2:	bf14      	ite	ne
 800aaf4:	230a      	movne	r3, #10
 800aaf6:	2308      	moveq	r3, #8
 800aaf8:	2100      	movs	r1, #0
 800aafa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800aafe:	6866      	ldr	r6, [r4, #4]
 800ab00:	60a6      	str	r6, [r4, #8]
 800ab02:	2e00      	cmp	r6, #0
 800ab04:	bfa2      	ittt	ge
 800ab06:	6821      	ldrge	r1, [r4, #0]
 800ab08:	f021 0104 	bicge.w	r1, r1, #4
 800ab0c:	6021      	strge	r1, [r4, #0]
 800ab0e:	b90d      	cbnz	r5, 800ab14 <_printf_i+0x110>
 800ab10:	2e00      	cmp	r6, #0
 800ab12:	d04b      	beq.n	800abac <_printf_i+0x1a8>
 800ab14:	4616      	mov	r6, r2
 800ab16:	fbb5 f1f3 	udiv	r1, r5, r3
 800ab1a:	fb03 5711 	mls	r7, r3, r1, r5
 800ab1e:	5dc7      	ldrb	r7, [r0, r7]
 800ab20:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ab24:	462f      	mov	r7, r5
 800ab26:	42bb      	cmp	r3, r7
 800ab28:	460d      	mov	r5, r1
 800ab2a:	d9f4      	bls.n	800ab16 <_printf_i+0x112>
 800ab2c:	2b08      	cmp	r3, #8
 800ab2e:	d10b      	bne.n	800ab48 <_printf_i+0x144>
 800ab30:	6823      	ldr	r3, [r4, #0]
 800ab32:	07df      	lsls	r7, r3, #31
 800ab34:	d508      	bpl.n	800ab48 <_printf_i+0x144>
 800ab36:	6923      	ldr	r3, [r4, #16]
 800ab38:	6861      	ldr	r1, [r4, #4]
 800ab3a:	4299      	cmp	r1, r3
 800ab3c:	bfde      	ittt	le
 800ab3e:	2330      	movle	r3, #48	@ 0x30
 800ab40:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ab44:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ab48:	1b92      	subs	r2, r2, r6
 800ab4a:	6122      	str	r2, [r4, #16]
 800ab4c:	f8cd a000 	str.w	sl, [sp]
 800ab50:	464b      	mov	r3, r9
 800ab52:	aa03      	add	r2, sp, #12
 800ab54:	4621      	mov	r1, r4
 800ab56:	4640      	mov	r0, r8
 800ab58:	f7ff fee6 	bl	800a928 <_printf_common>
 800ab5c:	3001      	adds	r0, #1
 800ab5e:	d14a      	bne.n	800abf6 <_printf_i+0x1f2>
 800ab60:	f04f 30ff 	mov.w	r0, #4294967295
 800ab64:	b004      	add	sp, #16
 800ab66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab6a:	6823      	ldr	r3, [r4, #0]
 800ab6c:	f043 0320 	orr.w	r3, r3, #32
 800ab70:	6023      	str	r3, [r4, #0]
 800ab72:	4833      	ldr	r0, [pc, #204]	@ (800ac40 <_printf_i+0x23c>)
 800ab74:	2778      	movs	r7, #120	@ 0x78
 800ab76:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ab7a:	6823      	ldr	r3, [r4, #0]
 800ab7c:	6831      	ldr	r1, [r6, #0]
 800ab7e:	061f      	lsls	r7, r3, #24
 800ab80:	f851 5b04 	ldr.w	r5, [r1], #4
 800ab84:	d402      	bmi.n	800ab8c <_printf_i+0x188>
 800ab86:	065f      	lsls	r7, r3, #25
 800ab88:	bf48      	it	mi
 800ab8a:	b2ad      	uxthmi	r5, r5
 800ab8c:	6031      	str	r1, [r6, #0]
 800ab8e:	07d9      	lsls	r1, r3, #31
 800ab90:	bf44      	itt	mi
 800ab92:	f043 0320 	orrmi.w	r3, r3, #32
 800ab96:	6023      	strmi	r3, [r4, #0]
 800ab98:	b11d      	cbz	r5, 800aba2 <_printf_i+0x19e>
 800ab9a:	2310      	movs	r3, #16
 800ab9c:	e7ac      	b.n	800aaf8 <_printf_i+0xf4>
 800ab9e:	4827      	ldr	r0, [pc, #156]	@ (800ac3c <_printf_i+0x238>)
 800aba0:	e7e9      	b.n	800ab76 <_printf_i+0x172>
 800aba2:	6823      	ldr	r3, [r4, #0]
 800aba4:	f023 0320 	bic.w	r3, r3, #32
 800aba8:	6023      	str	r3, [r4, #0]
 800abaa:	e7f6      	b.n	800ab9a <_printf_i+0x196>
 800abac:	4616      	mov	r6, r2
 800abae:	e7bd      	b.n	800ab2c <_printf_i+0x128>
 800abb0:	6833      	ldr	r3, [r6, #0]
 800abb2:	6825      	ldr	r5, [r4, #0]
 800abb4:	6961      	ldr	r1, [r4, #20]
 800abb6:	1d18      	adds	r0, r3, #4
 800abb8:	6030      	str	r0, [r6, #0]
 800abba:	062e      	lsls	r6, r5, #24
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	d501      	bpl.n	800abc4 <_printf_i+0x1c0>
 800abc0:	6019      	str	r1, [r3, #0]
 800abc2:	e002      	b.n	800abca <_printf_i+0x1c6>
 800abc4:	0668      	lsls	r0, r5, #25
 800abc6:	d5fb      	bpl.n	800abc0 <_printf_i+0x1bc>
 800abc8:	8019      	strh	r1, [r3, #0]
 800abca:	2300      	movs	r3, #0
 800abcc:	6123      	str	r3, [r4, #16]
 800abce:	4616      	mov	r6, r2
 800abd0:	e7bc      	b.n	800ab4c <_printf_i+0x148>
 800abd2:	6833      	ldr	r3, [r6, #0]
 800abd4:	1d1a      	adds	r2, r3, #4
 800abd6:	6032      	str	r2, [r6, #0]
 800abd8:	681e      	ldr	r6, [r3, #0]
 800abda:	6862      	ldr	r2, [r4, #4]
 800abdc:	2100      	movs	r1, #0
 800abde:	4630      	mov	r0, r6
 800abe0:	f7f5 fb06 	bl	80001f0 <memchr>
 800abe4:	b108      	cbz	r0, 800abea <_printf_i+0x1e6>
 800abe6:	1b80      	subs	r0, r0, r6
 800abe8:	6060      	str	r0, [r4, #4]
 800abea:	6863      	ldr	r3, [r4, #4]
 800abec:	6123      	str	r3, [r4, #16]
 800abee:	2300      	movs	r3, #0
 800abf0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800abf4:	e7aa      	b.n	800ab4c <_printf_i+0x148>
 800abf6:	6923      	ldr	r3, [r4, #16]
 800abf8:	4632      	mov	r2, r6
 800abfa:	4649      	mov	r1, r9
 800abfc:	4640      	mov	r0, r8
 800abfe:	47d0      	blx	sl
 800ac00:	3001      	adds	r0, #1
 800ac02:	d0ad      	beq.n	800ab60 <_printf_i+0x15c>
 800ac04:	6823      	ldr	r3, [r4, #0]
 800ac06:	079b      	lsls	r3, r3, #30
 800ac08:	d413      	bmi.n	800ac32 <_printf_i+0x22e>
 800ac0a:	68e0      	ldr	r0, [r4, #12]
 800ac0c:	9b03      	ldr	r3, [sp, #12]
 800ac0e:	4298      	cmp	r0, r3
 800ac10:	bfb8      	it	lt
 800ac12:	4618      	movlt	r0, r3
 800ac14:	e7a6      	b.n	800ab64 <_printf_i+0x160>
 800ac16:	2301      	movs	r3, #1
 800ac18:	4632      	mov	r2, r6
 800ac1a:	4649      	mov	r1, r9
 800ac1c:	4640      	mov	r0, r8
 800ac1e:	47d0      	blx	sl
 800ac20:	3001      	adds	r0, #1
 800ac22:	d09d      	beq.n	800ab60 <_printf_i+0x15c>
 800ac24:	3501      	adds	r5, #1
 800ac26:	68e3      	ldr	r3, [r4, #12]
 800ac28:	9903      	ldr	r1, [sp, #12]
 800ac2a:	1a5b      	subs	r3, r3, r1
 800ac2c:	42ab      	cmp	r3, r5
 800ac2e:	dcf2      	bgt.n	800ac16 <_printf_i+0x212>
 800ac30:	e7eb      	b.n	800ac0a <_printf_i+0x206>
 800ac32:	2500      	movs	r5, #0
 800ac34:	f104 0619 	add.w	r6, r4, #25
 800ac38:	e7f5      	b.n	800ac26 <_printf_i+0x222>
 800ac3a:	bf00      	nop
 800ac3c:	0800ba59 	.word	0x0800ba59
 800ac40:	0800ba6a 	.word	0x0800ba6a

0800ac44 <__sflush_r>:
 800ac44:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ac48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac4c:	0716      	lsls	r6, r2, #28
 800ac4e:	4605      	mov	r5, r0
 800ac50:	460c      	mov	r4, r1
 800ac52:	d454      	bmi.n	800acfe <__sflush_r+0xba>
 800ac54:	684b      	ldr	r3, [r1, #4]
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	dc02      	bgt.n	800ac60 <__sflush_r+0x1c>
 800ac5a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	dd48      	ble.n	800acf2 <__sflush_r+0xae>
 800ac60:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ac62:	2e00      	cmp	r6, #0
 800ac64:	d045      	beq.n	800acf2 <__sflush_r+0xae>
 800ac66:	2300      	movs	r3, #0
 800ac68:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ac6c:	682f      	ldr	r7, [r5, #0]
 800ac6e:	6a21      	ldr	r1, [r4, #32]
 800ac70:	602b      	str	r3, [r5, #0]
 800ac72:	d030      	beq.n	800acd6 <__sflush_r+0x92>
 800ac74:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ac76:	89a3      	ldrh	r3, [r4, #12]
 800ac78:	0759      	lsls	r1, r3, #29
 800ac7a:	d505      	bpl.n	800ac88 <__sflush_r+0x44>
 800ac7c:	6863      	ldr	r3, [r4, #4]
 800ac7e:	1ad2      	subs	r2, r2, r3
 800ac80:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ac82:	b10b      	cbz	r3, 800ac88 <__sflush_r+0x44>
 800ac84:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ac86:	1ad2      	subs	r2, r2, r3
 800ac88:	2300      	movs	r3, #0
 800ac8a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ac8c:	6a21      	ldr	r1, [r4, #32]
 800ac8e:	4628      	mov	r0, r5
 800ac90:	47b0      	blx	r6
 800ac92:	1c43      	adds	r3, r0, #1
 800ac94:	89a3      	ldrh	r3, [r4, #12]
 800ac96:	d106      	bne.n	800aca6 <__sflush_r+0x62>
 800ac98:	6829      	ldr	r1, [r5, #0]
 800ac9a:	291d      	cmp	r1, #29
 800ac9c:	d82b      	bhi.n	800acf6 <__sflush_r+0xb2>
 800ac9e:	4a2a      	ldr	r2, [pc, #168]	@ (800ad48 <__sflush_r+0x104>)
 800aca0:	410a      	asrs	r2, r1
 800aca2:	07d6      	lsls	r6, r2, #31
 800aca4:	d427      	bmi.n	800acf6 <__sflush_r+0xb2>
 800aca6:	2200      	movs	r2, #0
 800aca8:	6062      	str	r2, [r4, #4]
 800acaa:	04d9      	lsls	r1, r3, #19
 800acac:	6922      	ldr	r2, [r4, #16]
 800acae:	6022      	str	r2, [r4, #0]
 800acb0:	d504      	bpl.n	800acbc <__sflush_r+0x78>
 800acb2:	1c42      	adds	r2, r0, #1
 800acb4:	d101      	bne.n	800acba <__sflush_r+0x76>
 800acb6:	682b      	ldr	r3, [r5, #0]
 800acb8:	b903      	cbnz	r3, 800acbc <__sflush_r+0x78>
 800acba:	6560      	str	r0, [r4, #84]	@ 0x54
 800acbc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800acbe:	602f      	str	r7, [r5, #0]
 800acc0:	b1b9      	cbz	r1, 800acf2 <__sflush_r+0xae>
 800acc2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800acc6:	4299      	cmp	r1, r3
 800acc8:	d002      	beq.n	800acd0 <__sflush_r+0x8c>
 800acca:	4628      	mov	r0, r5
 800accc:	f7ff fb48 	bl	800a360 <_free_r>
 800acd0:	2300      	movs	r3, #0
 800acd2:	6363      	str	r3, [r4, #52]	@ 0x34
 800acd4:	e00d      	b.n	800acf2 <__sflush_r+0xae>
 800acd6:	2301      	movs	r3, #1
 800acd8:	4628      	mov	r0, r5
 800acda:	47b0      	blx	r6
 800acdc:	4602      	mov	r2, r0
 800acde:	1c50      	adds	r0, r2, #1
 800ace0:	d1c9      	bne.n	800ac76 <__sflush_r+0x32>
 800ace2:	682b      	ldr	r3, [r5, #0]
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d0c6      	beq.n	800ac76 <__sflush_r+0x32>
 800ace8:	2b1d      	cmp	r3, #29
 800acea:	d001      	beq.n	800acf0 <__sflush_r+0xac>
 800acec:	2b16      	cmp	r3, #22
 800acee:	d11e      	bne.n	800ad2e <__sflush_r+0xea>
 800acf0:	602f      	str	r7, [r5, #0]
 800acf2:	2000      	movs	r0, #0
 800acf4:	e022      	b.n	800ad3c <__sflush_r+0xf8>
 800acf6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800acfa:	b21b      	sxth	r3, r3
 800acfc:	e01b      	b.n	800ad36 <__sflush_r+0xf2>
 800acfe:	690f      	ldr	r7, [r1, #16]
 800ad00:	2f00      	cmp	r7, #0
 800ad02:	d0f6      	beq.n	800acf2 <__sflush_r+0xae>
 800ad04:	0793      	lsls	r3, r2, #30
 800ad06:	680e      	ldr	r6, [r1, #0]
 800ad08:	bf08      	it	eq
 800ad0a:	694b      	ldreq	r3, [r1, #20]
 800ad0c:	600f      	str	r7, [r1, #0]
 800ad0e:	bf18      	it	ne
 800ad10:	2300      	movne	r3, #0
 800ad12:	eba6 0807 	sub.w	r8, r6, r7
 800ad16:	608b      	str	r3, [r1, #8]
 800ad18:	f1b8 0f00 	cmp.w	r8, #0
 800ad1c:	dde9      	ble.n	800acf2 <__sflush_r+0xae>
 800ad1e:	6a21      	ldr	r1, [r4, #32]
 800ad20:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800ad22:	4643      	mov	r3, r8
 800ad24:	463a      	mov	r2, r7
 800ad26:	4628      	mov	r0, r5
 800ad28:	47b0      	blx	r6
 800ad2a:	2800      	cmp	r0, #0
 800ad2c:	dc08      	bgt.n	800ad40 <__sflush_r+0xfc>
 800ad2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ad32:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ad36:	81a3      	strh	r3, [r4, #12]
 800ad38:	f04f 30ff 	mov.w	r0, #4294967295
 800ad3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad40:	4407      	add	r7, r0
 800ad42:	eba8 0800 	sub.w	r8, r8, r0
 800ad46:	e7e7      	b.n	800ad18 <__sflush_r+0xd4>
 800ad48:	dfbffffe 	.word	0xdfbffffe

0800ad4c <_fflush_r>:
 800ad4c:	b538      	push	{r3, r4, r5, lr}
 800ad4e:	690b      	ldr	r3, [r1, #16]
 800ad50:	4605      	mov	r5, r0
 800ad52:	460c      	mov	r4, r1
 800ad54:	b913      	cbnz	r3, 800ad5c <_fflush_r+0x10>
 800ad56:	2500      	movs	r5, #0
 800ad58:	4628      	mov	r0, r5
 800ad5a:	bd38      	pop	{r3, r4, r5, pc}
 800ad5c:	b118      	cbz	r0, 800ad66 <_fflush_r+0x1a>
 800ad5e:	6a03      	ldr	r3, [r0, #32]
 800ad60:	b90b      	cbnz	r3, 800ad66 <_fflush_r+0x1a>
 800ad62:	f7ff f9bd 	bl	800a0e0 <__sinit>
 800ad66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d0f3      	beq.n	800ad56 <_fflush_r+0xa>
 800ad6e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ad70:	07d0      	lsls	r0, r2, #31
 800ad72:	d404      	bmi.n	800ad7e <_fflush_r+0x32>
 800ad74:	0599      	lsls	r1, r3, #22
 800ad76:	d402      	bmi.n	800ad7e <_fflush_r+0x32>
 800ad78:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ad7a:	f7ff faee 	bl	800a35a <__retarget_lock_acquire_recursive>
 800ad7e:	4628      	mov	r0, r5
 800ad80:	4621      	mov	r1, r4
 800ad82:	f7ff ff5f 	bl	800ac44 <__sflush_r>
 800ad86:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ad88:	07da      	lsls	r2, r3, #31
 800ad8a:	4605      	mov	r5, r0
 800ad8c:	d4e4      	bmi.n	800ad58 <_fflush_r+0xc>
 800ad8e:	89a3      	ldrh	r3, [r4, #12]
 800ad90:	059b      	lsls	r3, r3, #22
 800ad92:	d4e1      	bmi.n	800ad58 <_fflush_r+0xc>
 800ad94:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ad96:	f7ff fae1 	bl	800a35c <__retarget_lock_release_recursive>
 800ad9a:	e7dd      	b.n	800ad58 <_fflush_r+0xc>

0800ad9c <_putc_r>:
 800ad9c:	b570      	push	{r4, r5, r6, lr}
 800ad9e:	460d      	mov	r5, r1
 800ada0:	4614      	mov	r4, r2
 800ada2:	4606      	mov	r6, r0
 800ada4:	b118      	cbz	r0, 800adae <_putc_r+0x12>
 800ada6:	6a03      	ldr	r3, [r0, #32]
 800ada8:	b90b      	cbnz	r3, 800adae <_putc_r+0x12>
 800adaa:	f7ff f999 	bl	800a0e0 <__sinit>
 800adae:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800adb0:	07d8      	lsls	r0, r3, #31
 800adb2:	d405      	bmi.n	800adc0 <_putc_r+0x24>
 800adb4:	89a3      	ldrh	r3, [r4, #12]
 800adb6:	0599      	lsls	r1, r3, #22
 800adb8:	d402      	bmi.n	800adc0 <_putc_r+0x24>
 800adba:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800adbc:	f7ff facd 	bl	800a35a <__retarget_lock_acquire_recursive>
 800adc0:	68a3      	ldr	r3, [r4, #8]
 800adc2:	3b01      	subs	r3, #1
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	60a3      	str	r3, [r4, #8]
 800adc8:	da05      	bge.n	800add6 <_putc_r+0x3a>
 800adca:	69a2      	ldr	r2, [r4, #24]
 800adcc:	4293      	cmp	r3, r2
 800adce:	db12      	blt.n	800adf6 <_putc_r+0x5a>
 800add0:	b2eb      	uxtb	r3, r5
 800add2:	2b0a      	cmp	r3, #10
 800add4:	d00f      	beq.n	800adf6 <_putc_r+0x5a>
 800add6:	6823      	ldr	r3, [r4, #0]
 800add8:	1c5a      	adds	r2, r3, #1
 800adda:	6022      	str	r2, [r4, #0]
 800addc:	701d      	strb	r5, [r3, #0]
 800adde:	b2ed      	uxtb	r5, r5
 800ade0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ade2:	07da      	lsls	r2, r3, #31
 800ade4:	d405      	bmi.n	800adf2 <_putc_r+0x56>
 800ade6:	89a3      	ldrh	r3, [r4, #12]
 800ade8:	059b      	lsls	r3, r3, #22
 800adea:	d402      	bmi.n	800adf2 <_putc_r+0x56>
 800adec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800adee:	f7ff fab5 	bl	800a35c <__retarget_lock_release_recursive>
 800adf2:	4628      	mov	r0, r5
 800adf4:	bd70      	pop	{r4, r5, r6, pc}
 800adf6:	4629      	mov	r1, r5
 800adf8:	4622      	mov	r2, r4
 800adfa:	4630      	mov	r0, r6
 800adfc:	f000 f802 	bl	800ae04 <__swbuf_r>
 800ae00:	4605      	mov	r5, r0
 800ae02:	e7ed      	b.n	800ade0 <_putc_r+0x44>

0800ae04 <__swbuf_r>:
 800ae04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae06:	460e      	mov	r6, r1
 800ae08:	4614      	mov	r4, r2
 800ae0a:	4605      	mov	r5, r0
 800ae0c:	b118      	cbz	r0, 800ae16 <__swbuf_r+0x12>
 800ae0e:	6a03      	ldr	r3, [r0, #32]
 800ae10:	b90b      	cbnz	r3, 800ae16 <__swbuf_r+0x12>
 800ae12:	f7ff f965 	bl	800a0e0 <__sinit>
 800ae16:	69a3      	ldr	r3, [r4, #24]
 800ae18:	60a3      	str	r3, [r4, #8]
 800ae1a:	89a3      	ldrh	r3, [r4, #12]
 800ae1c:	071a      	lsls	r2, r3, #28
 800ae1e:	d501      	bpl.n	800ae24 <__swbuf_r+0x20>
 800ae20:	6923      	ldr	r3, [r4, #16]
 800ae22:	b943      	cbnz	r3, 800ae36 <__swbuf_r+0x32>
 800ae24:	4621      	mov	r1, r4
 800ae26:	4628      	mov	r0, r5
 800ae28:	f000 f82a 	bl	800ae80 <__swsetup_r>
 800ae2c:	b118      	cbz	r0, 800ae36 <__swbuf_r+0x32>
 800ae2e:	f04f 37ff 	mov.w	r7, #4294967295
 800ae32:	4638      	mov	r0, r7
 800ae34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ae36:	6823      	ldr	r3, [r4, #0]
 800ae38:	6922      	ldr	r2, [r4, #16]
 800ae3a:	1a98      	subs	r0, r3, r2
 800ae3c:	6963      	ldr	r3, [r4, #20]
 800ae3e:	b2f6      	uxtb	r6, r6
 800ae40:	4283      	cmp	r3, r0
 800ae42:	4637      	mov	r7, r6
 800ae44:	dc05      	bgt.n	800ae52 <__swbuf_r+0x4e>
 800ae46:	4621      	mov	r1, r4
 800ae48:	4628      	mov	r0, r5
 800ae4a:	f7ff ff7f 	bl	800ad4c <_fflush_r>
 800ae4e:	2800      	cmp	r0, #0
 800ae50:	d1ed      	bne.n	800ae2e <__swbuf_r+0x2a>
 800ae52:	68a3      	ldr	r3, [r4, #8]
 800ae54:	3b01      	subs	r3, #1
 800ae56:	60a3      	str	r3, [r4, #8]
 800ae58:	6823      	ldr	r3, [r4, #0]
 800ae5a:	1c5a      	adds	r2, r3, #1
 800ae5c:	6022      	str	r2, [r4, #0]
 800ae5e:	701e      	strb	r6, [r3, #0]
 800ae60:	6962      	ldr	r2, [r4, #20]
 800ae62:	1c43      	adds	r3, r0, #1
 800ae64:	429a      	cmp	r2, r3
 800ae66:	d004      	beq.n	800ae72 <__swbuf_r+0x6e>
 800ae68:	89a3      	ldrh	r3, [r4, #12]
 800ae6a:	07db      	lsls	r3, r3, #31
 800ae6c:	d5e1      	bpl.n	800ae32 <__swbuf_r+0x2e>
 800ae6e:	2e0a      	cmp	r6, #10
 800ae70:	d1df      	bne.n	800ae32 <__swbuf_r+0x2e>
 800ae72:	4621      	mov	r1, r4
 800ae74:	4628      	mov	r0, r5
 800ae76:	f7ff ff69 	bl	800ad4c <_fflush_r>
 800ae7a:	2800      	cmp	r0, #0
 800ae7c:	d0d9      	beq.n	800ae32 <__swbuf_r+0x2e>
 800ae7e:	e7d6      	b.n	800ae2e <__swbuf_r+0x2a>

0800ae80 <__swsetup_r>:
 800ae80:	b538      	push	{r3, r4, r5, lr}
 800ae82:	4b29      	ldr	r3, [pc, #164]	@ (800af28 <__swsetup_r+0xa8>)
 800ae84:	4605      	mov	r5, r0
 800ae86:	6818      	ldr	r0, [r3, #0]
 800ae88:	460c      	mov	r4, r1
 800ae8a:	b118      	cbz	r0, 800ae94 <__swsetup_r+0x14>
 800ae8c:	6a03      	ldr	r3, [r0, #32]
 800ae8e:	b90b      	cbnz	r3, 800ae94 <__swsetup_r+0x14>
 800ae90:	f7ff f926 	bl	800a0e0 <__sinit>
 800ae94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ae98:	0719      	lsls	r1, r3, #28
 800ae9a:	d422      	bmi.n	800aee2 <__swsetup_r+0x62>
 800ae9c:	06da      	lsls	r2, r3, #27
 800ae9e:	d407      	bmi.n	800aeb0 <__swsetup_r+0x30>
 800aea0:	2209      	movs	r2, #9
 800aea2:	602a      	str	r2, [r5, #0]
 800aea4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aea8:	81a3      	strh	r3, [r4, #12]
 800aeaa:	f04f 30ff 	mov.w	r0, #4294967295
 800aeae:	e033      	b.n	800af18 <__swsetup_r+0x98>
 800aeb0:	0758      	lsls	r0, r3, #29
 800aeb2:	d512      	bpl.n	800aeda <__swsetup_r+0x5a>
 800aeb4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800aeb6:	b141      	cbz	r1, 800aeca <__swsetup_r+0x4a>
 800aeb8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800aebc:	4299      	cmp	r1, r3
 800aebe:	d002      	beq.n	800aec6 <__swsetup_r+0x46>
 800aec0:	4628      	mov	r0, r5
 800aec2:	f7ff fa4d 	bl	800a360 <_free_r>
 800aec6:	2300      	movs	r3, #0
 800aec8:	6363      	str	r3, [r4, #52]	@ 0x34
 800aeca:	89a3      	ldrh	r3, [r4, #12]
 800aecc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800aed0:	81a3      	strh	r3, [r4, #12]
 800aed2:	2300      	movs	r3, #0
 800aed4:	6063      	str	r3, [r4, #4]
 800aed6:	6923      	ldr	r3, [r4, #16]
 800aed8:	6023      	str	r3, [r4, #0]
 800aeda:	89a3      	ldrh	r3, [r4, #12]
 800aedc:	f043 0308 	orr.w	r3, r3, #8
 800aee0:	81a3      	strh	r3, [r4, #12]
 800aee2:	6923      	ldr	r3, [r4, #16]
 800aee4:	b94b      	cbnz	r3, 800aefa <__swsetup_r+0x7a>
 800aee6:	89a3      	ldrh	r3, [r4, #12]
 800aee8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800aeec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800aef0:	d003      	beq.n	800aefa <__swsetup_r+0x7a>
 800aef2:	4621      	mov	r1, r4
 800aef4:	4628      	mov	r0, r5
 800aef6:	f000 f895 	bl	800b024 <__smakebuf_r>
 800aefa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aefe:	f013 0201 	ands.w	r2, r3, #1
 800af02:	d00a      	beq.n	800af1a <__swsetup_r+0x9a>
 800af04:	2200      	movs	r2, #0
 800af06:	60a2      	str	r2, [r4, #8]
 800af08:	6962      	ldr	r2, [r4, #20]
 800af0a:	4252      	negs	r2, r2
 800af0c:	61a2      	str	r2, [r4, #24]
 800af0e:	6922      	ldr	r2, [r4, #16]
 800af10:	b942      	cbnz	r2, 800af24 <__swsetup_r+0xa4>
 800af12:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800af16:	d1c5      	bne.n	800aea4 <__swsetup_r+0x24>
 800af18:	bd38      	pop	{r3, r4, r5, pc}
 800af1a:	0799      	lsls	r1, r3, #30
 800af1c:	bf58      	it	pl
 800af1e:	6962      	ldrpl	r2, [r4, #20]
 800af20:	60a2      	str	r2, [r4, #8]
 800af22:	e7f4      	b.n	800af0e <__swsetup_r+0x8e>
 800af24:	2000      	movs	r0, #0
 800af26:	e7f7      	b.n	800af18 <__swsetup_r+0x98>
 800af28:	20000038 	.word	0x20000038

0800af2c <memmove>:
 800af2c:	4288      	cmp	r0, r1
 800af2e:	b510      	push	{r4, lr}
 800af30:	eb01 0402 	add.w	r4, r1, r2
 800af34:	d902      	bls.n	800af3c <memmove+0x10>
 800af36:	4284      	cmp	r4, r0
 800af38:	4623      	mov	r3, r4
 800af3a:	d807      	bhi.n	800af4c <memmove+0x20>
 800af3c:	1e43      	subs	r3, r0, #1
 800af3e:	42a1      	cmp	r1, r4
 800af40:	d008      	beq.n	800af54 <memmove+0x28>
 800af42:	f811 2b01 	ldrb.w	r2, [r1], #1
 800af46:	f803 2f01 	strb.w	r2, [r3, #1]!
 800af4a:	e7f8      	b.n	800af3e <memmove+0x12>
 800af4c:	4402      	add	r2, r0
 800af4e:	4601      	mov	r1, r0
 800af50:	428a      	cmp	r2, r1
 800af52:	d100      	bne.n	800af56 <memmove+0x2a>
 800af54:	bd10      	pop	{r4, pc}
 800af56:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800af5a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800af5e:	e7f7      	b.n	800af50 <memmove+0x24>

0800af60 <memcpy>:
 800af60:	440a      	add	r2, r1
 800af62:	4291      	cmp	r1, r2
 800af64:	f100 33ff 	add.w	r3, r0, #4294967295
 800af68:	d100      	bne.n	800af6c <memcpy+0xc>
 800af6a:	4770      	bx	lr
 800af6c:	b510      	push	{r4, lr}
 800af6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800af72:	f803 4f01 	strb.w	r4, [r3, #1]!
 800af76:	4291      	cmp	r1, r2
 800af78:	d1f9      	bne.n	800af6e <memcpy+0xe>
 800af7a:	bd10      	pop	{r4, pc}

0800af7c <_realloc_r>:
 800af7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af80:	4680      	mov	r8, r0
 800af82:	4615      	mov	r5, r2
 800af84:	460c      	mov	r4, r1
 800af86:	b921      	cbnz	r1, 800af92 <_realloc_r+0x16>
 800af88:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800af8c:	4611      	mov	r1, r2
 800af8e:	f7fe bf8f 	b.w	8009eb0 <_malloc_r>
 800af92:	b92a      	cbnz	r2, 800afa0 <_realloc_r+0x24>
 800af94:	f7ff f9e4 	bl	800a360 <_free_r>
 800af98:	2400      	movs	r4, #0
 800af9a:	4620      	mov	r0, r4
 800af9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800afa0:	f000 f89e 	bl	800b0e0 <_malloc_usable_size_r>
 800afa4:	4285      	cmp	r5, r0
 800afa6:	4606      	mov	r6, r0
 800afa8:	d802      	bhi.n	800afb0 <_realloc_r+0x34>
 800afaa:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800afae:	d8f4      	bhi.n	800af9a <_realloc_r+0x1e>
 800afb0:	4629      	mov	r1, r5
 800afb2:	4640      	mov	r0, r8
 800afb4:	f7fe ff7c 	bl	8009eb0 <_malloc_r>
 800afb8:	4607      	mov	r7, r0
 800afba:	2800      	cmp	r0, #0
 800afbc:	d0ec      	beq.n	800af98 <_realloc_r+0x1c>
 800afbe:	42b5      	cmp	r5, r6
 800afc0:	462a      	mov	r2, r5
 800afc2:	4621      	mov	r1, r4
 800afc4:	bf28      	it	cs
 800afc6:	4632      	movcs	r2, r6
 800afc8:	f7ff ffca 	bl	800af60 <memcpy>
 800afcc:	4621      	mov	r1, r4
 800afce:	4640      	mov	r0, r8
 800afd0:	f7ff f9c6 	bl	800a360 <_free_r>
 800afd4:	463c      	mov	r4, r7
 800afd6:	e7e0      	b.n	800af9a <_realloc_r+0x1e>

0800afd8 <__swhatbuf_r>:
 800afd8:	b570      	push	{r4, r5, r6, lr}
 800afda:	460c      	mov	r4, r1
 800afdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800afe0:	2900      	cmp	r1, #0
 800afe2:	b096      	sub	sp, #88	@ 0x58
 800afe4:	4615      	mov	r5, r2
 800afe6:	461e      	mov	r6, r3
 800afe8:	da0d      	bge.n	800b006 <__swhatbuf_r+0x2e>
 800afea:	89a3      	ldrh	r3, [r4, #12]
 800afec:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800aff0:	f04f 0100 	mov.w	r1, #0
 800aff4:	bf14      	ite	ne
 800aff6:	2340      	movne	r3, #64	@ 0x40
 800aff8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800affc:	2000      	movs	r0, #0
 800affe:	6031      	str	r1, [r6, #0]
 800b000:	602b      	str	r3, [r5, #0]
 800b002:	b016      	add	sp, #88	@ 0x58
 800b004:	bd70      	pop	{r4, r5, r6, pc}
 800b006:	466a      	mov	r2, sp
 800b008:	f000 f848 	bl	800b09c <_fstat_r>
 800b00c:	2800      	cmp	r0, #0
 800b00e:	dbec      	blt.n	800afea <__swhatbuf_r+0x12>
 800b010:	9901      	ldr	r1, [sp, #4]
 800b012:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b016:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b01a:	4259      	negs	r1, r3
 800b01c:	4159      	adcs	r1, r3
 800b01e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b022:	e7eb      	b.n	800affc <__swhatbuf_r+0x24>

0800b024 <__smakebuf_r>:
 800b024:	898b      	ldrh	r3, [r1, #12]
 800b026:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b028:	079d      	lsls	r5, r3, #30
 800b02a:	4606      	mov	r6, r0
 800b02c:	460c      	mov	r4, r1
 800b02e:	d507      	bpl.n	800b040 <__smakebuf_r+0x1c>
 800b030:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b034:	6023      	str	r3, [r4, #0]
 800b036:	6123      	str	r3, [r4, #16]
 800b038:	2301      	movs	r3, #1
 800b03a:	6163      	str	r3, [r4, #20]
 800b03c:	b003      	add	sp, #12
 800b03e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b040:	ab01      	add	r3, sp, #4
 800b042:	466a      	mov	r2, sp
 800b044:	f7ff ffc8 	bl	800afd8 <__swhatbuf_r>
 800b048:	9f00      	ldr	r7, [sp, #0]
 800b04a:	4605      	mov	r5, r0
 800b04c:	4639      	mov	r1, r7
 800b04e:	4630      	mov	r0, r6
 800b050:	f7fe ff2e 	bl	8009eb0 <_malloc_r>
 800b054:	b948      	cbnz	r0, 800b06a <__smakebuf_r+0x46>
 800b056:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b05a:	059a      	lsls	r2, r3, #22
 800b05c:	d4ee      	bmi.n	800b03c <__smakebuf_r+0x18>
 800b05e:	f023 0303 	bic.w	r3, r3, #3
 800b062:	f043 0302 	orr.w	r3, r3, #2
 800b066:	81a3      	strh	r3, [r4, #12]
 800b068:	e7e2      	b.n	800b030 <__smakebuf_r+0xc>
 800b06a:	89a3      	ldrh	r3, [r4, #12]
 800b06c:	6020      	str	r0, [r4, #0]
 800b06e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b072:	81a3      	strh	r3, [r4, #12]
 800b074:	9b01      	ldr	r3, [sp, #4]
 800b076:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b07a:	b15b      	cbz	r3, 800b094 <__smakebuf_r+0x70>
 800b07c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b080:	4630      	mov	r0, r6
 800b082:	f000 f81d 	bl	800b0c0 <_isatty_r>
 800b086:	b128      	cbz	r0, 800b094 <__smakebuf_r+0x70>
 800b088:	89a3      	ldrh	r3, [r4, #12]
 800b08a:	f023 0303 	bic.w	r3, r3, #3
 800b08e:	f043 0301 	orr.w	r3, r3, #1
 800b092:	81a3      	strh	r3, [r4, #12]
 800b094:	89a3      	ldrh	r3, [r4, #12]
 800b096:	431d      	orrs	r5, r3
 800b098:	81a5      	strh	r5, [r4, #12]
 800b09a:	e7cf      	b.n	800b03c <__smakebuf_r+0x18>

0800b09c <_fstat_r>:
 800b09c:	b538      	push	{r3, r4, r5, lr}
 800b09e:	4d07      	ldr	r5, [pc, #28]	@ (800b0bc <_fstat_r+0x20>)
 800b0a0:	2300      	movs	r3, #0
 800b0a2:	4604      	mov	r4, r0
 800b0a4:	4608      	mov	r0, r1
 800b0a6:	4611      	mov	r1, r2
 800b0a8:	602b      	str	r3, [r5, #0]
 800b0aa:	f7f5 fd90 	bl	8000bce <_fstat>
 800b0ae:	1c43      	adds	r3, r0, #1
 800b0b0:	d102      	bne.n	800b0b8 <_fstat_r+0x1c>
 800b0b2:	682b      	ldr	r3, [r5, #0]
 800b0b4:	b103      	cbz	r3, 800b0b8 <_fstat_r+0x1c>
 800b0b6:	6023      	str	r3, [r4, #0]
 800b0b8:	bd38      	pop	{r3, r4, r5, pc}
 800b0ba:	bf00      	nop
 800b0bc:	20000de4 	.word	0x20000de4

0800b0c0 <_isatty_r>:
 800b0c0:	b538      	push	{r3, r4, r5, lr}
 800b0c2:	4d06      	ldr	r5, [pc, #24]	@ (800b0dc <_isatty_r+0x1c>)
 800b0c4:	2300      	movs	r3, #0
 800b0c6:	4604      	mov	r4, r0
 800b0c8:	4608      	mov	r0, r1
 800b0ca:	602b      	str	r3, [r5, #0]
 800b0cc:	f7f5 fd8f 	bl	8000bee <_isatty>
 800b0d0:	1c43      	adds	r3, r0, #1
 800b0d2:	d102      	bne.n	800b0da <_isatty_r+0x1a>
 800b0d4:	682b      	ldr	r3, [r5, #0]
 800b0d6:	b103      	cbz	r3, 800b0da <_isatty_r+0x1a>
 800b0d8:	6023      	str	r3, [r4, #0]
 800b0da:	bd38      	pop	{r3, r4, r5, pc}
 800b0dc:	20000de4 	.word	0x20000de4

0800b0e0 <_malloc_usable_size_r>:
 800b0e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b0e4:	1f18      	subs	r0, r3, #4
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	bfbc      	itt	lt
 800b0ea:	580b      	ldrlt	r3, [r1, r0]
 800b0ec:	18c0      	addlt	r0, r0, r3
 800b0ee:	4770      	bx	lr

0800b0f0 <_init>:
 800b0f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0f2:	bf00      	nop
 800b0f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b0f6:	bc08      	pop	{r3}
 800b0f8:	469e      	mov	lr, r3
 800b0fa:	4770      	bx	lr

0800b0fc <_fini>:
 800b0fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0fe:	bf00      	nop
 800b100:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b102:	bc08      	pop	{r3}
 800b104:	469e      	mov	lr, r3
 800b106:	4770      	bx	lr
